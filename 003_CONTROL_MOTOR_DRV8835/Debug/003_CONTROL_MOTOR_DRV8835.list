
003_CONTROL_MOTOR_DRV8835.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080058b0  080058b0  000158b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b40  08005b40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b40  08005b40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b40  08005b40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08005b54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08005b54  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bda1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ec  00000000  00000000  0002bdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f8  00000000  00000000  0002ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c605  00000000  00000000  00047118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d42  00000000  00000000  0005371d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e445f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b78  00000000  00000000  000e44b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005898 	.word	0x08005898

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005898 	.word	0x08005898

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 ff2b 	bl	8001260 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe7b 	bl	8001110 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ff1d 	bl	8001260 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff13 	bl	8001260 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fea3 	bl	8001194 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fe99 	bl	8001194 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_d2uiz>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2200      	movs	r2, #0
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <__aeabi_d2uiz+0x38>)
 8000476:	0004      	movs	r4, r0
 8000478:	000d      	movs	r5, r1
 800047a:	f7ff ffef 	bl	800045c <__aeabi_dcmpge>
 800047e:	2800      	cmp	r0, #0
 8000480:	d104      	bne.n	800048c <__aeabi_d2uiz+0x1c>
 8000482:	0020      	movs	r0, r4
 8000484:	0029      	movs	r1, r5
 8000486:	f001 fd4d 	bl	8001f24 <__aeabi_d2iz>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <__aeabi_d2uiz+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	0020      	movs	r0, r4
 8000492:	0029      	movs	r1, r5
 8000494:	f001 f9b4 	bl	8001800 <__aeabi_dsub>
 8000498:	f001 fd44 	bl	8001f24 <__aeabi_d2iz>
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	061b      	lsls	r3, r3, #24
 80004a0:	469c      	mov	ip, r3
 80004a2:	4460      	add	r0, ip
 80004a4:	e7f1      	b.n	800048a <__aeabi_d2uiz+0x1a>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	41e00000 	.word	0x41e00000

080004ac <__aeabi_dadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	464f      	mov	r7, r9
 80004b0:	4646      	mov	r6, r8
 80004b2:	46d6      	mov	lr, sl
 80004b4:	000d      	movs	r5, r1
 80004b6:	0004      	movs	r4, r0
 80004b8:	b5c0      	push	{r6, r7, lr}
 80004ba:	001f      	movs	r7, r3
 80004bc:	0011      	movs	r1, r2
 80004be:	0328      	lsls	r0, r5, #12
 80004c0:	0f62      	lsrs	r2, r4, #29
 80004c2:	0a40      	lsrs	r0, r0, #9
 80004c4:	4310      	orrs	r0, r2
 80004c6:	007a      	lsls	r2, r7, #1
 80004c8:	0d52      	lsrs	r2, r2, #21
 80004ca:	00e3      	lsls	r3, r4, #3
 80004cc:	033c      	lsls	r4, r7, #12
 80004ce:	4691      	mov	r9, r2
 80004d0:	0a64      	lsrs	r4, r4, #9
 80004d2:	0ffa      	lsrs	r2, r7, #31
 80004d4:	0f4f      	lsrs	r7, r1, #29
 80004d6:	006e      	lsls	r6, r5, #1
 80004d8:	4327      	orrs	r7, r4
 80004da:	4692      	mov	sl, r2
 80004dc:	46b8      	mov	r8, r7
 80004de:	0d76      	lsrs	r6, r6, #21
 80004e0:	0fed      	lsrs	r5, r5, #31
 80004e2:	00c9      	lsls	r1, r1, #3
 80004e4:	4295      	cmp	r5, r2
 80004e6:	d100      	bne.n	80004ea <__aeabi_dadd+0x3e>
 80004e8:	e099      	b.n	800061e <__aeabi_dadd+0x172>
 80004ea:	464c      	mov	r4, r9
 80004ec:	1b34      	subs	r4, r6, r4
 80004ee:	46a4      	mov	ip, r4
 80004f0:	2c00      	cmp	r4, #0
 80004f2:	dc00      	bgt.n	80004f6 <__aeabi_dadd+0x4a>
 80004f4:	e07c      	b.n	80005f0 <__aeabi_dadd+0x144>
 80004f6:	464a      	mov	r2, r9
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d100      	bne.n	80004fe <__aeabi_dadd+0x52>
 80004fc:	e0b8      	b.n	8000670 <__aeabi_dadd+0x1c4>
 80004fe:	4ac5      	ldr	r2, [pc, #788]	; (8000814 <__aeabi_dadd+0x368>)
 8000500:	4296      	cmp	r6, r2
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x5a>
 8000504:	e11c      	b.n	8000740 <__aeabi_dadd+0x294>
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	003c      	movs	r4, r7
 800050a:	0412      	lsls	r2, r2, #16
 800050c:	4314      	orrs	r4, r2
 800050e:	46a0      	mov	r8, r4
 8000510:	4662      	mov	r2, ip
 8000512:	2a38      	cmp	r2, #56	; 0x38
 8000514:	dd00      	ble.n	8000518 <__aeabi_dadd+0x6c>
 8000516:	e161      	b.n	80007dc <__aeabi_dadd+0x330>
 8000518:	2a1f      	cmp	r2, #31
 800051a:	dd00      	ble.n	800051e <__aeabi_dadd+0x72>
 800051c:	e1cc      	b.n	80008b8 <__aeabi_dadd+0x40c>
 800051e:	4664      	mov	r4, ip
 8000520:	2220      	movs	r2, #32
 8000522:	1b12      	subs	r2, r2, r4
 8000524:	4644      	mov	r4, r8
 8000526:	4094      	lsls	r4, r2
 8000528:	000f      	movs	r7, r1
 800052a:	46a1      	mov	r9, r4
 800052c:	4664      	mov	r4, ip
 800052e:	4091      	lsls	r1, r2
 8000530:	40e7      	lsrs	r7, r4
 8000532:	464c      	mov	r4, r9
 8000534:	1e4a      	subs	r2, r1, #1
 8000536:	4191      	sbcs	r1, r2
 8000538:	433c      	orrs	r4, r7
 800053a:	4642      	mov	r2, r8
 800053c:	4321      	orrs	r1, r4
 800053e:	4664      	mov	r4, ip
 8000540:	40e2      	lsrs	r2, r4
 8000542:	1a80      	subs	r0, r0, r2
 8000544:	1a5c      	subs	r4, r3, r1
 8000546:	42a3      	cmp	r3, r4
 8000548:	419b      	sbcs	r3, r3
 800054a:	425f      	negs	r7, r3
 800054c:	1bc7      	subs	r7, r0, r7
 800054e:	023b      	lsls	r3, r7, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xa8>
 8000552:	e0d0      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000554:	027f      	lsls	r7, r7, #9
 8000556:	0a7f      	lsrs	r7, r7, #9
 8000558:	2f00      	cmp	r7, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb2>
 800055c:	e0ff      	b.n	800075e <__aeabi_dadd+0x2b2>
 800055e:	0038      	movs	r0, r7
 8000560:	f001 fd6c 	bl	800203c <__clzsi2>
 8000564:	0001      	movs	r1, r0
 8000566:	3908      	subs	r1, #8
 8000568:	2320      	movs	r3, #32
 800056a:	0022      	movs	r2, r4
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	408f      	lsls	r7, r1
 8000570:	40da      	lsrs	r2, r3
 8000572:	408c      	lsls	r4, r1
 8000574:	4317      	orrs	r7, r2
 8000576:	42b1      	cmp	r1, r6
 8000578:	da00      	bge.n	800057c <__aeabi_dadd+0xd0>
 800057a:	e0ff      	b.n	800077c <__aeabi_dadd+0x2d0>
 800057c:	1b89      	subs	r1, r1, r6
 800057e:	1c4b      	adds	r3, r1, #1
 8000580:	2b1f      	cmp	r3, #31
 8000582:	dd00      	ble.n	8000586 <__aeabi_dadd+0xda>
 8000584:	e0a8      	b.n	80006d8 <__aeabi_dadd+0x22c>
 8000586:	2220      	movs	r2, #32
 8000588:	0039      	movs	r1, r7
 800058a:	1ad2      	subs	r2, r2, r3
 800058c:	0020      	movs	r0, r4
 800058e:	4094      	lsls	r4, r2
 8000590:	4091      	lsls	r1, r2
 8000592:	40d8      	lsrs	r0, r3
 8000594:	1e62      	subs	r2, r4, #1
 8000596:	4194      	sbcs	r4, r2
 8000598:	40df      	lsrs	r7, r3
 800059a:	2600      	movs	r6, #0
 800059c:	4301      	orrs	r1, r0
 800059e:	430c      	orrs	r4, r1
 80005a0:	0763      	lsls	r3, r4, #29
 80005a2:	d009      	beq.n	80005b8 <__aeabi_dadd+0x10c>
 80005a4:	230f      	movs	r3, #15
 80005a6:	4023      	ands	r3, r4
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d005      	beq.n	80005b8 <__aeabi_dadd+0x10c>
 80005ac:	1d23      	adds	r3, r4, #4
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	41a4      	sbcs	r4, r4
 80005b2:	4264      	negs	r4, r4
 80005b4:	193f      	adds	r7, r7, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	023b      	lsls	r3, r7, #8
 80005ba:	d400      	bmi.n	80005be <__aeabi_dadd+0x112>
 80005bc:	e09e      	b.n	80006fc <__aeabi_dadd+0x250>
 80005be:	4b95      	ldr	r3, [pc, #596]	; (8000814 <__aeabi_dadd+0x368>)
 80005c0:	3601      	adds	r6, #1
 80005c2:	429e      	cmp	r6, r3
 80005c4:	d100      	bne.n	80005c8 <__aeabi_dadd+0x11c>
 80005c6:	e0b7      	b.n	8000738 <__aeabi_dadd+0x28c>
 80005c8:	4a93      	ldr	r2, [pc, #588]	; (8000818 <__aeabi_dadd+0x36c>)
 80005ca:	08e4      	lsrs	r4, r4, #3
 80005cc:	4017      	ands	r7, r2
 80005ce:	077b      	lsls	r3, r7, #29
 80005d0:	0571      	lsls	r1, r6, #21
 80005d2:	027f      	lsls	r7, r7, #9
 80005d4:	4323      	orrs	r3, r4
 80005d6:	0b3f      	lsrs	r7, r7, #12
 80005d8:	0d4a      	lsrs	r2, r1, #21
 80005da:	0512      	lsls	r2, r2, #20
 80005dc:	433a      	orrs	r2, r7
 80005de:	07ed      	lsls	r5, r5, #31
 80005e0:	432a      	orrs	r2, r5
 80005e2:	0018      	movs	r0, r3
 80005e4:	0011      	movs	r1, r2
 80005e6:	bce0      	pop	{r5, r6, r7}
 80005e8:	46ba      	mov	sl, r7
 80005ea:	46b1      	mov	r9, r6
 80005ec:	46a8      	mov	r8, r5
 80005ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f0:	2c00      	cmp	r4, #0
 80005f2:	d04b      	beq.n	800068c <__aeabi_dadd+0x1e0>
 80005f4:	464c      	mov	r4, r9
 80005f6:	1ba4      	subs	r4, r4, r6
 80005f8:	46a4      	mov	ip, r4
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d000      	beq.n	8000600 <__aeabi_dadd+0x154>
 80005fe:	e123      	b.n	8000848 <__aeabi_dadd+0x39c>
 8000600:	0004      	movs	r4, r0
 8000602:	431c      	orrs	r4, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x15c>
 8000606:	e1af      	b.n	8000968 <__aeabi_dadd+0x4bc>
 8000608:	4662      	mov	r2, ip
 800060a:	1e54      	subs	r4, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x166>
 8000610:	e215      	b.n	8000a3e <__aeabi_dadd+0x592>
 8000612:	4d80      	ldr	r5, [pc, #512]	; (8000814 <__aeabi_dadd+0x368>)
 8000614:	45ac      	cmp	ip, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x16e>
 8000618:	e1c8      	b.n	80009ac <__aeabi_dadd+0x500>
 800061a:	46a4      	mov	ip, r4
 800061c:	e11b      	b.n	8000856 <__aeabi_dadd+0x3aa>
 800061e:	464a      	mov	r2, r9
 8000620:	1ab2      	subs	r2, r6, r2
 8000622:	4694      	mov	ip, r2
 8000624:	2a00      	cmp	r2, #0
 8000626:	dc00      	bgt.n	800062a <__aeabi_dadd+0x17e>
 8000628:	e0ac      	b.n	8000784 <__aeabi_dadd+0x2d8>
 800062a:	464a      	mov	r2, r9
 800062c:	2a00      	cmp	r2, #0
 800062e:	d043      	beq.n	80006b8 <__aeabi_dadd+0x20c>
 8000630:	4a78      	ldr	r2, [pc, #480]	; (8000814 <__aeabi_dadd+0x368>)
 8000632:	4296      	cmp	r6, r2
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0x18c>
 8000636:	e1af      	b.n	8000998 <__aeabi_dadd+0x4ec>
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	003c      	movs	r4, r7
 800063c:	0412      	lsls	r2, r2, #16
 800063e:	4314      	orrs	r4, r2
 8000640:	46a0      	mov	r8, r4
 8000642:	4662      	mov	r2, ip
 8000644:	2a38      	cmp	r2, #56	; 0x38
 8000646:	dc67      	bgt.n	8000718 <__aeabi_dadd+0x26c>
 8000648:	2a1f      	cmp	r2, #31
 800064a:	dc00      	bgt.n	800064e <__aeabi_dadd+0x1a2>
 800064c:	e15f      	b.n	800090e <__aeabi_dadd+0x462>
 800064e:	4647      	mov	r7, r8
 8000650:	3a20      	subs	r2, #32
 8000652:	40d7      	lsrs	r7, r2
 8000654:	4662      	mov	r2, ip
 8000656:	2a20      	cmp	r2, #32
 8000658:	d005      	beq.n	8000666 <__aeabi_dadd+0x1ba>
 800065a:	4664      	mov	r4, ip
 800065c:	2240      	movs	r2, #64	; 0x40
 800065e:	1b12      	subs	r2, r2, r4
 8000660:	4644      	mov	r4, r8
 8000662:	4094      	lsls	r4, r2
 8000664:	4321      	orrs	r1, r4
 8000666:	1e4a      	subs	r2, r1, #1
 8000668:	4191      	sbcs	r1, r2
 800066a:	000c      	movs	r4, r1
 800066c:	433c      	orrs	r4, r7
 800066e:	e057      	b.n	8000720 <__aeabi_dadd+0x274>
 8000670:	003a      	movs	r2, r7
 8000672:	430a      	orrs	r2, r1
 8000674:	d100      	bne.n	8000678 <__aeabi_dadd+0x1cc>
 8000676:	e105      	b.n	8000884 <__aeabi_dadd+0x3d8>
 8000678:	0022      	movs	r2, r4
 800067a:	3a01      	subs	r2, #1
 800067c:	2c01      	cmp	r4, #1
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1d6>
 8000680:	e182      	b.n	8000988 <__aeabi_dadd+0x4dc>
 8000682:	4c64      	ldr	r4, [pc, #400]	; (8000814 <__aeabi_dadd+0x368>)
 8000684:	45a4      	cmp	ip, r4
 8000686:	d05b      	beq.n	8000740 <__aeabi_dadd+0x294>
 8000688:	4694      	mov	ip, r2
 800068a:	e741      	b.n	8000510 <__aeabi_dadd+0x64>
 800068c:	4c63      	ldr	r4, [pc, #396]	; (800081c <__aeabi_dadd+0x370>)
 800068e:	1c77      	adds	r7, r6, #1
 8000690:	4227      	tst	r7, r4
 8000692:	d000      	beq.n	8000696 <__aeabi_dadd+0x1ea>
 8000694:	e0c4      	b.n	8000820 <__aeabi_dadd+0x374>
 8000696:	0004      	movs	r4, r0
 8000698:	431c      	orrs	r4, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_dadd+0x1f4>
 800069e:	e169      	b.n	8000974 <__aeabi_dadd+0x4c8>
 80006a0:	2c00      	cmp	r4, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x1fa>
 80006a4:	e1bf      	b.n	8000a26 <__aeabi_dadd+0x57a>
 80006a6:	4644      	mov	r4, r8
 80006a8:	430c      	orrs	r4, r1
 80006aa:	d000      	beq.n	80006ae <__aeabi_dadd+0x202>
 80006ac:	e1d0      	b.n	8000a50 <__aeabi_dadd+0x5a4>
 80006ae:	0742      	lsls	r2, r0, #29
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	08c0      	lsrs	r0, r0, #3
 80006b6:	e029      	b.n	800070c <__aeabi_dadd+0x260>
 80006b8:	003a      	movs	r2, r7
 80006ba:	430a      	orrs	r2, r1
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x214>
 80006be:	e170      	b.n	80009a2 <__aeabi_dadd+0x4f6>
 80006c0:	4662      	mov	r2, ip
 80006c2:	4664      	mov	r4, ip
 80006c4:	3a01      	subs	r2, #1
 80006c6:	2c01      	cmp	r4, #1
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x220>
 80006ca:	e0e0      	b.n	800088e <__aeabi_dadd+0x3e2>
 80006cc:	4c51      	ldr	r4, [pc, #324]	; (8000814 <__aeabi_dadd+0x368>)
 80006ce:	45a4      	cmp	ip, r4
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x228>
 80006d2:	e161      	b.n	8000998 <__aeabi_dadd+0x4ec>
 80006d4:	4694      	mov	ip, r2
 80006d6:	e7b4      	b.n	8000642 <__aeabi_dadd+0x196>
 80006d8:	003a      	movs	r2, r7
 80006da:	391f      	subs	r1, #31
 80006dc:	40ca      	lsrs	r2, r1
 80006de:	0011      	movs	r1, r2
 80006e0:	2b20      	cmp	r3, #32
 80006e2:	d003      	beq.n	80006ec <__aeabi_dadd+0x240>
 80006e4:	2240      	movs	r2, #64	; 0x40
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	409f      	lsls	r7, r3
 80006ea:	433c      	orrs	r4, r7
 80006ec:	1e63      	subs	r3, r4, #1
 80006ee:	419c      	sbcs	r4, r3
 80006f0:	2700      	movs	r7, #0
 80006f2:	2600      	movs	r6, #0
 80006f4:	430c      	orrs	r4, r1
 80006f6:	0763      	lsls	r3, r4, #29
 80006f8:	d000      	beq.n	80006fc <__aeabi_dadd+0x250>
 80006fa:	e753      	b.n	80005a4 <__aeabi_dadd+0xf8>
 80006fc:	46b4      	mov	ip, r6
 80006fe:	08e4      	lsrs	r4, r4, #3
 8000700:	077b      	lsls	r3, r7, #29
 8000702:	4323      	orrs	r3, r4
 8000704:	08f8      	lsrs	r0, r7, #3
 8000706:	4a43      	ldr	r2, [pc, #268]	; (8000814 <__aeabi_dadd+0x368>)
 8000708:	4594      	cmp	ip, r2
 800070a:	d01d      	beq.n	8000748 <__aeabi_dadd+0x29c>
 800070c:	4662      	mov	r2, ip
 800070e:	0307      	lsls	r7, r0, #12
 8000710:	0552      	lsls	r2, r2, #21
 8000712:	0b3f      	lsrs	r7, r7, #12
 8000714:	0d52      	lsrs	r2, r2, #21
 8000716:	e760      	b.n	80005da <__aeabi_dadd+0x12e>
 8000718:	4644      	mov	r4, r8
 800071a:	430c      	orrs	r4, r1
 800071c:	1e62      	subs	r2, r4, #1
 800071e:	4194      	sbcs	r4, r2
 8000720:	18e4      	adds	r4, r4, r3
 8000722:	429c      	cmp	r4, r3
 8000724:	419b      	sbcs	r3, r3
 8000726:	425f      	negs	r7, r3
 8000728:	183f      	adds	r7, r7, r0
 800072a:	023b      	lsls	r3, r7, #8
 800072c:	d5e3      	bpl.n	80006f6 <__aeabi_dadd+0x24a>
 800072e:	4b39      	ldr	r3, [pc, #228]	; (8000814 <__aeabi_dadd+0x368>)
 8000730:	3601      	adds	r6, #1
 8000732:	429e      	cmp	r6, r3
 8000734:	d000      	beq.n	8000738 <__aeabi_dadd+0x28c>
 8000736:	e0b5      	b.n	80008a4 <__aeabi_dadd+0x3f8>
 8000738:	0032      	movs	r2, r6
 800073a:	2700      	movs	r7, #0
 800073c:	2300      	movs	r3, #0
 800073e:	e74c      	b.n	80005da <__aeabi_dadd+0x12e>
 8000740:	0742      	lsls	r2, r0, #29
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	4313      	orrs	r3, r2
 8000746:	08c0      	lsrs	r0, r0, #3
 8000748:	001a      	movs	r2, r3
 800074a:	4302      	orrs	r2, r0
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x2a4>
 800074e:	e1e1      	b.n	8000b14 <__aeabi_dadd+0x668>
 8000750:	2780      	movs	r7, #128	; 0x80
 8000752:	033f      	lsls	r7, r7, #12
 8000754:	4307      	orrs	r7, r0
 8000756:	033f      	lsls	r7, r7, #12
 8000758:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <__aeabi_dadd+0x368>)
 800075a:	0b3f      	lsrs	r7, r7, #12
 800075c:	e73d      	b.n	80005da <__aeabi_dadd+0x12e>
 800075e:	0020      	movs	r0, r4
 8000760:	f001 fc6c 	bl	800203c <__clzsi2>
 8000764:	0001      	movs	r1, r0
 8000766:	3118      	adds	r1, #24
 8000768:	291f      	cmp	r1, #31
 800076a:	dc00      	bgt.n	800076e <__aeabi_dadd+0x2c2>
 800076c:	e6fc      	b.n	8000568 <__aeabi_dadd+0xbc>
 800076e:	3808      	subs	r0, #8
 8000770:	4084      	lsls	r4, r0
 8000772:	0027      	movs	r7, r4
 8000774:	2400      	movs	r4, #0
 8000776:	42b1      	cmp	r1, r6
 8000778:	db00      	blt.n	800077c <__aeabi_dadd+0x2d0>
 800077a:	e6ff      	b.n	800057c <__aeabi_dadd+0xd0>
 800077c:	4a26      	ldr	r2, [pc, #152]	; (8000818 <__aeabi_dadd+0x36c>)
 800077e:	1a76      	subs	r6, r6, r1
 8000780:	4017      	ands	r7, r2
 8000782:	e70d      	b.n	80005a0 <__aeabi_dadd+0xf4>
 8000784:	2a00      	cmp	r2, #0
 8000786:	d02f      	beq.n	80007e8 <__aeabi_dadd+0x33c>
 8000788:	464a      	mov	r2, r9
 800078a:	1b92      	subs	r2, r2, r6
 800078c:	4694      	mov	ip, r2
 800078e:	2e00      	cmp	r6, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_dadd+0x2e8>
 8000792:	e0ad      	b.n	80008f0 <__aeabi_dadd+0x444>
 8000794:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <__aeabi_dadd+0x368>)
 8000796:	4591      	cmp	r9, r2
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x2f0>
 800079a:	e10f      	b.n	80009bc <__aeabi_dadd+0x510>
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	0412      	lsls	r2, r2, #16
 80007a0:	4310      	orrs	r0, r2
 80007a2:	4662      	mov	r2, ip
 80007a4:	2a38      	cmp	r2, #56	; 0x38
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dadd+0x2fe>
 80007a8:	e10f      	b.n	80009ca <__aeabi_dadd+0x51e>
 80007aa:	2a1f      	cmp	r2, #31
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dadd+0x304>
 80007ae:	e180      	b.n	8000ab2 <__aeabi_dadd+0x606>
 80007b0:	4664      	mov	r4, ip
 80007b2:	2220      	movs	r2, #32
 80007b4:	001e      	movs	r6, r3
 80007b6:	1b12      	subs	r2, r2, r4
 80007b8:	4667      	mov	r7, ip
 80007ba:	0004      	movs	r4, r0
 80007bc:	4093      	lsls	r3, r2
 80007be:	4094      	lsls	r4, r2
 80007c0:	40fe      	lsrs	r6, r7
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	4193      	sbcs	r3, r2
 80007c6:	40f8      	lsrs	r0, r7
 80007c8:	4334      	orrs	r4, r6
 80007ca:	431c      	orrs	r4, r3
 80007cc:	4480      	add	r8, r0
 80007ce:	1864      	adds	r4, r4, r1
 80007d0:	428c      	cmp	r4, r1
 80007d2:	41bf      	sbcs	r7, r7
 80007d4:	427f      	negs	r7, r7
 80007d6:	464e      	mov	r6, r9
 80007d8:	4447      	add	r7, r8
 80007da:	e7a6      	b.n	800072a <__aeabi_dadd+0x27e>
 80007dc:	4642      	mov	r2, r8
 80007de:	430a      	orrs	r2, r1
 80007e0:	0011      	movs	r1, r2
 80007e2:	1e4a      	subs	r2, r1, #1
 80007e4:	4191      	sbcs	r1, r2
 80007e6:	e6ad      	b.n	8000544 <__aeabi_dadd+0x98>
 80007e8:	4c0c      	ldr	r4, [pc, #48]	; (800081c <__aeabi_dadd+0x370>)
 80007ea:	1c72      	adds	r2, r6, #1
 80007ec:	4222      	tst	r2, r4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x346>
 80007f0:	e0a1      	b.n	8000936 <__aeabi_dadd+0x48a>
 80007f2:	0002      	movs	r2, r0
 80007f4:	431a      	orrs	r2, r3
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d000      	beq.n	80007fc <__aeabi_dadd+0x350>
 80007fa:	e0fa      	b.n	80009f2 <__aeabi_dadd+0x546>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x356>
 8000800:	e145      	b.n	8000a8e <__aeabi_dadd+0x5e2>
 8000802:	003a      	movs	r2, r7
 8000804:	430a      	orrs	r2, r1
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x35e>
 8000808:	e146      	b.n	8000a98 <__aeabi_dadd+0x5ec>
 800080a:	0742      	lsls	r2, r0, #29
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	4313      	orrs	r3, r2
 8000810:	08c0      	lsrs	r0, r0, #3
 8000812:	e77b      	b.n	800070c <__aeabi_dadd+0x260>
 8000814:	000007ff 	.word	0x000007ff
 8000818:	ff7fffff 	.word	0xff7fffff
 800081c:	000007fe 	.word	0x000007fe
 8000820:	4647      	mov	r7, r8
 8000822:	1a5c      	subs	r4, r3, r1
 8000824:	1bc2      	subs	r2, r0, r7
 8000826:	42a3      	cmp	r3, r4
 8000828:	41bf      	sbcs	r7, r7
 800082a:	427f      	negs	r7, r7
 800082c:	46b9      	mov	r9, r7
 800082e:	0017      	movs	r7, r2
 8000830:	464a      	mov	r2, r9
 8000832:	1abf      	subs	r7, r7, r2
 8000834:	023a      	lsls	r2, r7, #8
 8000836:	d500      	bpl.n	800083a <__aeabi_dadd+0x38e>
 8000838:	e08d      	b.n	8000956 <__aeabi_dadd+0x4aa>
 800083a:	0023      	movs	r3, r4
 800083c:	433b      	orrs	r3, r7
 800083e:	d000      	beq.n	8000842 <__aeabi_dadd+0x396>
 8000840:	e68a      	b.n	8000558 <__aeabi_dadd+0xac>
 8000842:	2000      	movs	r0, #0
 8000844:	2500      	movs	r5, #0
 8000846:	e761      	b.n	800070c <__aeabi_dadd+0x260>
 8000848:	4cb4      	ldr	r4, [pc, #720]	; (8000b1c <__aeabi_dadd+0x670>)
 800084a:	45a1      	cmp	r9, r4
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x3a4>
 800084e:	e0ad      	b.n	80009ac <__aeabi_dadd+0x500>
 8000850:	2480      	movs	r4, #128	; 0x80
 8000852:	0424      	lsls	r4, r4, #16
 8000854:	4320      	orrs	r0, r4
 8000856:	4664      	mov	r4, ip
 8000858:	2c38      	cmp	r4, #56	; 0x38
 800085a:	dc3d      	bgt.n	80008d8 <__aeabi_dadd+0x42c>
 800085c:	4662      	mov	r2, ip
 800085e:	2c1f      	cmp	r4, #31
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x3b8>
 8000862:	e0b7      	b.n	80009d4 <__aeabi_dadd+0x528>
 8000864:	2520      	movs	r5, #32
 8000866:	001e      	movs	r6, r3
 8000868:	1b2d      	subs	r5, r5, r4
 800086a:	0004      	movs	r4, r0
 800086c:	40ab      	lsls	r3, r5
 800086e:	40ac      	lsls	r4, r5
 8000870:	40d6      	lsrs	r6, r2
 8000872:	40d0      	lsrs	r0, r2
 8000874:	4642      	mov	r2, r8
 8000876:	1e5d      	subs	r5, r3, #1
 8000878:	41ab      	sbcs	r3, r5
 800087a:	4334      	orrs	r4, r6
 800087c:	1a12      	subs	r2, r2, r0
 800087e:	4690      	mov	r8, r2
 8000880:	4323      	orrs	r3, r4
 8000882:	e02c      	b.n	80008de <__aeabi_dadd+0x432>
 8000884:	0742      	lsls	r2, r0, #29
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	4313      	orrs	r3, r2
 800088a:	08c0      	lsrs	r0, r0, #3
 800088c:	e73b      	b.n	8000706 <__aeabi_dadd+0x25a>
 800088e:	185c      	adds	r4, r3, r1
 8000890:	429c      	cmp	r4, r3
 8000892:	419b      	sbcs	r3, r3
 8000894:	4440      	add	r0, r8
 8000896:	425b      	negs	r3, r3
 8000898:	18c7      	adds	r7, r0, r3
 800089a:	2601      	movs	r6, #1
 800089c:	023b      	lsls	r3, r7, #8
 800089e:	d400      	bmi.n	80008a2 <__aeabi_dadd+0x3f6>
 80008a0:	e729      	b.n	80006f6 <__aeabi_dadd+0x24a>
 80008a2:	2602      	movs	r6, #2
 80008a4:	4a9e      	ldr	r2, [pc, #632]	; (8000b20 <__aeabi_dadd+0x674>)
 80008a6:	0863      	lsrs	r3, r4, #1
 80008a8:	4017      	ands	r7, r2
 80008aa:	2201      	movs	r2, #1
 80008ac:	4014      	ands	r4, r2
 80008ae:	431c      	orrs	r4, r3
 80008b0:	07fb      	lsls	r3, r7, #31
 80008b2:	431c      	orrs	r4, r3
 80008b4:	087f      	lsrs	r7, r7, #1
 80008b6:	e673      	b.n	80005a0 <__aeabi_dadd+0xf4>
 80008b8:	4644      	mov	r4, r8
 80008ba:	3a20      	subs	r2, #32
 80008bc:	40d4      	lsrs	r4, r2
 80008be:	4662      	mov	r2, ip
 80008c0:	2a20      	cmp	r2, #32
 80008c2:	d005      	beq.n	80008d0 <__aeabi_dadd+0x424>
 80008c4:	4667      	mov	r7, ip
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	1bd2      	subs	r2, r2, r7
 80008ca:	4647      	mov	r7, r8
 80008cc:	4097      	lsls	r7, r2
 80008ce:	4339      	orrs	r1, r7
 80008d0:	1e4a      	subs	r2, r1, #1
 80008d2:	4191      	sbcs	r1, r2
 80008d4:	4321      	orrs	r1, r4
 80008d6:	e635      	b.n	8000544 <__aeabi_dadd+0x98>
 80008d8:	4303      	orrs	r3, r0
 80008da:	1e58      	subs	r0, r3, #1
 80008dc:	4183      	sbcs	r3, r0
 80008de:	1acc      	subs	r4, r1, r3
 80008e0:	42a1      	cmp	r1, r4
 80008e2:	41bf      	sbcs	r7, r7
 80008e4:	4643      	mov	r3, r8
 80008e6:	427f      	negs	r7, r7
 80008e8:	4655      	mov	r5, sl
 80008ea:	464e      	mov	r6, r9
 80008ec:	1bdf      	subs	r7, r3, r7
 80008ee:	e62e      	b.n	800054e <__aeabi_dadd+0xa2>
 80008f0:	0002      	movs	r2, r0
 80008f2:	431a      	orrs	r2, r3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x44c>
 80008f6:	e0bd      	b.n	8000a74 <__aeabi_dadd+0x5c8>
 80008f8:	4662      	mov	r2, ip
 80008fa:	4664      	mov	r4, ip
 80008fc:	3a01      	subs	r2, #1
 80008fe:	2c01      	cmp	r4, #1
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x458>
 8000902:	e0e5      	b.n	8000ad0 <__aeabi_dadd+0x624>
 8000904:	4c85      	ldr	r4, [pc, #532]	; (8000b1c <__aeabi_dadd+0x670>)
 8000906:	45a4      	cmp	ip, r4
 8000908:	d058      	beq.n	80009bc <__aeabi_dadd+0x510>
 800090a:	4694      	mov	ip, r2
 800090c:	e749      	b.n	80007a2 <__aeabi_dadd+0x2f6>
 800090e:	4664      	mov	r4, ip
 8000910:	2220      	movs	r2, #32
 8000912:	1b12      	subs	r2, r2, r4
 8000914:	4644      	mov	r4, r8
 8000916:	4094      	lsls	r4, r2
 8000918:	000f      	movs	r7, r1
 800091a:	46a1      	mov	r9, r4
 800091c:	4664      	mov	r4, ip
 800091e:	4091      	lsls	r1, r2
 8000920:	40e7      	lsrs	r7, r4
 8000922:	464c      	mov	r4, r9
 8000924:	1e4a      	subs	r2, r1, #1
 8000926:	4191      	sbcs	r1, r2
 8000928:	433c      	orrs	r4, r7
 800092a:	4642      	mov	r2, r8
 800092c:	430c      	orrs	r4, r1
 800092e:	4661      	mov	r1, ip
 8000930:	40ca      	lsrs	r2, r1
 8000932:	1880      	adds	r0, r0, r2
 8000934:	e6f4      	b.n	8000720 <__aeabi_dadd+0x274>
 8000936:	4c79      	ldr	r4, [pc, #484]	; (8000b1c <__aeabi_dadd+0x670>)
 8000938:	42a2      	cmp	r2, r4
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x492>
 800093c:	e6fd      	b.n	800073a <__aeabi_dadd+0x28e>
 800093e:	1859      	adds	r1, r3, r1
 8000940:	4299      	cmp	r1, r3
 8000942:	419b      	sbcs	r3, r3
 8000944:	4440      	add	r0, r8
 8000946:	425f      	negs	r7, r3
 8000948:	19c7      	adds	r7, r0, r7
 800094a:	07fc      	lsls	r4, r7, #31
 800094c:	0849      	lsrs	r1, r1, #1
 800094e:	0016      	movs	r6, r2
 8000950:	430c      	orrs	r4, r1
 8000952:	087f      	lsrs	r7, r7, #1
 8000954:	e6cf      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000956:	1acc      	subs	r4, r1, r3
 8000958:	42a1      	cmp	r1, r4
 800095a:	41bf      	sbcs	r7, r7
 800095c:	4643      	mov	r3, r8
 800095e:	427f      	negs	r7, r7
 8000960:	1a18      	subs	r0, r3, r0
 8000962:	4655      	mov	r5, sl
 8000964:	1bc7      	subs	r7, r0, r7
 8000966:	e5f7      	b.n	8000558 <__aeabi_dadd+0xac>
 8000968:	08c9      	lsrs	r1, r1, #3
 800096a:	077b      	lsls	r3, r7, #29
 800096c:	4655      	mov	r5, sl
 800096e:	430b      	orrs	r3, r1
 8000970:	08f8      	lsrs	r0, r7, #3
 8000972:	e6c8      	b.n	8000706 <__aeabi_dadd+0x25a>
 8000974:	2c00      	cmp	r4, #0
 8000976:	d000      	beq.n	800097a <__aeabi_dadd+0x4ce>
 8000978:	e081      	b.n	8000a7e <__aeabi_dadd+0x5d2>
 800097a:	4643      	mov	r3, r8
 800097c:	430b      	orrs	r3, r1
 800097e:	d115      	bne.n	80009ac <__aeabi_dadd+0x500>
 8000980:	2080      	movs	r0, #128	; 0x80
 8000982:	2500      	movs	r5, #0
 8000984:	0300      	lsls	r0, r0, #12
 8000986:	e6e3      	b.n	8000750 <__aeabi_dadd+0x2a4>
 8000988:	1a5c      	subs	r4, r3, r1
 800098a:	42a3      	cmp	r3, r4
 800098c:	419b      	sbcs	r3, r3
 800098e:	1bc7      	subs	r7, r0, r7
 8000990:	425b      	negs	r3, r3
 8000992:	2601      	movs	r6, #1
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	e5da      	b.n	800054e <__aeabi_dadd+0xa2>
 8000998:	0742      	lsls	r2, r0, #29
 800099a:	08db      	lsrs	r3, r3, #3
 800099c:	4313      	orrs	r3, r2
 800099e:	08c0      	lsrs	r0, r0, #3
 80009a0:	e6d2      	b.n	8000748 <__aeabi_dadd+0x29c>
 80009a2:	0742      	lsls	r2, r0, #29
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	08c0      	lsrs	r0, r0, #3
 80009aa:	e6ac      	b.n	8000706 <__aeabi_dadd+0x25a>
 80009ac:	4643      	mov	r3, r8
 80009ae:	4642      	mov	r2, r8
 80009b0:	08c9      	lsrs	r1, r1, #3
 80009b2:	075b      	lsls	r3, r3, #29
 80009b4:	4655      	mov	r5, sl
 80009b6:	430b      	orrs	r3, r1
 80009b8:	08d0      	lsrs	r0, r2, #3
 80009ba:	e6c5      	b.n	8000748 <__aeabi_dadd+0x29c>
 80009bc:	4643      	mov	r3, r8
 80009be:	4642      	mov	r2, r8
 80009c0:	075b      	lsls	r3, r3, #29
 80009c2:	08c9      	lsrs	r1, r1, #3
 80009c4:	430b      	orrs	r3, r1
 80009c6:	08d0      	lsrs	r0, r2, #3
 80009c8:	e6be      	b.n	8000748 <__aeabi_dadd+0x29c>
 80009ca:	4303      	orrs	r3, r0
 80009cc:	001c      	movs	r4, r3
 80009ce:	1e63      	subs	r3, r4, #1
 80009d0:	419c      	sbcs	r4, r3
 80009d2:	e6fc      	b.n	80007ce <__aeabi_dadd+0x322>
 80009d4:	0002      	movs	r2, r0
 80009d6:	3c20      	subs	r4, #32
 80009d8:	40e2      	lsrs	r2, r4
 80009da:	0014      	movs	r4, r2
 80009dc:	4662      	mov	r2, ip
 80009de:	2a20      	cmp	r2, #32
 80009e0:	d003      	beq.n	80009ea <__aeabi_dadd+0x53e>
 80009e2:	2540      	movs	r5, #64	; 0x40
 80009e4:	1aad      	subs	r5, r5, r2
 80009e6:	40a8      	lsls	r0, r5
 80009e8:	4303      	orrs	r3, r0
 80009ea:	1e58      	subs	r0, r3, #1
 80009ec:	4183      	sbcs	r3, r0
 80009ee:	4323      	orrs	r3, r4
 80009f0:	e775      	b.n	80008de <__aeabi_dadd+0x432>
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d0e2      	beq.n	80009bc <__aeabi_dadd+0x510>
 80009f6:	003a      	movs	r2, r7
 80009f8:	430a      	orrs	r2, r1
 80009fa:	d0cd      	beq.n	8000998 <__aeabi_dadd+0x4ec>
 80009fc:	0742      	lsls	r2, r0, #29
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	08c0      	lsrs	r0, r0, #3
 8000a06:	0312      	lsls	r2, r2, #12
 8000a08:	4210      	tst	r0, r2
 8000a0a:	d006      	beq.n	8000a1a <__aeabi_dadd+0x56e>
 8000a0c:	08fc      	lsrs	r4, r7, #3
 8000a0e:	4214      	tst	r4, r2
 8000a10:	d103      	bne.n	8000a1a <__aeabi_dadd+0x56e>
 8000a12:	0020      	movs	r0, r4
 8000a14:	08cb      	lsrs	r3, r1, #3
 8000a16:	077a      	lsls	r2, r7, #29
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	0f5a      	lsrs	r2, r3, #29
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	0752      	lsls	r2, r2, #29
 8000a20:	08db      	lsrs	r3, r3, #3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	e690      	b.n	8000748 <__aeabi_dadd+0x29c>
 8000a26:	4643      	mov	r3, r8
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x582>
 8000a2c:	e709      	b.n	8000842 <__aeabi_dadd+0x396>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	4642      	mov	r2, r8
 8000a32:	08c9      	lsrs	r1, r1, #3
 8000a34:	075b      	lsls	r3, r3, #29
 8000a36:	4655      	mov	r5, sl
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	08d0      	lsrs	r0, r2, #3
 8000a3c:	e666      	b.n	800070c <__aeabi_dadd+0x260>
 8000a3e:	1acc      	subs	r4, r1, r3
 8000a40:	42a1      	cmp	r1, r4
 8000a42:	4189      	sbcs	r1, r1
 8000a44:	1a3f      	subs	r7, r7, r0
 8000a46:	4249      	negs	r1, r1
 8000a48:	4655      	mov	r5, sl
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	1a7f      	subs	r7, r7, r1
 8000a4e:	e57e      	b.n	800054e <__aeabi_dadd+0xa2>
 8000a50:	4642      	mov	r2, r8
 8000a52:	1a5c      	subs	r4, r3, r1
 8000a54:	1a87      	subs	r7, r0, r2
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	4192      	sbcs	r2, r2
 8000a5a:	4252      	negs	r2, r2
 8000a5c:	1abf      	subs	r7, r7, r2
 8000a5e:	023a      	lsls	r2, r7, #8
 8000a60:	d53d      	bpl.n	8000ade <__aeabi_dadd+0x632>
 8000a62:	1acc      	subs	r4, r1, r3
 8000a64:	42a1      	cmp	r1, r4
 8000a66:	4189      	sbcs	r1, r1
 8000a68:	4643      	mov	r3, r8
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	1a1f      	subs	r7, r3, r0
 8000a6e:	4655      	mov	r5, sl
 8000a70:	1a7f      	subs	r7, r7, r1
 8000a72:	e595      	b.n	80005a0 <__aeabi_dadd+0xf4>
 8000a74:	077b      	lsls	r3, r7, #29
 8000a76:	08c9      	lsrs	r1, r1, #3
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	08f8      	lsrs	r0, r7, #3
 8000a7c:	e643      	b.n	8000706 <__aeabi_dadd+0x25a>
 8000a7e:	4644      	mov	r4, r8
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	430c      	orrs	r4, r1
 8000a84:	d130      	bne.n	8000ae8 <__aeabi_dadd+0x63c>
 8000a86:	0742      	lsls	r2, r0, #29
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	08c0      	lsrs	r0, r0, #3
 8000a8c:	e65c      	b.n	8000748 <__aeabi_dadd+0x29c>
 8000a8e:	077b      	lsls	r3, r7, #29
 8000a90:	08c9      	lsrs	r1, r1, #3
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08f8      	lsrs	r0, r7, #3
 8000a96:	e639      	b.n	800070c <__aeabi_dadd+0x260>
 8000a98:	185c      	adds	r4, r3, r1
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	419b      	sbcs	r3, r3
 8000a9e:	4440      	add	r0, r8
 8000aa0:	425b      	negs	r3, r3
 8000aa2:	18c7      	adds	r7, r0, r3
 8000aa4:	023b      	lsls	r3, r7, #8
 8000aa6:	d400      	bmi.n	8000aaa <__aeabi_dadd+0x5fe>
 8000aa8:	e625      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <__aeabi_dadd+0x674>)
 8000aac:	2601      	movs	r6, #1
 8000aae:	401f      	ands	r7, r3
 8000ab0:	e621      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000ab2:	0004      	movs	r4, r0
 8000ab4:	3a20      	subs	r2, #32
 8000ab6:	40d4      	lsrs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d004      	beq.n	8000ac8 <__aeabi_dadd+0x61c>
 8000abe:	2240      	movs	r2, #64	; 0x40
 8000ac0:	4666      	mov	r6, ip
 8000ac2:	1b92      	subs	r2, r2, r6
 8000ac4:	4090      	lsls	r0, r2
 8000ac6:	4303      	orrs	r3, r0
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	4193      	sbcs	r3, r2
 8000acc:	431c      	orrs	r4, r3
 8000ace:	e67e      	b.n	80007ce <__aeabi_dadd+0x322>
 8000ad0:	185c      	adds	r4, r3, r1
 8000ad2:	428c      	cmp	r4, r1
 8000ad4:	4189      	sbcs	r1, r1
 8000ad6:	4440      	add	r0, r8
 8000ad8:	4249      	negs	r1, r1
 8000ada:	1847      	adds	r7, r0, r1
 8000adc:	e6dd      	b.n	800089a <__aeabi_dadd+0x3ee>
 8000ade:	0023      	movs	r3, r4
 8000ae0:	433b      	orrs	r3, r7
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dadd+0x63a>
 8000ae4:	e6ad      	b.n	8000842 <__aeabi_dadd+0x396>
 8000ae6:	e606      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000ae8:	0744      	lsls	r4, r0, #29
 8000aea:	4323      	orrs	r3, r4
 8000aec:	2480      	movs	r4, #128	; 0x80
 8000aee:	08c0      	lsrs	r0, r0, #3
 8000af0:	0324      	lsls	r4, r4, #12
 8000af2:	4220      	tst	r0, r4
 8000af4:	d008      	beq.n	8000b08 <__aeabi_dadd+0x65c>
 8000af6:	4642      	mov	r2, r8
 8000af8:	08d6      	lsrs	r6, r2, #3
 8000afa:	4226      	tst	r6, r4
 8000afc:	d104      	bne.n	8000b08 <__aeabi_dadd+0x65c>
 8000afe:	4655      	mov	r5, sl
 8000b00:	0030      	movs	r0, r6
 8000b02:	08cb      	lsrs	r3, r1, #3
 8000b04:	0751      	lsls	r1, r2, #29
 8000b06:	430b      	orrs	r3, r1
 8000b08:	0f5a      	lsrs	r2, r3, #29
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	0752      	lsls	r2, r2, #29
 8000b10:	4313      	orrs	r3, r2
 8000b12:	e619      	b.n	8000748 <__aeabi_dadd+0x29c>
 8000b14:	2300      	movs	r3, #0
 8000b16:	4a01      	ldr	r2, [pc, #4]	; (8000b1c <__aeabi_dadd+0x670>)
 8000b18:	001f      	movs	r7, r3
 8000b1a:	e55e      	b.n	80005da <__aeabi_dadd+0x12e>
 8000b1c:	000007ff 	.word	0x000007ff
 8000b20:	ff7fffff 	.word	0xff7fffff

08000b24 <__aeabi_ddiv>:
 8000b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b26:	4657      	mov	r7, sl
 8000b28:	464e      	mov	r6, r9
 8000b2a:	4645      	mov	r5, r8
 8000b2c:	46de      	mov	lr, fp
 8000b2e:	b5e0      	push	{r5, r6, r7, lr}
 8000b30:	4681      	mov	r9, r0
 8000b32:	0005      	movs	r5, r0
 8000b34:	030c      	lsls	r4, r1, #12
 8000b36:	0048      	lsls	r0, r1, #1
 8000b38:	4692      	mov	sl, r2
 8000b3a:	001f      	movs	r7, r3
 8000b3c:	b085      	sub	sp, #20
 8000b3e:	0b24      	lsrs	r4, r4, #12
 8000b40:	0d40      	lsrs	r0, r0, #21
 8000b42:	0fce      	lsrs	r6, r1, #31
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_ddiv+0x26>
 8000b48:	e156      	b.n	8000df8 <__aeabi_ddiv+0x2d4>
 8000b4a:	4bd4      	ldr	r3, [pc, #848]	; (8000e9c <__aeabi_ddiv+0x378>)
 8000b4c:	4298      	cmp	r0, r3
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_ddiv+0x2e>
 8000b50:	e172      	b.n	8000e38 <__aeabi_ddiv+0x314>
 8000b52:	0f6b      	lsrs	r3, r5, #29
 8000b54:	00e4      	lsls	r4, r4, #3
 8000b56:	431c      	orrs	r4, r3
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	041b      	lsls	r3, r3, #16
 8000b5c:	4323      	orrs	r3, r4
 8000b5e:	4698      	mov	r8, r3
 8000b60:	4bcf      	ldr	r3, [pc, #828]	; (8000ea0 <__aeabi_ddiv+0x37c>)
 8000b62:	00ed      	lsls	r5, r5, #3
 8000b64:	469b      	mov	fp, r3
 8000b66:	2300      	movs	r3, #0
 8000b68:	4699      	mov	r9, r3
 8000b6a:	4483      	add	fp, r0
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	033c      	lsls	r4, r7, #12
 8000b70:	007b      	lsls	r3, r7, #1
 8000b72:	4650      	mov	r0, sl
 8000b74:	0b24      	lsrs	r4, r4, #12
 8000b76:	0d5b      	lsrs	r3, r3, #21
 8000b78:	0fff      	lsrs	r7, r7, #31
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_ddiv+0x5c>
 8000b7e:	e11f      	b.n	8000dc0 <__aeabi_ddiv+0x29c>
 8000b80:	4ac6      	ldr	r2, [pc, #792]	; (8000e9c <__aeabi_ddiv+0x378>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d100      	bne.n	8000b88 <__aeabi_ddiv+0x64>
 8000b86:	e162      	b.n	8000e4e <__aeabi_ddiv+0x32a>
 8000b88:	49c5      	ldr	r1, [pc, #788]	; (8000ea0 <__aeabi_ddiv+0x37c>)
 8000b8a:	0f42      	lsrs	r2, r0, #29
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	00e4      	lsls	r4, r4, #3
 8000b90:	4659      	mov	r1, fp
 8000b92:	4314      	orrs	r4, r2
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	4463      	add	r3, ip
 8000b98:	0412      	lsls	r2, r2, #16
 8000b9a:	1acb      	subs	r3, r1, r3
 8000b9c:	4314      	orrs	r4, r2
 8000b9e:	469b      	mov	fp, r3
 8000ba0:	00c2      	lsls	r2, r0, #3
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	0033      	movs	r3, r6
 8000ba6:	407b      	eors	r3, r7
 8000ba8:	469a      	mov	sl, r3
 8000baa:	464b      	mov	r3, r9
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d827      	bhi.n	8000c00 <__aeabi_ddiv+0xdc>
 8000bb0:	49bc      	ldr	r1, [pc, #752]	; (8000ea4 <__aeabi_ddiv+0x380>)
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	58cb      	ldr	r3, [r1, r3]
 8000bb6:	469f      	mov	pc, r3
 8000bb8:	46b2      	mov	sl, r6
 8000bba:	9b00      	ldr	r3, [sp, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d016      	beq.n	8000bee <__aeabi_ddiv+0xca>
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_ddiv+0xa2>
 8000bc4:	e28e      	b.n	80010e4 <__aeabi_ddiv+0x5c0>
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_ddiv+0xa8>
 8000bca:	e0d9      	b.n	8000d80 <__aeabi_ddiv+0x25c>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2400      	movs	r4, #0
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	4652      	mov	r2, sl
 8000bd4:	051b      	lsls	r3, r3, #20
 8000bd6:	4323      	orrs	r3, r4
 8000bd8:	07d2      	lsls	r2, r2, #31
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	0028      	movs	r0, r5
 8000bde:	0019      	movs	r1, r3
 8000be0:	b005      	add	sp, #20
 8000be2:	bcf0      	pop	{r4, r5, r6, r7}
 8000be4:	46bb      	mov	fp, r7
 8000be6:	46b2      	mov	sl, r6
 8000be8:	46a9      	mov	r9, r5
 8000bea:	46a0      	mov	r8, r4
 8000bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bee:	2400      	movs	r4, #0
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	4baa      	ldr	r3, [pc, #680]	; (8000e9c <__aeabi_ddiv+0x378>)
 8000bf4:	e7ed      	b.n	8000bd2 <__aeabi_ddiv+0xae>
 8000bf6:	46ba      	mov	sl, r7
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	0015      	movs	r5, r2
 8000bfc:	9000      	str	r0, [sp, #0]
 8000bfe:	e7dc      	b.n	8000bba <__aeabi_ddiv+0x96>
 8000c00:	4544      	cmp	r4, r8
 8000c02:	d200      	bcs.n	8000c06 <__aeabi_ddiv+0xe2>
 8000c04:	e1c7      	b.n	8000f96 <__aeabi_ddiv+0x472>
 8000c06:	d100      	bne.n	8000c0a <__aeabi_ddiv+0xe6>
 8000c08:	e1c2      	b.n	8000f90 <__aeabi_ddiv+0x46c>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	469c      	mov	ip, r3
 8000c10:	002e      	movs	r6, r5
 8000c12:	4640      	mov	r0, r8
 8000c14:	2500      	movs	r5, #0
 8000c16:	44e3      	add	fp, ip
 8000c18:	0223      	lsls	r3, r4, #8
 8000c1a:	0e14      	lsrs	r4, r2, #24
 8000c1c:	431c      	orrs	r4, r3
 8000c1e:	0c1b      	lsrs	r3, r3, #16
 8000c20:	4699      	mov	r9, r3
 8000c22:	0423      	lsls	r3, r4, #16
 8000c24:	0c1f      	lsrs	r7, r3, #16
 8000c26:	0212      	lsls	r2, r2, #8
 8000c28:	4649      	mov	r1, r9
 8000c2a:	9200      	str	r2, [sp, #0]
 8000c2c:	9701      	str	r7, [sp, #4]
 8000c2e:	f7ff faf1 	bl	8000214 <__aeabi_uidivmod>
 8000c32:	0002      	movs	r2, r0
 8000c34:	437a      	muls	r2, r7
 8000c36:	040b      	lsls	r3, r1, #16
 8000c38:	0c31      	lsrs	r1, r6, #16
 8000c3a:	4680      	mov	r8, r0
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	428a      	cmp	r2, r1
 8000c40:	d907      	bls.n	8000c52 <__aeabi_ddiv+0x12e>
 8000c42:	2301      	movs	r3, #1
 8000c44:	425b      	negs	r3, r3
 8000c46:	469c      	mov	ip, r3
 8000c48:	1909      	adds	r1, r1, r4
 8000c4a:	44e0      	add	r8, ip
 8000c4c:	428c      	cmp	r4, r1
 8000c4e:	d800      	bhi.n	8000c52 <__aeabi_ddiv+0x12e>
 8000c50:	e207      	b.n	8001062 <__aeabi_ddiv+0x53e>
 8000c52:	1a88      	subs	r0, r1, r2
 8000c54:	4649      	mov	r1, r9
 8000c56:	f7ff fadd 	bl	8000214 <__aeabi_uidivmod>
 8000c5a:	0409      	lsls	r1, r1, #16
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	0431      	lsls	r1, r6, #16
 8000c60:	4666      	mov	r6, ip
 8000c62:	9a01      	ldr	r2, [sp, #4]
 8000c64:	0c09      	lsrs	r1, r1, #16
 8000c66:	4342      	muls	r2, r0
 8000c68:	0003      	movs	r3, r0
 8000c6a:	4331      	orrs	r1, r6
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	d904      	bls.n	8000c7a <__aeabi_ddiv+0x156>
 8000c70:	1909      	adds	r1, r1, r4
 8000c72:	3b01      	subs	r3, #1
 8000c74:	428c      	cmp	r4, r1
 8000c76:	d800      	bhi.n	8000c7a <__aeabi_ddiv+0x156>
 8000c78:	e1ed      	b.n	8001056 <__aeabi_ddiv+0x532>
 8000c7a:	1a88      	subs	r0, r1, r2
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	431a      	orrs	r2, r3
 8000c82:	4690      	mov	r8, r2
 8000c84:	4641      	mov	r1, r8
 8000c86:	9b00      	ldr	r3, [sp, #0]
 8000c88:	040e      	lsls	r6, r1, #16
 8000c8a:	0c1b      	lsrs	r3, r3, #16
 8000c8c:	001f      	movs	r7, r3
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	9b00      	ldr	r3, [sp, #0]
 8000c92:	0c36      	lsrs	r6, r6, #16
 8000c94:	041b      	lsls	r3, r3, #16
 8000c96:	0c19      	lsrs	r1, r3, #16
 8000c98:	000b      	movs	r3, r1
 8000c9a:	4373      	muls	r3, r6
 8000c9c:	0c12      	lsrs	r2, r2, #16
 8000c9e:	437e      	muls	r6, r7
 8000ca0:	9103      	str	r1, [sp, #12]
 8000ca2:	4351      	muls	r1, r2
 8000ca4:	437a      	muls	r2, r7
 8000ca6:	0c1f      	lsrs	r7, r3, #16
 8000ca8:	46bc      	mov	ip, r7
 8000caa:	1876      	adds	r6, r6, r1
 8000cac:	4466      	add	r6, ip
 8000cae:	42b1      	cmp	r1, r6
 8000cb0:	d903      	bls.n	8000cba <__aeabi_ddiv+0x196>
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	0249      	lsls	r1, r1, #9
 8000cb6:	468c      	mov	ip, r1
 8000cb8:	4462      	add	r2, ip
 8000cba:	0c31      	lsrs	r1, r6, #16
 8000cbc:	188a      	adds	r2, r1, r2
 8000cbe:	0431      	lsls	r1, r6, #16
 8000cc0:	041e      	lsls	r6, r3, #16
 8000cc2:	0c36      	lsrs	r6, r6, #16
 8000cc4:	198e      	adds	r6, r1, r6
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	d302      	bcc.n	8000cd0 <__aeabi_ddiv+0x1ac>
 8000cca:	d112      	bne.n	8000cf2 <__aeabi_ddiv+0x1ce>
 8000ccc:	42b5      	cmp	r5, r6
 8000cce:	d210      	bcs.n	8000cf2 <__aeabi_ddiv+0x1ce>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	1e59      	subs	r1, r3, #1
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	4465      	add	r5, ip
 8000cda:	001f      	movs	r7, r3
 8000cdc:	429d      	cmp	r5, r3
 8000cde:	419b      	sbcs	r3, r3
 8000ce0:	425b      	negs	r3, r3
 8000ce2:	191b      	adds	r3, r3, r4
 8000ce4:	18c0      	adds	r0, r0, r3
 8000ce6:	4284      	cmp	r4, r0
 8000ce8:	d200      	bcs.n	8000cec <__aeabi_ddiv+0x1c8>
 8000cea:	e1a0      	b.n	800102e <__aeabi_ddiv+0x50a>
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_ddiv+0x1cc>
 8000cee:	e19b      	b.n	8001028 <__aeabi_ddiv+0x504>
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	1bae      	subs	r6, r5, r6
 8000cf4:	42b5      	cmp	r5, r6
 8000cf6:	41ad      	sbcs	r5, r5
 8000cf8:	1a80      	subs	r0, r0, r2
 8000cfa:	426d      	negs	r5, r5
 8000cfc:	1b40      	subs	r0, r0, r5
 8000cfe:	4284      	cmp	r4, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_ddiv+0x1e0>
 8000d02:	e1d5      	b.n	80010b0 <__aeabi_ddiv+0x58c>
 8000d04:	4649      	mov	r1, r9
 8000d06:	f7ff fa85 	bl	8000214 <__aeabi_uidivmod>
 8000d0a:	9a01      	ldr	r2, [sp, #4]
 8000d0c:	040b      	lsls	r3, r1, #16
 8000d0e:	4342      	muls	r2, r0
 8000d10:	0c31      	lsrs	r1, r6, #16
 8000d12:	0005      	movs	r5, r0
 8000d14:	4319      	orrs	r1, r3
 8000d16:	428a      	cmp	r2, r1
 8000d18:	d900      	bls.n	8000d1c <__aeabi_ddiv+0x1f8>
 8000d1a:	e16c      	b.n	8000ff6 <__aeabi_ddiv+0x4d2>
 8000d1c:	1a88      	subs	r0, r1, r2
 8000d1e:	4649      	mov	r1, r9
 8000d20:	f7ff fa78 	bl	8000214 <__aeabi_uidivmod>
 8000d24:	9a01      	ldr	r2, [sp, #4]
 8000d26:	0436      	lsls	r6, r6, #16
 8000d28:	4342      	muls	r2, r0
 8000d2a:	0409      	lsls	r1, r1, #16
 8000d2c:	0c36      	lsrs	r6, r6, #16
 8000d2e:	0003      	movs	r3, r0
 8000d30:	430e      	orrs	r6, r1
 8000d32:	42b2      	cmp	r2, r6
 8000d34:	d900      	bls.n	8000d38 <__aeabi_ddiv+0x214>
 8000d36:	e153      	b.n	8000fe0 <__aeabi_ddiv+0x4bc>
 8000d38:	9803      	ldr	r0, [sp, #12]
 8000d3a:	1ab6      	subs	r6, r6, r2
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	042d      	lsls	r5, r5, #16
 8000d40:	431d      	orrs	r5, r3
 8000d42:	9f02      	ldr	r7, [sp, #8]
 8000d44:	042b      	lsls	r3, r5, #16
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	435a      	muls	r2, r3
 8000d4a:	437b      	muls	r3, r7
 8000d4c:	469c      	mov	ip, r3
 8000d4e:	0c29      	lsrs	r1, r5, #16
 8000d50:	4348      	muls	r0, r1
 8000d52:	0c13      	lsrs	r3, r2, #16
 8000d54:	4484      	add	ip, r0
 8000d56:	4463      	add	r3, ip
 8000d58:	4379      	muls	r1, r7
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	d903      	bls.n	8000d66 <__aeabi_ddiv+0x242>
 8000d5e:	2080      	movs	r0, #128	; 0x80
 8000d60:	0240      	lsls	r0, r0, #9
 8000d62:	4684      	mov	ip, r0
 8000d64:	4461      	add	r1, ip
 8000d66:	0c18      	lsrs	r0, r3, #16
 8000d68:	0412      	lsls	r2, r2, #16
 8000d6a:	041b      	lsls	r3, r3, #16
 8000d6c:	0c12      	lsrs	r2, r2, #16
 8000d6e:	1841      	adds	r1, r0, r1
 8000d70:	189b      	adds	r3, r3, r2
 8000d72:	428e      	cmp	r6, r1
 8000d74:	d200      	bcs.n	8000d78 <__aeabi_ddiv+0x254>
 8000d76:	e0ff      	b.n	8000f78 <__aeabi_ddiv+0x454>
 8000d78:	d100      	bne.n	8000d7c <__aeabi_ddiv+0x258>
 8000d7a:	e0fa      	b.n	8000f72 <__aeabi_ddiv+0x44e>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	431d      	orrs	r5, r3
 8000d80:	4a49      	ldr	r2, [pc, #292]	; (8000ea8 <__aeabi_ddiv+0x384>)
 8000d82:	445a      	add	r2, fp
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	dc00      	bgt.n	8000d8a <__aeabi_ddiv+0x266>
 8000d88:	e0aa      	b.n	8000ee0 <__aeabi_ddiv+0x3bc>
 8000d8a:	076b      	lsls	r3, r5, #29
 8000d8c:	d000      	beq.n	8000d90 <__aeabi_ddiv+0x26c>
 8000d8e:	e13d      	b.n	800100c <__aeabi_ddiv+0x4e8>
 8000d90:	08ed      	lsrs	r5, r5, #3
 8000d92:	4643      	mov	r3, r8
 8000d94:	01db      	lsls	r3, r3, #7
 8000d96:	d506      	bpl.n	8000da6 <__aeabi_ddiv+0x282>
 8000d98:	4642      	mov	r2, r8
 8000d9a:	4b44      	ldr	r3, [pc, #272]	; (8000eac <__aeabi_ddiv+0x388>)
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4690      	mov	r8, r2
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	00d2      	lsls	r2, r2, #3
 8000da4:	445a      	add	r2, fp
 8000da6:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <__aeabi_ddiv+0x38c>)
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dd00      	ble.n	8000dae <__aeabi_ddiv+0x28a>
 8000dac:	e71f      	b.n	8000bee <__aeabi_ddiv+0xca>
 8000dae:	4643      	mov	r3, r8
 8000db0:	075b      	lsls	r3, r3, #29
 8000db2:	431d      	orrs	r5, r3
 8000db4:	4643      	mov	r3, r8
 8000db6:	0552      	lsls	r2, r2, #21
 8000db8:	025c      	lsls	r4, r3, #9
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	0d53      	lsrs	r3, r2, #21
 8000dbe:	e708      	b.n	8000bd2 <__aeabi_ddiv+0xae>
 8000dc0:	4652      	mov	r2, sl
 8000dc2:	4322      	orrs	r2, r4
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_ddiv+0x2a4>
 8000dc6:	e07b      	b.n	8000ec0 <__aeabi_ddiv+0x39c>
 8000dc8:	2c00      	cmp	r4, #0
 8000dca:	d100      	bne.n	8000dce <__aeabi_ddiv+0x2aa>
 8000dcc:	e0fa      	b.n	8000fc4 <__aeabi_ddiv+0x4a0>
 8000dce:	0020      	movs	r0, r4
 8000dd0:	f001 f934 	bl	800203c <__clzsi2>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	3a0b      	subs	r2, #11
 8000dd8:	231d      	movs	r3, #29
 8000dda:	0001      	movs	r1, r0
 8000ddc:	1a9b      	subs	r3, r3, r2
 8000dde:	4652      	mov	r2, sl
 8000de0:	3908      	subs	r1, #8
 8000de2:	40da      	lsrs	r2, r3
 8000de4:	408c      	lsls	r4, r1
 8000de6:	4314      	orrs	r4, r2
 8000de8:	4652      	mov	r2, sl
 8000dea:	408a      	lsls	r2, r1
 8000dec:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <__aeabi_ddiv+0x390>)
 8000dee:	4458      	add	r0, fp
 8000df0:	469b      	mov	fp, r3
 8000df2:	4483      	add	fp, r0
 8000df4:	2000      	movs	r0, #0
 8000df6:	e6d5      	b.n	8000ba4 <__aeabi_ddiv+0x80>
 8000df8:	464b      	mov	r3, r9
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	d044      	beq.n	8000e8a <__aeabi_ddiv+0x366>
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_ddiv+0x2e2>
 8000e04:	e0ce      	b.n	8000fa4 <__aeabi_ddiv+0x480>
 8000e06:	0020      	movs	r0, r4
 8000e08:	f001 f918 	bl	800203c <__clzsi2>
 8000e0c:	0001      	movs	r1, r0
 8000e0e:	0002      	movs	r2, r0
 8000e10:	390b      	subs	r1, #11
 8000e12:	231d      	movs	r3, #29
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	4649      	mov	r1, r9
 8000e18:	0010      	movs	r0, r2
 8000e1a:	40d9      	lsrs	r1, r3
 8000e1c:	3808      	subs	r0, #8
 8000e1e:	4084      	lsls	r4, r0
 8000e20:	000b      	movs	r3, r1
 8000e22:	464d      	mov	r5, r9
 8000e24:	4323      	orrs	r3, r4
 8000e26:	4698      	mov	r8, r3
 8000e28:	4085      	lsls	r5, r0
 8000e2a:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <__aeabi_ddiv+0x394>)
 8000e2c:	1a83      	subs	r3, r0, r2
 8000e2e:	469b      	mov	fp, r3
 8000e30:	2300      	movs	r3, #0
 8000e32:	4699      	mov	r9, r3
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	e69a      	b.n	8000b6e <__aeabi_ddiv+0x4a>
 8000e38:	464b      	mov	r3, r9
 8000e3a:	4323      	orrs	r3, r4
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	d11d      	bne.n	8000e7c <__aeabi_ddiv+0x358>
 8000e40:	2308      	movs	r3, #8
 8000e42:	4699      	mov	r9, r3
 8000e44:	3b06      	subs	r3, #6
 8000e46:	2500      	movs	r5, #0
 8000e48:	4683      	mov	fp, r0
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	e68f      	b.n	8000b6e <__aeabi_ddiv+0x4a>
 8000e4e:	4652      	mov	r2, sl
 8000e50:	4322      	orrs	r2, r4
 8000e52:	d109      	bne.n	8000e68 <__aeabi_ddiv+0x344>
 8000e54:	2302      	movs	r3, #2
 8000e56:	4649      	mov	r1, r9
 8000e58:	4319      	orrs	r1, r3
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <__aeabi_ddiv+0x398>)
 8000e5c:	4689      	mov	r9, r1
 8000e5e:	469c      	mov	ip, r3
 8000e60:	2400      	movs	r4, #0
 8000e62:	2002      	movs	r0, #2
 8000e64:	44e3      	add	fp, ip
 8000e66:	e69d      	b.n	8000ba4 <__aeabi_ddiv+0x80>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	464a      	mov	r2, r9
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <__aeabi_ddiv+0x398>)
 8000e70:	4691      	mov	r9, r2
 8000e72:	469c      	mov	ip, r3
 8000e74:	4652      	mov	r2, sl
 8000e76:	2003      	movs	r0, #3
 8000e78:	44e3      	add	fp, ip
 8000e7a:	e693      	b.n	8000ba4 <__aeabi_ddiv+0x80>
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	4699      	mov	r9, r3
 8000e80:	3b09      	subs	r3, #9
 8000e82:	46a0      	mov	r8, r4
 8000e84:	4683      	mov	fp, r0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e671      	b.n	8000b6e <__aeabi_ddiv+0x4a>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	4699      	mov	r9, r3
 8000e8e:	2300      	movs	r3, #0
 8000e90:	469b      	mov	fp, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	2500      	movs	r5, #0
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	e669      	b.n	8000b6e <__aeabi_ddiv+0x4a>
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	000007ff 	.word	0x000007ff
 8000ea0:	fffffc01 	.word	0xfffffc01
 8000ea4:	080058b0 	.word	0x080058b0
 8000ea8:	000003ff 	.word	0x000003ff
 8000eac:	feffffff 	.word	0xfeffffff
 8000eb0:	000007fe 	.word	0x000007fe
 8000eb4:	000003f3 	.word	0x000003f3
 8000eb8:	fffffc0d 	.word	0xfffffc0d
 8000ebc:	fffff801 	.word	0xfffff801
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	4319      	orrs	r1, r3
 8000ec6:	4689      	mov	r9, r1
 8000ec8:	2400      	movs	r4, #0
 8000eca:	2001      	movs	r0, #1
 8000ecc:	e66a      	b.n	8000ba4 <__aeabi_ddiv+0x80>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2480      	movs	r4, #128	; 0x80
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	4b8a      	ldr	r3, [pc, #552]	; (8001100 <__aeabi_ddiv+0x5dc>)
 8000ed8:	0324      	lsls	r4, r4, #12
 8000eda:	e67a      	b.n	8000bd2 <__aeabi_ddiv+0xae>
 8000edc:	2501      	movs	r5, #1
 8000ede:	426d      	negs	r5, r5
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	2b38      	cmp	r3, #56	; 0x38
 8000ee6:	dd00      	ble.n	8000eea <__aeabi_ddiv+0x3c6>
 8000ee8:	e670      	b.n	8000bcc <__aeabi_ddiv+0xa8>
 8000eea:	2b1f      	cmp	r3, #31
 8000eec:	dc00      	bgt.n	8000ef0 <__aeabi_ddiv+0x3cc>
 8000eee:	e0bf      	b.n	8001070 <__aeabi_ddiv+0x54c>
 8000ef0:	211f      	movs	r1, #31
 8000ef2:	4249      	negs	r1, r1
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	4641      	mov	r1, r8
 8000ef8:	40d1      	lsrs	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d004      	beq.n	8000f0a <__aeabi_ddiv+0x3e6>
 8000f00:	4641      	mov	r1, r8
 8000f02:	4b80      	ldr	r3, [pc, #512]	; (8001104 <__aeabi_ddiv+0x5e0>)
 8000f04:	445b      	add	r3, fp
 8000f06:	4099      	lsls	r1, r3
 8000f08:	430d      	orrs	r5, r1
 8000f0a:	1e6b      	subs	r3, r5, #1
 8000f0c:	419d      	sbcs	r5, r3
 8000f0e:	2307      	movs	r3, #7
 8000f10:	432a      	orrs	r2, r5
 8000f12:	001d      	movs	r5, r3
 8000f14:	2400      	movs	r4, #0
 8000f16:	4015      	ands	r5, r2
 8000f18:	4213      	tst	r3, r2
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0x3fa>
 8000f1c:	e0d4      	b.n	80010c8 <__aeabi_ddiv+0x5a4>
 8000f1e:	210f      	movs	r1, #15
 8000f20:	2300      	movs	r3, #0
 8000f22:	4011      	ands	r1, r2
 8000f24:	2904      	cmp	r1, #4
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x406>
 8000f28:	e0cb      	b.n	80010c2 <__aeabi_ddiv+0x59e>
 8000f2a:	1d11      	adds	r1, r2, #4
 8000f2c:	4291      	cmp	r1, r2
 8000f2e:	4192      	sbcs	r2, r2
 8000f30:	4252      	negs	r2, r2
 8000f32:	189b      	adds	r3, r3, r2
 8000f34:	000a      	movs	r2, r1
 8000f36:	0219      	lsls	r1, r3, #8
 8000f38:	d400      	bmi.n	8000f3c <__aeabi_ddiv+0x418>
 8000f3a:	e0c2      	b.n	80010c2 <__aeabi_ddiv+0x59e>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2400      	movs	r4, #0
 8000f40:	2500      	movs	r5, #0
 8000f42:	e646      	b.n	8000bd2 <__aeabi_ddiv+0xae>
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	4641      	mov	r1, r8
 8000f48:	031b      	lsls	r3, r3, #12
 8000f4a:	4219      	tst	r1, r3
 8000f4c:	d008      	beq.n	8000f60 <__aeabi_ddiv+0x43c>
 8000f4e:	421c      	tst	r4, r3
 8000f50:	d106      	bne.n	8000f60 <__aeabi_ddiv+0x43c>
 8000f52:	431c      	orrs	r4, r3
 8000f54:	0324      	lsls	r4, r4, #12
 8000f56:	46ba      	mov	sl, r7
 8000f58:	0015      	movs	r5, r2
 8000f5a:	4b69      	ldr	r3, [pc, #420]	; (8001100 <__aeabi_ddiv+0x5dc>)
 8000f5c:	0b24      	lsrs	r4, r4, #12
 8000f5e:	e638      	b.n	8000bd2 <__aeabi_ddiv+0xae>
 8000f60:	2480      	movs	r4, #128	; 0x80
 8000f62:	4643      	mov	r3, r8
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	431c      	orrs	r4, r3
 8000f68:	0324      	lsls	r4, r4, #12
 8000f6a:	46b2      	mov	sl, r6
 8000f6c:	4b64      	ldr	r3, [pc, #400]	; (8001100 <__aeabi_ddiv+0x5dc>)
 8000f6e:	0b24      	lsrs	r4, r4, #12
 8000f70:	e62f      	b.n	8000bd2 <__aeabi_ddiv+0xae>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d100      	bne.n	8000f78 <__aeabi_ddiv+0x454>
 8000f76:	e703      	b.n	8000d80 <__aeabi_ddiv+0x25c>
 8000f78:	19a6      	adds	r6, r4, r6
 8000f7a:	1e68      	subs	r0, r5, #1
 8000f7c:	42a6      	cmp	r6, r4
 8000f7e:	d200      	bcs.n	8000f82 <__aeabi_ddiv+0x45e>
 8000f80:	e08d      	b.n	800109e <__aeabi_ddiv+0x57a>
 8000f82:	428e      	cmp	r6, r1
 8000f84:	d200      	bcs.n	8000f88 <__aeabi_ddiv+0x464>
 8000f86:	e0a3      	b.n	80010d0 <__aeabi_ddiv+0x5ac>
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x468>
 8000f8a:	e0b3      	b.n	80010f4 <__aeabi_ddiv+0x5d0>
 8000f8c:	0005      	movs	r5, r0
 8000f8e:	e6f5      	b.n	8000d7c <__aeabi_ddiv+0x258>
 8000f90:	42aa      	cmp	r2, r5
 8000f92:	d900      	bls.n	8000f96 <__aeabi_ddiv+0x472>
 8000f94:	e639      	b.n	8000c0a <__aeabi_ddiv+0xe6>
 8000f96:	4643      	mov	r3, r8
 8000f98:	07de      	lsls	r6, r3, #31
 8000f9a:	0858      	lsrs	r0, r3, #1
 8000f9c:	086b      	lsrs	r3, r5, #1
 8000f9e:	431e      	orrs	r6, r3
 8000fa0:	07ed      	lsls	r5, r5, #31
 8000fa2:	e639      	b.n	8000c18 <__aeabi_ddiv+0xf4>
 8000fa4:	4648      	mov	r0, r9
 8000fa6:	f001 f849 	bl	800203c <__clzsi2>
 8000faa:	0001      	movs	r1, r0
 8000fac:	0002      	movs	r2, r0
 8000fae:	3115      	adds	r1, #21
 8000fb0:	3220      	adds	r2, #32
 8000fb2:	291c      	cmp	r1, #28
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_ddiv+0x494>
 8000fb6:	e72c      	b.n	8000e12 <__aeabi_ddiv+0x2ee>
 8000fb8:	464b      	mov	r3, r9
 8000fba:	3808      	subs	r0, #8
 8000fbc:	4083      	lsls	r3, r0
 8000fbe:	2500      	movs	r5, #0
 8000fc0:	4698      	mov	r8, r3
 8000fc2:	e732      	b.n	8000e2a <__aeabi_ddiv+0x306>
 8000fc4:	f001 f83a 	bl	800203c <__clzsi2>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	001a      	movs	r2, r3
 8000fcc:	3215      	adds	r2, #21
 8000fce:	3020      	adds	r0, #32
 8000fd0:	2a1c      	cmp	r2, #28
 8000fd2:	dc00      	bgt.n	8000fd6 <__aeabi_ddiv+0x4b2>
 8000fd4:	e700      	b.n	8000dd8 <__aeabi_ddiv+0x2b4>
 8000fd6:	4654      	mov	r4, sl
 8000fd8:	3b08      	subs	r3, #8
 8000fda:	2200      	movs	r2, #0
 8000fdc:	409c      	lsls	r4, r3
 8000fde:	e705      	b.n	8000dec <__aeabi_ddiv+0x2c8>
 8000fe0:	1936      	adds	r6, r6, r4
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	42b4      	cmp	r4, r6
 8000fe6:	d900      	bls.n	8000fea <__aeabi_ddiv+0x4c6>
 8000fe8:	e6a6      	b.n	8000d38 <__aeabi_ddiv+0x214>
 8000fea:	42b2      	cmp	r2, r6
 8000fec:	d800      	bhi.n	8000ff0 <__aeabi_ddiv+0x4cc>
 8000fee:	e6a3      	b.n	8000d38 <__aeabi_ddiv+0x214>
 8000ff0:	1e83      	subs	r3, r0, #2
 8000ff2:	1936      	adds	r6, r6, r4
 8000ff4:	e6a0      	b.n	8000d38 <__aeabi_ddiv+0x214>
 8000ff6:	1909      	adds	r1, r1, r4
 8000ff8:	3d01      	subs	r5, #1
 8000ffa:	428c      	cmp	r4, r1
 8000ffc:	d900      	bls.n	8001000 <__aeabi_ddiv+0x4dc>
 8000ffe:	e68d      	b.n	8000d1c <__aeabi_ddiv+0x1f8>
 8001000:	428a      	cmp	r2, r1
 8001002:	d800      	bhi.n	8001006 <__aeabi_ddiv+0x4e2>
 8001004:	e68a      	b.n	8000d1c <__aeabi_ddiv+0x1f8>
 8001006:	1e85      	subs	r5, r0, #2
 8001008:	1909      	adds	r1, r1, r4
 800100a:	e687      	b.n	8000d1c <__aeabi_ddiv+0x1f8>
 800100c:	230f      	movs	r3, #15
 800100e:	402b      	ands	r3, r5
 8001010:	2b04      	cmp	r3, #4
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x4f2>
 8001014:	e6bc      	b.n	8000d90 <__aeabi_ddiv+0x26c>
 8001016:	2305      	movs	r3, #5
 8001018:	425b      	negs	r3, r3
 800101a:	42ab      	cmp	r3, r5
 800101c:	419b      	sbcs	r3, r3
 800101e:	3504      	adds	r5, #4
 8001020:	425b      	negs	r3, r3
 8001022:	08ed      	lsrs	r5, r5, #3
 8001024:	4498      	add	r8, r3
 8001026:	e6b4      	b.n	8000d92 <__aeabi_ddiv+0x26e>
 8001028:	42af      	cmp	r7, r5
 800102a:	d900      	bls.n	800102e <__aeabi_ddiv+0x50a>
 800102c:	e660      	b.n	8000cf0 <__aeabi_ddiv+0x1cc>
 800102e:	4282      	cmp	r2, r0
 8001030:	d804      	bhi.n	800103c <__aeabi_ddiv+0x518>
 8001032:	d000      	beq.n	8001036 <__aeabi_ddiv+0x512>
 8001034:	e65c      	b.n	8000cf0 <__aeabi_ddiv+0x1cc>
 8001036:	42ae      	cmp	r6, r5
 8001038:	d800      	bhi.n	800103c <__aeabi_ddiv+0x518>
 800103a:	e659      	b.n	8000cf0 <__aeabi_ddiv+0x1cc>
 800103c:	2302      	movs	r3, #2
 800103e:	425b      	negs	r3, r3
 8001040:	469c      	mov	ip, r3
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	44e0      	add	r8, ip
 8001046:	469c      	mov	ip, r3
 8001048:	4465      	add	r5, ip
 800104a:	429d      	cmp	r5, r3
 800104c:	419b      	sbcs	r3, r3
 800104e:	425b      	negs	r3, r3
 8001050:	191b      	adds	r3, r3, r4
 8001052:	18c0      	adds	r0, r0, r3
 8001054:	e64d      	b.n	8000cf2 <__aeabi_ddiv+0x1ce>
 8001056:	428a      	cmp	r2, r1
 8001058:	d800      	bhi.n	800105c <__aeabi_ddiv+0x538>
 800105a:	e60e      	b.n	8000c7a <__aeabi_ddiv+0x156>
 800105c:	1e83      	subs	r3, r0, #2
 800105e:	1909      	adds	r1, r1, r4
 8001060:	e60b      	b.n	8000c7a <__aeabi_ddiv+0x156>
 8001062:	428a      	cmp	r2, r1
 8001064:	d800      	bhi.n	8001068 <__aeabi_ddiv+0x544>
 8001066:	e5f4      	b.n	8000c52 <__aeabi_ddiv+0x12e>
 8001068:	1e83      	subs	r3, r0, #2
 800106a:	4698      	mov	r8, r3
 800106c:	1909      	adds	r1, r1, r4
 800106e:	e5f0      	b.n	8000c52 <__aeabi_ddiv+0x12e>
 8001070:	4925      	ldr	r1, [pc, #148]	; (8001108 <__aeabi_ddiv+0x5e4>)
 8001072:	0028      	movs	r0, r5
 8001074:	4459      	add	r1, fp
 8001076:	408d      	lsls	r5, r1
 8001078:	4642      	mov	r2, r8
 800107a:	408a      	lsls	r2, r1
 800107c:	1e69      	subs	r1, r5, #1
 800107e:	418d      	sbcs	r5, r1
 8001080:	4641      	mov	r1, r8
 8001082:	40d8      	lsrs	r0, r3
 8001084:	40d9      	lsrs	r1, r3
 8001086:	4302      	orrs	r2, r0
 8001088:	432a      	orrs	r2, r5
 800108a:	000b      	movs	r3, r1
 800108c:	0751      	lsls	r1, r2, #29
 800108e:	d100      	bne.n	8001092 <__aeabi_ddiv+0x56e>
 8001090:	e751      	b.n	8000f36 <__aeabi_ddiv+0x412>
 8001092:	210f      	movs	r1, #15
 8001094:	4011      	ands	r1, r2
 8001096:	2904      	cmp	r1, #4
 8001098:	d000      	beq.n	800109c <__aeabi_ddiv+0x578>
 800109a:	e746      	b.n	8000f2a <__aeabi_ddiv+0x406>
 800109c:	e74b      	b.n	8000f36 <__aeabi_ddiv+0x412>
 800109e:	0005      	movs	r5, r0
 80010a0:	428e      	cmp	r6, r1
 80010a2:	d000      	beq.n	80010a6 <__aeabi_ddiv+0x582>
 80010a4:	e66a      	b.n	8000d7c <__aeabi_ddiv+0x258>
 80010a6:	9a00      	ldr	r2, [sp, #0]
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d000      	beq.n	80010ae <__aeabi_ddiv+0x58a>
 80010ac:	e666      	b.n	8000d7c <__aeabi_ddiv+0x258>
 80010ae:	e667      	b.n	8000d80 <__aeabi_ddiv+0x25c>
 80010b0:	4a16      	ldr	r2, [pc, #88]	; (800110c <__aeabi_ddiv+0x5e8>)
 80010b2:	445a      	add	r2, fp
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_ddiv+0x596>
 80010b8:	e710      	b.n	8000edc <__aeabi_ddiv+0x3b8>
 80010ba:	2301      	movs	r3, #1
 80010bc:	2500      	movs	r5, #0
 80010be:	4498      	add	r8, r3
 80010c0:	e667      	b.n	8000d92 <__aeabi_ddiv+0x26e>
 80010c2:	075d      	lsls	r5, r3, #29
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	0b1c      	lsrs	r4, r3, #12
 80010c8:	08d2      	lsrs	r2, r2, #3
 80010ca:	2300      	movs	r3, #0
 80010cc:	4315      	orrs	r5, r2
 80010ce:	e580      	b.n	8000bd2 <__aeabi_ddiv+0xae>
 80010d0:	9800      	ldr	r0, [sp, #0]
 80010d2:	3d02      	subs	r5, #2
 80010d4:	0042      	lsls	r2, r0, #1
 80010d6:	4282      	cmp	r2, r0
 80010d8:	41bf      	sbcs	r7, r7
 80010da:	427f      	negs	r7, r7
 80010dc:	193c      	adds	r4, r7, r4
 80010de:	1936      	adds	r6, r6, r4
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	e7dd      	b.n	80010a0 <__aeabi_ddiv+0x57c>
 80010e4:	2480      	movs	r4, #128	; 0x80
 80010e6:	4643      	mov	r3, r8
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	431c      	orrs	r4, r3
 80010ec:	0324      	lsls	r4, r4, #12
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__aeabi_ddiv+0x5dc>)
 80010f0:	0b24      	lsrs	r4, r4, #12
 80010f2:	e56e      	b.n	8000bd2 <__aeabi_ddiv+0xae>
 80010f4:	9a00      	ldr	r2, [sp, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d3ea      	bcc.n	80010d0 <__aeabi_ddiv+0x5ac>
 80010fa:	0005      	movs	r5, r0
 80010fc:	e7d3      	b.n	80010a6 <__aeabi_ddiv+0x582>
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	000007ff 	.word	0x000007ff
 8001104:	0000043e 	.word	0x0000043e
 8001108:	0000041e 	.word	0x0000041e
 800110c:	000003ff 	.word	0x000003ff

08001110 <__eqdf2>:
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	464e      	mov	r6, r9
 8001114:	4645      	mov	r5, r8
 8001116:	46de      	mov	lr, fp
 8001118:	4657      	mov	r7, sl
 800111a:	4690      	mov	r8, r2
 800111c:	b5e0      	push	{r5, r6, r7, lr}
 800111e:	0017      	movs	r7, r2
 8001120:	031a      	lsls	r2, r3, #12
 8001122:	0b12      	lsrs	r2, r2, #12
 8001124:	0005      	movs	r5, r0
 8001126:	4684      	mov	ip, r0
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <__eqdf2+0x80>)
 800112a:	030e      	lsls	r6, r1, #12
 800112c:	004c      	lsls	r4, r1, #1
 800112e:	4691      	mov	r9, r2
 8001130:	005a      	lsls	r2, r3, #1
 8001132:	0fdb      	lsrs	r3, r3, #31
 8001134:	469b      	mov	fp, r3
 8001136:	0b36      	lsrs	r6, r6, #12
 8001138:	0d64      	lsrs	r4, r4, #21
 800113a:	0fc9      	lsrs	r1, r1, #31
 800113c:	0d52      	lsrs	r2, r2, #21
 800113e:	4284      	cmp	r4, r0
 8001140:	d019      	beq.n	8001176 <__eqdf2+0x66>
 8001142:	4282      	cmp	r2, r0
 8001144:	d010      	beq.n	8001168 <__eqdf2+0x58>
 8001146:	2001      	movs	r0, #1
 8001148:	4294      	cmp	r4, r2
 800114a:	d10e      	bne.n	800116a <__eqdf2+0x5a>
 800114c:	454e      	cmp	r6, r9
 800114e:	d10c      	bne.n	800116a <__eqdf2+0x5a>
 8001150:	2001      	movs	r0, #1
 8001152:	45c4      	cmp	ip, r8
 8001154:	d109      	bne.n	800116a <__eqdf2+0x5a>
 8001156:	4559      	cmp	r1, fp
 8001158:	d017      	beq.n	800118a <__eqdf2+0x7a>
 800115a:	2c00      	cmp	r4, #0
 800115c:	d105      	bne.n	800116a <__eqdf2+0x5a>
 800115e:	0030      	movs	r0, r6
 8001160:	4328      	orrs	r0, r5
 8001162:	1e43      	subs	r3, r0, #1
 8001164:	4198      	sbcs	r0, r3
 8001166:	e000      	b.n	800116a <__eqdf2+0x5a>
 8001168:	2001      	movs	r0, #1
 800116a:	bcf0      	pop	{r4, r5, r6, r7}
 800116c:	46bb      	mov	fp, r7
 800116e:	46b2      	mov	sl, r6
 8001170:	46a9      	mov	r9, r5
 8001172:	46a0      	mov	r8, r4
 8001174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001176:	0033      	movs	r3, r6
 8001178:	2001      	movs	r0, #1
 800117a:	432b      	orrs	r3, r5
 800117c:	d1f5      	bne.n	800116a <__eqdf2+0x5a>
 800117e:	42a2      	cmp	r2, r4
 8001180:	d1f3      	bne.n	800116a <__eqdf2+0x5a>
 8001182:	464b      	mov	r3, r9
 8001184:	433b      	orrs	r3, r7
 8001186:	d1f0      	bne.n	800116a <__eqdf2+0x5a>
 8001188:	e7e2      	b.n	8001150 <__eqdf2+0x40>
 800118a:	2000      	movs	r0, #0
 800118c:	e7ed      	b.n	800116a <__eqdf2+0x5a>
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff

08001194 <__gedf2>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	4647      	mov	r7, r8
 8001198:	46ce      	mov	lr, r9
 800119a:	0004      	movs	r4, r0
 800119c:	0018      	movs	r0, r3
 800119e:	0016      	movs	r6, r2
 80011a0:	031b      	lsls	r3, r3, #12
 80011a2:	0b1b      	lsrs	r3, r3, #12
 80011a4:	4d2d      	ldr	r5, [pc, #180]	; (800125c <__gedf2+0xc8>)
 80011a6:	004a      	lsls	r2, r1, #1
 80011a8:	4699      	mov	r9, r3
 80011aa:	b580      	push	{r7, lr}
 80011ac:	0043      	lsls	r3, r0, #1
 80011ae:	030f      	lsls	r7, r1, #12
 80011b0:	46a4      	mov	ip, r4
 80011b2:	46b0      	mov	r8, r6
 80011b4:	0b3f      	lsrs	r7, r7, #12
 80011b6:	0d52      	lsrs	r2, r2, #21
 80011b8:	0fc9      	lsrs	r1, r1, #31
 80011ba:	0d5b      	lsrs	r3, r3, #21
 80011bc:	0fc0      	lsrs	r0, r0, #31
 80011be:	42aa      	cmp	r2, r5
 80011c0:	d021      	beq.n	8001206 <__gedf2+0x72>
 80011c2:	42ab      	cmp	r3, r5
 80011c4:	d013      	beq.n	80011ee <__gedf2+0x5a>
 80011c6:	2a00      	cmp	r2, #0
 80011c8:	d122      	bne.n	8001210 <__gedf2+0x7c>
 80011ca:	433c      	orrs	r4, r7
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <__gedf2+0x42>
 80011d0:	464d      	mov	r5, r9
 80011d2:	432e      	orrs	r6, r5
 80011d4:	d022      	beq.n	800121c <__gedf2+0x88>
 80011d6:	2c00      	cmp	r4, #0
 80011d8:	d010      	beq.n	80011fc <__gedf2+0x68>
 80011da:	4281      	cmp	r1, r0
 80011dc:	d022      	beq.n	8001224 <__gedf2+0x90>
 80011de:	2002      	movs	r0, #2
 80011e0:	3901      	subs	r1, #1
 80011e2:	4008      	ands	r0, r1
 80011e4:	3801      	subs	r0, #1
 80011e6:	bcc0      	pop	{r6, r7}
 80011e8:	46b9      	mov	r9, r7
 80011ea:	46b0      	mov	r8, r6
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	464d      	mov	r5, r9
 80011f0:	432e      	orrs	r6, r5
 80011f2:	d129      	bne.n	8001248 <__gedf2+0xb4>
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	d1f0      	bne.n	80011da <__gedf2+0x46>
 80011f8:	433c      	orrs	r4, r7
 80011fa:	d1ee      	bne.n	80011da <__gedf2+0x46>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d1f2      	bne.n	80011e6 <__gedf2+0x52>
 8001200:	2001      	movs	r0, #1
 8001202:	4240      	negs	r0, r0
 8001204:	e7ef      	b.n	80011e6 <__gedf2+0x52>
 8001206:	003d      	movs	r5, r7
 8001208:	4325      	orrs	r5, r4
 800120a:	d11d      	bne.n	8001248 <__gedf2+0xb4>
 800120c:	4293      	cmp	r3, r2
 800120e:	d0ee      	beq.n	80011ee <__gedf2+0x5a>
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1e2      	bne.n	80011da <__gedf2+0x46>
 8001214:	464c      	mov	r4, r9
 8001216:	4326      	orrs	r6, r4
 8001218:	d1df      	bne.n	80011da <__gedf2+0x46>
 800121a:	e7e0      	b.n	80011de <__gedf2+0x4a>
 800121c:	2000      	movs	r0, #0
 800121e:	2c00      	cmp	r4, #0
 8001220:	d0e1      	beq.n	80011e6 <__gedf2+0x52>
 8001222:	e7dc      	b.n	80011de <__gedf2+0x4a>
 8001224:	429a      	cmp	r2, r3
 8001226:	dc0a      	bgt.n	800123e <__gedf2+0xaa>
 8001228:	dbe8      	blt.n	80011fc <__gedf2+0x68>
 800122a:	454f      	cmp	r7, r9
 800122c:	d8d7      	bhi.n	80011de <__gedf2+0x4a>
 800122e:	d00e      	beq.n	800124e <__gedf2+0xba>
 8001230:	2000      	movs	r0, #0
 8001232:	454f      	cmp	r7, r9
 8001234:	d2d7      	bcs.n	80011e6 <__gedf2+0x52>
 8001236:	2900      	cmp	r1, #0
 8001238:	d0e2      	beq.n	8001200 <__gedf2+0x6c>
 800123a:	0008      	movs	r0, r1
 800123c:	e7d3      	b.n	80011e6 <__gedf2+0x52>
 800123e:	4243      	negs	r3, r0
 8001240:	4158      	adcs	r0, r3
 8001242:	0040      	lsls	r0, r0, #1
 8001244:	3801      	subs	r0, #1
 8001246:	e7ce      	b.n	80011e6 <__gedf2+0x52>
 8001248:	2002      	movs	r0, #2
 800124a:	4240      	negs	r0, r0
 800124c:	e7cb      	b.n	80011e6 <__gedf2+0x52>
 800124e:	45c4      	cmp	ip, r8
 8001250:	d8c5      	bhi.n	80011de <__gedf2+0x4a>
 8001252:	2000      	movs	r0, #0
 8001254:	45c4      	cmp	ip, r8
 8001256:	d2c6      	bcs.n	80011e6 <__gedf2+0x52>
 8001258:	e7ed      	b.n	8001236 <__gedf2+0xa2>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	000007ff 	.word	0x000007ff

08001260 <__ledf2>:
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	4647      	mov	r7, r8
 8001264:	46ce      	mov	lr, r9
 8001266:	0004      	movs	r4, r0
 8001268:	0018      	movs	r0, r3
 800126a:	0016      	movs	r6, r2
 800126c:	031b      	lsls	r3, r3, #12
 800126e:	0b1b      	lsrs	r3, r3, #12
 8001270:	4d2c      	ldr	r5, [pc, #176]	; (8001324 <__ledf2+0xc4>)
 8001272:	004a      	lsls	r2, r1, #1
 8001274:	4699      	mov	r9, r3
 8001276:	b580      	push	{r7, lr}
 8001278:	0043      	lsls	r3, r0, #1
 800127a:	030f      	lsls	r7, r1, #12
 800127c:	46a4      	mov	ip, r4
 800127e:	46b0      	mov	r8, r6
 8001280:	0b3f      	lsrs	r7, r7, #12
 8001282:	0d52      	lsrs	r2, r2, #21
 8001284:	0fc9      	lsrs	r1, r1, #31
 8001286:	0d5b      	lsrs	r3, r3, #21
 8001288:	0fc0      	lsrs	r0, r0, #31
 800128a:	42aa      	cmp	r2, r5
 800128c:	d00d      	beq.n	80012aa <__ledf2+0x4a>
 800128e:	42ab      	cmp	r3, r5
 8001290:	d010      	beq.n	80012b4 <__ledf2+0x54>
 8001292:	2a00      	cmp	r2, #0
 8001294:	d127      	bne.n	80012e6 <__ledf2+0x86>
 8001296:	433c      	orrs	r4, r7
 8001298:	2b00      	cmp	r3, #0
 800129a:	d111      	bne.n	80012c0 <__ledf2+0x60>
 800129c:	464d      	mov	r5, r9
 800129e:	432e      	orrs	r6, r5
 80012a0:	d10e      	bne.n	80012c0 <__ledf2+0x60>
 80012a2:	2000      	movs	r0, #0
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d015      	beq.n	80012d4 <__ledf2+0x74>
 80012a8:	e00e      	b.n	80012c8 <__ledf2+0x68>
 80012aa:	003d      	movs	r5, r7
 80012ac:	4325      	orrs	r5, r4
 80012ae:	d110      	bne.n	80012d2 <__ledf2+0x72>
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d118      	bne.n	80012e6 <__ledf2+0x86>
 80012b4:	464d      	mov	r5, r9
 80012b6:	432e      	orrs	r6, r5
 80012b8:	d10b      	bne.n	80012d2 <__ledf2+0x72>
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	d102      	bne.n	80012c4 <__ledf2+0x64>
 80012be:	433c      	orrs	r4, r7
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d00b      	beq.n	80012dc <__ledf2+0x7c>
 80012c4:	4281      	cmp	r1, r0
 80012c6:	d014      	beq.n	80012f2 <__ledf2+0x92>
 80012c8:	2002      	movs	r0, #2
 80012ca:	3901      	subs	r1, #1
 80012cc:	4008      	ands	r0, r1
 80012ce:	3801      	subs	r0, #1
 80012d0:	e000      	b.n	80012d4 <__ledf2+0x74>
 80012d2:	2002      	movs	r0, #2
 80012d4:	bcc0      	pop	{r6, r7}
 80012d6:	46b9      	mov	r9, r7
 80012d8:	46b0      	mov	r8, r6
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1f9      	bne.n	80012d4 <__ledf2+0x74>
 80012e0:	2001      	movs	r0, #1
 80012e2:	4240      	negs	r0, r0
 80012e4:	e7f6      	b.n	80012d4 <__ledf2+0x74>
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ec      	bne.n	80012c4 <__ledf2+0x64>
 80012ea:	464c      	mov	r4, r9
 80012ec:	4326      	orrs	r6, r4
 80012ee:	d1e9      	bne.n	80012c4 <__ledf2+0x64>
 80012f0:	e7ea      	b.n	80012c8 <__ledf2+0x68>
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dd04      	ble.n	8001300 <__ledf2+0xa0>
 80012f6:	4243      	negs	r3, r0
 80012f8:	4158      	adcs	r0, r3
 80012fa:	0040      	lsls	r0, r0, #1
 80012fc:	3801      	subs	r0, #1
 80012fe:	e7e9      	b.n	80012d4 <__ledf2+0x74>
 8001300:	429a      	cmp	r2, r3
 8001302:	dbeb      	blt.n	80012dc <__ledf2+0x7c>
 8001304:	454f      	cmp	r7, r9
 8001306:	d8df      	bhi.n	80012c8 <__ledf2+0x68>
 8001308:	d006      	beq.n	8001318 <__ledf2+0xb8>
 800130a:	2000      	movs	r0, #0
 800130c:	454f      	cmp	r7, r9
 800130e:	d2e1      	bcs.n	80012d4 <__ledf2+0x74>
 8001310:	2900      	cmp	r1, #0
 8001312:	d0e5      	beq.n	80012e0 <__ledf2+0x80>
 8001314:	0008      	movs	r0, r1
 8001316:	e7dd      	b.n	80012d4 <__ledf2+0x74>
 8001318:	45c4      	cmp	ip, r8
 800131a:	d8d5      	bhi.n	80012c8 <__ledf2+0x68>
 800131c:	2000      	movs	r0, #0
 800131e:	45c4      	cmp	ip, r8
 8001320:	d2d8      	bcs.n	80012d4 <__ledf2+0x74>
 8001322:	e7f5      	b.n	8001310 <__ledf2+0xb0>
 8001324:	000007ff 	.word	0x000007ff

08001328 <__aeabi_dmul>:
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	4657      	mov	r7, sl
 800132c:	464e      	mov	r6, r9
 800132e:	4645      	mov	r5, r8
 8001330:	46de      	mov	lr, fp
 8001332:	b5e0      	push	{r5, r6, r7, lr}
 8001334:	4698      	mov	r8, r3
 8001336:	030c      	lsls	r4, r1, #12
 8001338:	004b      	lsls	r3, r1, #1
 800133a:	0006      	movs	r6, r0
 800133c:	4692      	mov	sl, r2
 800133e:	b087      	sub	sp, #28
 8001340:	0b24      	lsrs	r4, r4, #12
 8001342:	0d5b      	lsrs	r3, r3, #21
 8001344:	0fcf      	lsrs	r7, r1, #31
 8001346:	2b00      	cmp	r3, #0
 8001348:	d100      	bne.n	800134c <__aeabi_dmul+0x24>
 800134a:	e15c      	b.n	8001606 <__aeabi_dmul+0x2de>
 800134c:	4ad9      	ldr	r2, [pc, #868]	; (80016b4 <__aeabi_dmul+0x38c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d100      	bne.n	8001354 <__aeabi_dmul+0x2c>
 8001352:	e175      	b.n	8001640 <__aeabi_dmul+0x318>
 8001354:	0f42      	lsrs	r2, r0, #29
 8001356:	00e4      	lsls	r4, r4, #3
 8001358:	4314      	orrs	r4, r2
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	0412      	lsls	r2, r2, #16
 800135e:	4314      	orrs	r4, r2
 8001360:	4ad5      	ldr	r2, [pc, #852]	; (80016b8 <__aeabi_dmul+0x390>)
 8001362:	00c5      	lsls	r5, r0, #3
 8001364:	4694      	mov	ip, r2
 8001366:	4463      	add	r3, ip
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	4699      	mov	r9, r3
 800136e:	469b      	mov	fp, r3
 8001370:	4643      	mov	r3, r8
 8001372:	4642      	mov	r2, r8
 8001374:	031e      	lsls	r6, r3, #12
 8001376:	0fd2      	lsrs	r2, r2, #31
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4650      	mov	r0, sl
 800137c:	4690      	mov	r8, r2
 800137e:	0b36      	lsrs	r6, r6, #12
 8001380:	0d5b      	lsrs	r3, r3, #21
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0x5e>
 8001384:	e120      	b.n	80015c8 <__aeabi_dmul+0x2a0>
 8001386:	4acb      	ldr	r2, [pc, #812]	; (80016b4 <__aeabi_dmul+0x38c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d100      	bne.n	800138e <__aeabi_dmul+0x66>
 800138c:	e162      	b.n	8001654 <__aeabi_dmul+0x32c>
 800138e:	49ca      	ldr	r1, [pc, #808]	; (80016b8 <__aeabi_dmul+0x390>)
 8001390:	0f42      	lsrs	r2, r0, #29
 8001392:	468c      	mov	ip, r1
 8001394:	9900      	ldr	r1, [sp, #0]
 8001396:	4463      	add	r3, ip
 8001398:	00f6      	lsls	r6, r6, #3
 800139a:	468c      	mov	ip, r1
 800139c:	4316      	orrs	r6, r2
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	449c      	add	ip, r3
 80013a2:	0412      	lsls	r2, r2, #16
 80013a4:	4663      	mov	r3, ip
 80013a6:	4316      	orrs	r6, r2
 80013a8:	00c2      	lsls	r2, r0, #3
 80013aa:	2000      	movs	r0, #0
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	9900      	ldr	r1, [sp, #0]
 80013b0:	4643      	mov	r3, r8
 80013b2:	3101      	adds	r1, #1
 80013b4:	468c      	mov	ip, r1
 80013b6:	4649      	mov	r1, r9
 80013b8:	407b      	eors	r3, r7
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	290f      	cmp	r1, #15
 80013be:	d826      	bhi.n	800140e <__aeabi_dmul+0xe6>
 80013c0:	4bbe      	ldr	r3, [pc, #760]	; (80016bc <__aeabi_dmul+0x394>)
 80013c2:	0089      	lsls	r1, r1, #2
 80013c4:	5859      	ldr	r1, [r3, r1]
 80013c6:	468f      	mov	pc, r1
 80013c8:	4643      	mov	r3, r8
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	0034      	movs	r4, r6
 80013ce:	0015      	movs	r5, r2
 80013d0:	4683      	mov	fp, r0
 80013d2:	465b      	mov	r3, fp
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d016      	beq.n	8001406 <__aeabi_dmul+0xde>
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d100      	bne.n	80013de <__aeabi_dmul+0xb6>
 80013dc:	e203      	b.n	80017e6 <__aeabi_dmul+0x4be>
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d000      	beq.n	80013e4 <__aeabi_dmul+0xbc>
 80013e2:	e0cd      	b.n	8001580 <__aeabi_dmul+0x258>
 80013e4:	2200      	movs	r2, #0
 80013e6:	2400      	movs	r4, #0
 80013e8:	2500      	movs	r5, #0
 80013ea:	9b01      	ldr	r3, [sp, #4]
 80013ec:	0512      	lsls	r2, r2, #20
 80013ee:	4322      	orrs	r2, r4
 80013f0:	07db      	lsls	r3, r3, #31
 80013f2:	431a      	orrs	r2, r3
 80013f4:	0028      	movs	r0, r5
 80013f6:	0011      	movs	r1, r2
 80013f8:	b007      	add	sp, #28
 80013fa:	bcf0      	pop	{r4, r5, r6, r7}
 80013fc:	46bb      	mov	fp, r7
 80013fe:	46b2      	mov	sl, r6
 8001400:	46a9      	mov	r9, r5
 8001402:	46a0      	mov	r8, r4
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001406:	2400      	movs	r4, #0
 8001408:	2500      	movs	r5, #0
 800140a:	4aaa      	ldr	r2, [pc, #680]	; (80016b4 <__aeabi_dmul+0x38c>)
 800140c:	e7ed      	b.n	80013ea <__aeabi_dmul+0xc2>
 800140e:	0c28      	lsrs	r0, r5, #16
 8001410:	042d      	lsls	r5, r5, #16
 8001412:	0c2d      	lsrs	r5, r5, #16
 8001414:	002b      	movs	r3, r5
 8001416:	0c11      	lsrs	r1, r2, #16
 8001418:	0412      	lsls	r2, r2, #16
 800141a:	0c12      	lsrs	r2, r2, #16
 800141c:	4353      	muls	r3, r2
 800141e:	4698      	mov	r8, r3
 8001420:	0013      	movs	r3, r2
 8001422:	002f      	movs	r7, r5
 8001424:	4343      	muls	r3, r0
 8001426:	4699      	mov	r9, r3
 8001428:	434f      	muls	r7, r1
 800142a:	444f      	add	r7, r9
 800142c:	46bb      	mov	fp, r7
 800142e:	4647      	mov	r7, r8
 8001430:	000b      	movs	r3, r1
 8001432:	0c3f      	lsrs	r7, r7, #16
 8001434:	46ba      	mov	sl, r7
 8001436:	4343      	muls	r3, r0
 8001438:	44da      	add	sl, fp
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	45d1      	cmp	r9, sl
 800143e:	d904      	bls.n	800144a <__aeabi_dmul+0x122>
 8001440:	2780      	movs	r7, #128	; 0x80
 8001442:	027f      	lsls	r7, r7, #9
 8001444:	46b9      	mov	r9, r7
 8001446:	444b      	add	r3, r9
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	4653      	mov	r3, sl
 800144c:	0c1b      	lsrs	r3, r3, #16
 800144e:	469b      	mov	fp, r3
 8001450:	4653      	mov	r3, sl
 8001452:	041f      	lsls	r7, r3, #16
 8001454:	4643      	mov	r3, r8
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	4698      	mov	r8, r3
 800145c:	003b      	movs	r3, r7
 800145e:	4443      	add	r3, r8
 8001460:	9304      	str	r3, [sp, #16]
 8001462:	0c33      	lsrs	r3, r6, #16
 8001464:	0436      	lsls	r6, r6, #16
 8001466:	0c36      	lsrs	r6, r6, #16
 8001468:	4698      	mov	r8, r3
 800146a:	0033      	movs	r3, r6
 800146c:	4343      	muls	r3, r0
 800146e:	4699      	mov	r9, r3
 8001470:	4643      	mov	r3, r8
 8001472:	4343      	muls	r3, r0
 8001474:	002f      	movs	r7, r5
 8001476:	469a      	mov	sl, r3
 8001478:	4643      	mov	r3, r8
 800147a:	4377      	muls	r7, r6
 800147c:	435d      	muls	r5, r3
 800147e:	0c38      	lsrs	r0, r7, #16
 8001480:	444d      	add	r5, r9
 8001482:	1945      	adds	r5, r0, r5
 8001484:	45a9      	cmp	r9, r5
 8001486:	d903      	bls.n	8001490 <__aeabi_dmul+0x168>
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	4699      	mov	r9, r3
 800148e:	44ca      	add	sl, r9
 8001490:	043f      	lsls	r7, r7, #16
 8001492:	0c28      	lsrs	r0, r5, #16
 8001494:	0c3f      	lsrs	r7, r7, #16
 8001496:	042d      	lsls	r5, r5, #16
 8001498:	19ed      	adds	r5, r5, r7
 800149a:	0c27      	lsrs	r7, r4, #16
 800149c:	0424      	lsls	r4, r4, #16
 800149e:	0c24      	lsrs	r4, r4, #16
 80014a0:	0003      	movs	r3, r0
 80014a2:	0020      	movs	r0, r4
 80014a4:	4350      	muls	r0, r2
 80014a6:	437a      	muls	r2, r7
 80014a8:	4691      	mov	r9, r2
 80014aa:	003a      	movs	r2, r7
 80014ac:	4453      	add	r3, sl
 80014ae:	9305      	str	r3, [sp, #20]
 80014b0:	0c03      	lsrs	r3, r0, #16
 80014b2:	469a      	mov	sl, r3
 80014b4:	434a      	muls	r2, r1
 80014b6:	4361      	muls	r1, r4
 80014b8:	4449      	add	r1, r9
 80014ba:	4451      	add	r1, sl
 80014bc:	44ab      	add	fp, r5
 80014be:	4589      	cmp	r9, r1
 80014c0:	d903      	bls.n	80014ca <__aeabi_dmul+0x1a2>
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	025b      	lsls	r3, r3, #9
 80014c6:	4699      	mov	r9, r3
 80014c8:	444a      	add	r2, r9
 80014ca:	0400      	lsls	r0, r0, #16
 80014cc:	0c0b      	lsrs	r3, r1, #16
 80014ce:	0c00      	lsrs	r0, r0, #16
 80014d0:	0409      	lsls	r1, r1, #16
 80014d2:	1809      	adds	r1, r1, r0
 80014d4:	0020      	movs	r0, r4
 80014d6:	4699      	mov	r9, r3
 80014d8:	4643      	mov	r3, r8
 80014da:	4370      	muls	r0, r6
 80014dc:	435c      	muls	r4, r3
 80014de:	437e      	muls	r6, r7
 80014e0:	435f      	muls	r7, r3
 80014e2:	0c03      	lsrs	r3, r0, #16
 80014e4:	4698      	mov	r8, r3
 80014e6:	19a4      	adds	r4, r4, r6
 80014e8:	4444      	add	r4, r8
 80014ea:	444a      	add	r2, r9
 80014ec:	9703      	str	r7, [sp, #12]
 80014ee:	42a6      	cmp	r6, r4
 80014f0:	d904      	bls.n	80014fc <__aeabi_dmul+0x1d4>
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	4698      	mov	r8, r3
 80014f8:	4447      	add	r7, r8
 80014fa:	9703      	str	r7, [sp, #12]
 80014fc:	0423      	lsls	r3, r4, #16
 80014fe:	9e02      	ldr	r6, [sp, #8]
 8001500:	469a      	mov	sl, r3
 8001502:	9b05      	ldr	r3, [sp, #20]
 8001504:	445e      	add	r6, fp
 8001506:	4698      	mov	r8, r3
 8001508:	42ae      	cmp	r6, r5
 800150a:	41ad      	sbcs	r5, r5
 800150c:	1876      	adds	r6, r6, r1
 800150e:	428e      	cmp	r6, r1
 8001510:	4189      	sbcs	r1, r1
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	4450      	add	r0, sl
 8001518:	4440      	add	r0, r8
 800151a:	426d      	negs	r5, r5
 800151c:	1947      	adds	r7, r0, r5
 800151e:	46b8      	mov	r8, r7
 8001520:	4693      	mov	fp, r2
 8001522:	4249      	negs	r1, r1
 8001524:	4689      	mov	r9, r1
 8001526:	44c3      	add	fp, r8
 8001528:	44d9      	add	r9, fp
 800152a:	4298      	cmp	r0, r3
 800152c:	4180      	sbcs	r0, r0
 800152e:	45a8      	cmp	r8, r5
 8001530:	41ad      	sbcs	r5, r5
 8001532:	4593      	cmp	fp, r2
 8001534:	4192      	sbcs	r2, r2
 8001536:	4589      	cmp	r9, r1
 8001538:	4189      	sbcs	r1, r1
 800153a:	426d      	negs	r5, r5
 800153c:	4240      	negs	r0, r0
 800153e:	4328      	orrs	r0, r5
 8001540:	0c24      	lsrs	r4, r4, #16
 8001542:	4252      	negs	r2, r2
 8001544:	4249      	negs	r1, r1
 8001546:	430a      	orrs	r2, r1
 8001548:	9b03      	ldr	r3, [sp, #12]
 800154a:	1900      	adds	r0, r0, r4
 800154c:	1880      	adds	r0, r0, r2
 800154e:	18c7      	adds	r7, r0, r3
 8001550:	464b      	mov	r3, r9
 8001552:	0ddc      	lsrs	r4, r3, #23
 8001554:	9b04      	ldr	r3, [sp, #16]
 8001556:	0275      	lsls	r5, r6, #9
 8001558:	431d      	orrs	r5, r3
 800155a:	1e6a      	subs	r2, r5, #1
 800155c:	4195      	sbcs	r5, r2
 800155e:	464b      	mov	r3, r9
 8001560:	0df6      	lsrs	r6, r6, #23
 8001562:	027f      	lsls	r7, r7, #9
 8001564:	4335      	orrs	r5, r6
 8001566:	025a      	lsls	r2, r3, #9
 8001568:	433c      	orrs	r4, r7
 800156a:	4315      	orrs	r5, r2
 800156c:	01fb      	lsls	r3, r7, #7
 800156e:	d400      	bmi.n	8001572 <__aeabi_dmul+0x24a>
 8001570:	e11c      	b.n	80017ac <__aeabi_dmul+0x484>
 8001572:	2101      	movs	r1, #1
 8001574:	086a      	lsrs	r2, r5, #1
 8001576:	400d      	ands	r5, r1
 8001578:	4315      	orrs	r5, r2
 800157a:	07e2      	lsls	r2, r4, #31
 800157c:	4315      	orrs	r5, r2
 800157e:	0864      	lsrs	r4, r4, #1
 8001580:	494f      	ldr	r1, [pc, #316]	; (80016c0 <__aeabi_dmul+0x398>)
 8001582:	4461      	add	r1, ip
 8001584:	2900      	cmp	r1, #0
 8001586:	dc00      	bgt.n	800158a <__aeabi_dmul+0x262>
 8001588:	e0b0      	b.n	80016ec <__aeabi_dmul+0x3c4>
 800158a:	076b      	lsls	r3, r5, #29
 800158c:	d009      	beq.n	80015a2 <__aeabi_dmul+0x27a>
 800158e:	220f      	movs	r2, #15
 8001590:	402a      	ands	r2, r5
 8001592:	2a04      	cmp	r2, #4
 8001594:	d005      	beq.n	80015a2 <__aeabi_dmul+0x27a>
 8001596:	1d2a      	adds	r2, r5, #4
 8001598:	42aa      	cmp	r2, r5
 800159a:	41ad      	sbcs	r5, r5
 800159c:	426d      	negs	r5, r5
 800159e:	1964      	adds	r4, r4, r5
 80015a0:	0015      	movs	r5, r2
 80015a2:	01e3      	lsls	r3, r4, #7
 80015a4:	d504      	bpl.n	80015b0 <__aeabi_dmul+0x288>
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	4a46      	ldr	r2, [pc, #280]	; (80016c4 <__aeabi_dmul+0x39c>)
 80015aa:	00c9      	lsls	r1, r1, #3
 80015ac:	4014      	ands	r4, r2
 80015ae:	4461      	add	r1, ip
 80015b0:	4a45      	ldr	r2, [pc, #276]	; (80016c8 <__aeabi_dmul+0x3a0>)
 80015b2:	4291      	cmp	r1, r2
 80015b4:	dd00      	ble.n	80015b8 <__aeabi_dmul+0x290>
 80015b6:	e726      	b.n	8001406 <__aeabi_dmul+0xde>
 80015b8:	0762      	lsls	r2, r4, #29
 80015ba:	08ed      	lsrs	r5, r5, #3
 80015bc:	0264      	lsls	r4, r4, #9
 80015be:	0549      	lsls	r1, r1, #21
 80015c0:	4315      	orrs	r5, r2
 80015c2:	0b24      	lsrs	r4, r4, #12
 80015c4:	0d4a      	lsrs	r2, r1, #21
 80015c6:	e710      	b.n	80013ea <__aeabi_dmul+0xc2>
 80015c8:	4652      	mov	r2, sl
 80015ca:	4332      	orrs	r2, r6
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dmul+0x2a8>
 80015ce:	e07f      	b.n	80016d0 <__aeabi_dmul+0x3a8>
 80015d0:	2e00      	cmp	r6, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dmul+0x2ae>
 80015d4:	e0dc      	b.n	8001790 <__aeabi_dmul+0x468>
 80015d6:	0030      	movs	r0, r6
 80015d8:	f000 fd30 	bl	800203c <__clzsi2>
 80015dc:	0002      	movs	r2, r0
 80015de:	3a0b      	subs	r2, #11
 80015e0:	231d      	movs	r3, #29
 80015e2:	0001      	movs	r1, r0
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	4652      	mov	r2, sl
 80015e8:	3908      	subs	r1, #8
 80015ea:	40da      	lsrs	r2, r3
 80015ec:	408e      	lsls	r6, r1
 80015ee:	4316      	orrs	r6, r2
 80015f0:	4652      	mov	r2, sl
 80015f2:	408a      	lsls	r2, r1
 80015f4:	9b00      	ldr	r3, [sp, #0]
 80015f6:	4935      	ldr	r1, [pc, #212]	; (80016cc <__aeabi_dmul+0x3a4>)
 80015f8:	1a18      	subs	r0, r3, r0
 80015fa:	0003      	movs	r3, r0
 80015fc:	468c      	mov	ip, r1
 80015fe:	4463      	add	r3, ip
 8001600:	2000      	movs	r0, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	e6d3      	b.n	80013ae <__aeabi_dmul+0x86>
 8001606:	0025      	movs	r5, r4
 8001608:	4305      	orrs	r5, r0
 800160a:	d04a      	beq.n	80016a2 <__aeabi_dmul+0x37a>
 800160c:	2c00      	cmp	r4, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dmul+0x2ea>
 8001610:	e0b0      	b.n	8001774 <__aeabi_dmul+0x44c>
 8001612:	0020      	movs	r0, r4
 8001614:	f000 fd12 	bl	800203c <__clzsi2>
 8001618:	0001      	movs	r1, r0
 800161a:	0002      	movs	r2, r0
 800161c:	390b      	subs	r1, #11
 800161e:	231d      	movs	r3, #29
 8001620:	0010      	movs	r0, r2
 8001622:	1a5b      	subs	r3, r3, r1
 8001624:	0031      	movs	r1, r6
 8001626:	0035      	movs	r5, r6
 8001628:	3808      	subs	r0, #8
 800162a:	4084      	lsls	r4, r0
 800162c:	40d9      	lsrs	r1, r3
 800162e:	4085      	lsls	r5, r0
 8001630:	430c      	orrs	r4, r1
 8001632:	4826      	ldr	r0, [pc, #152]	; (80016cc <__aeabi_dmul+0x3a4>)
 8001634:	1a83      	subs	r3, r0, r2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	4699      	mov	r9, r3
 800163c:	469b      	mov	fp, r3
 800163e:	e697      	b.n	8001370 <__aeabi_dmul+0x48>
 8001640:	0005      	movs	r5, r0
 8001642:	4325      	orrs	r5, r4
 8001644:	d126      	bne.n	8001694 <__aeabi_dmul+0x36c>
 8001646:	2208      	movs	r2, #8
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2302      	movs	r3, #2
 800164c:	2400      	movs	r4, #0
 800164e:	4691      	mov	r9, r2
 8001650:	469b      	mov	fp, r3
 8001652:	e68d      	b.n	8001370 <__aeabi_dmul+0x48>
 8001654:	4652      	mov	r2, sl
 8001656:	9b00      	ldr	r3, [sp, #0]
 8001658:	4332      	orrs	r2, r6
 800165a:	d110      	bne.n	800167e <__aeabi_dmul+0x356>
 800165c:	4915      	ldr	r1, [pc, #84]	; (80016b4 <__aeabi_dmul+0x38c>)
 800165e:	2600      	movs	r6, #0
 8001660:	468c      	mov	ip, r1
 8001662:	4463      	add	r3, ip
 8001664:	4649      	mov	r1, r9
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2302      	movs	r3, #2
 800166a:	4319      	orrs	r1, r3
 800166c:	4689      	mov	r9, r1
 800166e:	2002      	movs	r0, #2
 8001670:	e69d      	b.n	80013ae <__aeabi_dmul+0x86>
 8001672:	465b      	mov	r3, fp
 8001674:	9701      	str	r7, [sp, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d000      	beq.n	800167c <__aeabi_dmul+0x354>
 800167a:	e6ad      	b.n	80013d8 <__aeabi_dmul+0xb0>
 800167c:	e6c3      	b.n	8001406 <__aeabi_dmul+0xde>
 800167e:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <__aeabi_dmul+0x38c>)
 8001680:	2003      	movs	r0, #3
 8001682:	4694      	mov	ip, r2
 8001684:	4463      	add	r3, ip
 8001686:	464a      	mov	r2, r9
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2303      	movs	r3, #3
 800168c:	431a      	orrs	r2, r3
 800168e:	4691      	mov	r9, r2
 8001690:	4652      	mov	r2, sl
 8001692:	e68c      	b.n	80013ae <__aeabi_dmul+0x86>
 8001694:	220c      	movs	r2, #12
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2303      	movs	r3, #3
 800169a:	0005      	movs	r5, r0
 800169c:	4691      	mov	r9, r2
 800169e:	469b      	mov	fp, r3
 80016a0:	e666      	b.n	8001370 <__aeabi_dmul+0x48>
 80016a2:	2304      	movs	r3, #4
 80016a4:	4699      	mov	r9, r3
 80016a6:	2300      	movs	r3, #0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	2400      	movs	r4, #0
 80016ae:	469b      	mov	fp, r3
 80016b0:	e65e      	b.n	8001370 <__aeabi_dmul+0x48>
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	000007ff 	.word	0x000007ff
 80016b8:	fffffc01 	.word	0xfffffc01
 80016bc:	080058f0 	.word	0x080058f0
 80016c0:	000003ff 	.word	0x000003ff
 80016c4:	feffffff 	.word	0xfeffffff
 80016c8:	000007fe 	.word	0x000007fe
 80016cc:	fffffc0d 	.word	0xfffffc0d
 80016d0:	4649      	mov	r1, r9
 80016d2:	2301      	movs	r3, #1
 80016d4:	4319      	orrs	r1, r3
 80016d6:	4689      	mov	r9, r1
 80016d8:	2600      	movs	r6, #0
 80016da:	2001      	movs	r0, #1
 80016dc:	e667      	b.n	80013ae <__aeabi_dmul+0x86>
 80016de:	2300      	movs	r3, #0
 80016e0:	2480      	movs	r4, #128	; 0x80
 80016e2:	2500      	movs	r5, #0
 80016e4:	4a43      	ldr	r2, [pc, #268]	; (80017f4 <__aeabi_dmul+0x4cc>)
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	0324      	lsls	r4, r4, #12
 80016ea:	e67e      	b.n	80013ea <__aeabi_dmul+0xc2>
 80016ec:	2001      	movs	r0, #1
 80016ee:	1a40      	subs	r0, r0, r1
 80016f0:	2838      	cmp	r0, #56	; 0x38
 80016f2:	dd00      	ble.n	80016f6 <__aeabi_dmul+0x3ce>
 80016f4:	e676      	b.n	80013e4 <__aeabi_dmul+0xbc>
 80016f6:	281f      	cmp	r0, #31
 80016f8:	dd5b      	ble.n	80017b2 <__aeabi_dmul+0x48a>
 80016fa:	221f      	movs	r2, #31
 80016fc:	0023      	movs	r3, r4
 80016fe:	4252      	negs	r2, r2
 8001700:	1a51      	subs	r1, r2, r1
 8001702:	40cb      	lsrs	r3, r1
 8001704:	0019      	movs	r1, r3
 8001706:	2820      	cmp	r0, #32
 8001708:	d003      	beq.n	8001712 <__aeabi_dmul+0x3ea>
 800170a:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <__aeabi_dmul+0x4d0>)
 800170c:	4462      	add	r2, ip
 800170e:	4094      	lsls	r4, r2
 8001710:	4325      	orrs	r5, r4
 8001712:	1e6a      	subs	r2, r5, #1
 8001714:	4195      	sbcs	r5, r2
 8001716:	002a      	movs	r2, r5
 8001718:	430a      	orrs	r2, r1
 800171a:	2107      	movs	r1, #7
 800171c:	000d      	movs	r5, r1
 800171e:	2400      	movs	r4, #0
 8001720:	4015      	ands	r5, r2
 8001722:	4211      	tst	r1, r2
 8001724:	d05b      	beq.n	80017de <__aeabi_dmul+0x4b6>
 8001726:	210f      	movs	r1, #15
 8001728:	2400      	movs	r4, #0
 800172a:	4011      	ands	r1, r2
 800172c:	2904      	cmp	r1, #4
 800172e:	d053      	beq.n	80017d8 <__aeabi_dmul+0x4b0>
 8001730:	1d11      	adds	r1, r2, #4
 8001732:	4291      	cmp	r1, r2
 8001734:	4192      	sbcs	r2, r2
 8001736:	4252      	negs	r2, r2
 8001738:	18a4      	adds	r4, r4, r2
 800173a:	000a      	movs	r2, r1
 800173c:	0223      	lsls	r3, r4, #8
 800173e:	d54b      	bpl.n	80017d8 <__aeabi_dmul+0x4b0>
 8001740:	2201      	movs	r2, #1
 8001742:	2400      	movs	r4, #0
 8001744:	2500      	movs	r5, #0
 8001746:	e650      	b.n	80013ea <__aeabi_dmul+0xc2>
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	031b      	lsls	r3, r3, #12
 800174c:	421c      	tst	r4, r3
 800174e:	d009      	beq.n	8001764 <__aeabi_dmul+0x43c>
 8001750:	421e      	tst	r6, r3
 8001752:	d107      	bne.n	8001764 <__aeabi_dmul+0x43c>
 8001754:	4333      	orrs	r3, r6
 8001756:	031c      	lsls	r4, r3, #12
 8001758:	4643      	mov	r3, r8
 800175a:	0015      	movs	r5, r2
 800175c:	0b24      	lsrs	r4, r4, #12
 800175e:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <__aeabi_dmul+0x4cc>)
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	e642      	b.n	80013ea <__aeabi_dmul+0xc2>
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	0312      	lsls	r2, r2, #12
 8001768:	4314      	orrs	r4, r2
 800176a:	0324      	lsls	r4, r4, #12
 800176c:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <__aeabi_dmul+0x4cc>)
 800176e:	0b24      	lsrs	r4, r4, #12
 8001770:	9701      	str	r7, [sp, #4]
 8001772:	e63a      	b.n	80013ea <__aeabi_dmul+0xc2>
 8001774:	f000 fc62 	bl	800203c <__clzsi2>
 8001778:	0001      	movs	r1, r0
 800177a:	0002      	movs	r2, r0
 800177c:	3115      	adds	r1, #21
 800177e:	3220      	adds	r2, #32
 8001780:	291c      	cmp	r1, #28
 8001782:	dc00      	bgt.n	8001786 <__aeabi_dmul+0x45e>
 8001784:	e74b      	b.n	800161e <__aeabi_dmul+0x2f6>
 8001786:	0034      	movs	r4, r6
 8001788:	3808      	subs	r0, #8
 800178a:	2500      	movs	r5, #0
 800178c:	4084      	lsls	r4, r0
 800178e:	e750      	b.n	8001632 <__aeabi_dmul+0x30a>
 8001790:	f000 fc54 	bl	800203c <__clzsi2>
 8001794:	0003      	movs	r3, r0
 8001796:	001a      	movs	r2, r3
 8001798:	3215      	adds	r2, #21
 800179a:	3020      	adds	r0, #32
 800179c:	2a1c      	cmp	r2, #28
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dmul+0x47a>
 80017a0:	e71e      	b.n	80015e0 <__aeabi_dmul+0x2b8>
 80017a2:	4656      	mov	r6, sl
 80017a4:	3b08      	subs	r3, #8
 80017a6:	2200      	movs	r2, #0
 80017a8:	409e      	lsls	r6, r3
 80017aa:	e723      	b.n	80015f4 <__aeabi_dmul+0x2cc>
 80017ac:	9b00      	ldr	r3, [sp, #0]
 80017ae:	469c      	mov	ip, r3
 80017b0:	e6e6      	b.n	8001580 <__aeabi_dmul+0x258>
 80017b2:	4912      	ldr	r1, [pc, #72]	; (80017fc <__aeabi_dmul+0x4d4>)
 80017b4:	0022      	movs	r2, r4
 80017b6:	4461      	add	r1, ip
 80017b8:	002e      	movs	r6, r5
 80017ba:	408d      	lsls	r5, r1
 80017bc:	408a      	lsls	r2, r1
 80017be:	40c6      	lsrs	r6, r0
 80017c0:	1e69      	subs	r1, r5, #1
 80017c2:	418d      	sbcs	r5, r1
 80017c4:	4332      	orrs	r2, r6
 80017c6:	432a      	orrs	r2, r5
 80017c8:	40c4      	lsrs	r4, r0
 80017ca:	0753      	lsls	r3, r2, #29
 80017cc:	d0b6      	beq.n	800173c <__aeabi_dmul+0x414>
 80017ce:	210f      	movs	r1, #15
 80017d0:	4011      	ands	r1, r2
 80017d2:	2904      	cmp	r1, #4
 80017d4:	d1ac      	bne.n	8001730 <__aeabi_dmul+0x408>
 80017d6:	e7b1      	b.n	800173c <__aeabi_dmul+0x414>
 80017d8:	0765      	lsls	r5, r4, #29
 80017da:	0264      	lsls	r4, r4, #9
 80017dc:	0b24      	lsrs	r4, r4, #12
 80017de:	08d2      	lsrs	r2, r2, #3
 80017e0:	4315      	orrs	r5, r2
 80017e2:	2200      	movs	r2, #0
 80017e4:	e601      	b.n	80013ea <__aeabi_dmul+0xc2>
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	0312      	lsls	r2, r2, #12
 80017ea:	4314      	orrs	r4, r2
 80017ec:	0324      	lsls	r4, r4, #12
 80017ee:	4a01      	ldr	r2, [pc, #4]	; (80017f4 <__aeabi_dmul+0x4cc>)
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	e5fa      	b.n	80013ea <__aeabi_dmul+0xc2>
 80017f4:	000007ff 	.word	0x000007ff
 80017f8:	0000043e 	.word	0x0000043e
 80017fc:	0000041e 	.word	0x0000041e

08001800 <__aeabi_dsub>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	4657      	mov	r7, sl
 8001804:	464e      	mov	r6, r9
 8001806:	4645      	mov	r5, r8
 8001808:	46de      	mov	lr, fp
 800180a:	b5e0      	push	{r5, r6, r7, lr}
 800180c:	001e      	movs	r6, r3
 800180e:	0017      	movs	r7, r2
 8001810:	004a      	lsls	r2, r1, #1
 8001812:	030b      	lsls	r3, r1, #12
 8001814:	0d52      	lsrs	r2, r2, #21
 8001816:	0a5b      	lsrs	r3, r3, #9
 8001818:	4690      	mov	r8, r2
 800181a:	0f42      	lsrs	r2, r0, #29
 800181c:	431a      	orrs	r2, r3
 800181e:	0fcd      	lsrs	r5, r1, #31
 8001820:	4ccd      	ldr	r4, [pc, #820]	; (8001b58 <__aeabi_dsub+0x358>)
 8001822:	0331      	lsls	r1, r6, #12
 8001824:	00c3      	lsls	r3, r0, #3
 8001826:	4694      	mov	ip, r2
 8001828:	0070      	lsls	r0, r6, #1
 800182a:	0f7a      	lsrs	r2, r7, #29
 800182c:	0a49      	lsrs	r1, r1, #9
 800182e:	00ff      	lsls	r7, r7, #3
 8001830:	469a      	mov	sl, r3
 8001832:	46b9      	mov	r9, r7
 8001834:	0d40      	lsrs	r0, r0, #21
 8001836:	0ff6      	lsrs	r6, r6, #31
 8001838:	4311      	orrs	r1, r2
 800183a:	42a0      	cmp	r0, r4
 800183c:	d100      	bne.n	8001840 <__aeabi_dsub+0x40>
 800183e:	e0b1      	b.n	80019a4 <__aeabi_dsub+0x1a4>
 8001840:	2201      	movs	r2, #1
 8001842:	4056      	eors	r6, r2
 8001844:	46b3      	mov	fp, r6
 8001846:	42b5      	cmp	r5, r6
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x4c>
 800184a:	e088      	b.n	800195e <__aeabi_dsub+0x15e>
 800184c:	4642      	mov	r2, r8
 800184e:	1a12      	subs	r2, r2, r0
 8001850:	2a00      	cmp	r2, #0
 8001852:	dc00      	bgt.n	8001856 <__aeabi_dsub+0x56>
 8001854:	e0ae      	b.n	80019b4 <__aeabi_dsub+0x1b4>
 8001856:	2800      	cmp	r0, #0
 8001858:	d100      	bne.n	800185c <__aeabi_dsub+0x5c>
 800185a:	e0c1      	b.n	80019e0 <__aeabi_dsub+0x1e0>
 800185c:	48be      	ldr	r0, [pc, #760]	; (8001b58 <__aeabi_dsub+0x358>)
 800185e:	4580      	cmp	r8, r0
 8001860:	d100      	bne.n	8001864 <__aeabi_dsub+0x64>
 8001862:	e151      	b.n	8001b08 <__aeabi_dsub+0x308>
 8001864:	2080      	movs	r0, #128	; 0x80
 8001866:	0400      	lsls	r0, r0, #16
 8001868:	4301      	orrs	r1, r0
 800186a:	2a38      	cmp	r2, #56	; 0x38
 800186c:	dd00      	ble.n	8001870 <__aeabi_dsub+0x70>
 800186e:	e17b      	b.n	8001b68 <__aeabi_dsub+0x368>
 8001870:	2a1f      	cmp	r2, #31
 8001872:	dd00      	ble.n	8001876 <__aeabi_dsub+0x76>
 8001874:	e1ee      	b.n	8001c54 <__aeabi_dsub+0x454>
 8001876:	2020      	movs	r0, #32
 8001878:	003e      	movs	r6, r7
 800187a:	1a80      	subs	r0, r0, r2
 800187c:	000c      	movs	r4, r1
 800187e:	40d6      	lsrs	r6, r2
 8001880:	40d1      	lsrs	r1, r2
 8001882:	4087      	lsls	r7, r0
 8001884:	4662      	mov	r2, ip
 8001886:	4084      	lsls	r4, r0
 8001888:	1a52      	subs	r2, r2, r1
 800188a:	1e78      	subs	r0, r7, #1
 800188c:	4187      	sbcs	r7, r0
 800188e:	4694      	mov	ip, r2
 8001890:	4334      	orrs	r4, r6
 8001892:	4327      	orrs	r7, r4
 8001894:	1bdc      	subs	r4, r3, r7
 8001896:	42a3      	cmp	r3, r4
 8001898:	419b      	sbcs	r3, r3
 800189a:	4662      	mov	r2, ip
 800189c:	425b      	negs	r3, r3
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4699      	mov	r9, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	d400      	bmi.n	80018aa <__aeabi_dsub+0xaa>
 80018a8:	e118      	b.n	8001adc <__aeabi_dsub+0x2dc>
 80018aa:	464b      	mov	r3, r9
 80018ac:	0258      	lsls	r0, r3, #9
 80018ae:	0a43      	lsrs	r3, r0, #9
 80018b0:	4699      	mov	r9, r3
 80018b2:	464b      	mov	r3, r9
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d100      	bne.n	80018ba <__aeabi_dsub+0xba>
 80018b8:	e137      	b.n	8001b2a <__aeabi_dsub+0x32a>
 80018ba:	4648      	mov	r0, r9
 80018bc:	f000 fbbe 	bl	800203c <__clzsi2>
 80018c0:	0001      	movs	r1, r0
 80018c2:	3908      	subs	r1, #8
 80018c4:	2320      	movs	r3, #32
 80018c6:	0022      	movs	r2, r4
 80018c8:	4648      	mov	r0, r9
 80018ca:	1a5b      	subs	r3, r3, r1
 80018cc:	40da      	lsrs	r2, r3
 80018ce:	4088      	lsls	r0, r1
 80018d0:	408c      	lsls	r4, r1
 80018d2:	4643      	mov	r3, r8
 80018d4:	4310      	orrs	r0, r2
 80018d6:	4588      	cmp	r8, r1
 80018d8:	dd00      	ble.n	80018dc <__aeabi_dsub+0xdc>
 80018da:	e136      	b.n	8001b4a <__aeabi_dsub+0x34a>
 80018dc:	1ac9      	subs	r1, r1, r3
 80018de:	1c4b      	adds	r3, r1, #1
 80018e0:	2b1f      	cmp	r3, #31
 80018e2:	dd00      	ble.n	80018e6 <__aeabi_dsub+0xe6>
 80018e4:	e0ea      	b.n	8001abc <__aeabi_dsub+0x2bc>
 80018e6:	2220      	movs	r2, #32
 80018e8:	0026      	movs	r6, r4
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	0001      	movs	r1, r0
 80018ee:	4094      	lsls	r4, r2
 80018f0:	40de      	lsrs	r6, r3
 80018f2:	40d8      	lsrs	r0, r3
 80018f4:	2300      	movs	r3, #0
 80018f6:	4091      	lsls	r1, r2
 80018f8:	1e62      	subs	r2, r4, #1
 80018fa:	4194      	sbcs	r4, r2
 80018fc:	4681      	mov	r9, r0
 80018fe:	4698      	mov	r8, r3
 8001900:	4331      	orrs	r1, r6
 8001902:	430c      	orrs	r4, r1
 8001904:	0763      	lsls	r3, r4, #29
 8001906:	d009      	beq.n	800191c <__aeabi_dsub+0x11c>
 8001908:	230f      	movs	r3, #15
 800190a:	4023      	ands	r3, r4
 800190c:	2b04      	cmp	r3, #4
 800190e:	d005      	beq.n	800191c <__aeabi_dsub+0x11c>
 8001910:	1d23      	adds	r3, r4, #4
 8001912:	42a3      	cmp	r3, r4
 8001914:	41a4      	sbcs	r4, r4
 8001916:	4264      	negs	r4, r4
 8001918:	44a1      	add	r9, r4
 800191a:	001c      	movs	r4, r3
 800191c:	464b      	mov	r3, r9
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	d400      	bmi.n	8001924 <__aeabi_dsub+0x124>
 8001922:	e0de      	b.n	8001ae2 <__aeabi_dsub+0x2e2>
 8001924:	4641      	mov	r1, r8
 8001926:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <__aeabi_dsub+0x358>)
 8001928:	3101      	adds	r1, #1
 800192a:	4299      	cmp	r1, r3
 800192c:	d100      	bne.n	8001930 <__aeabi_dsub+0x130>
 800192e:	e0e7      	b.n	8001b00 <__aeabi_dsub+0x300>
 8001930:	464b      	mov	r3, r9
 8001932:	488a      	ldr	r0, [pc, #552]	; (8001b5c <__aeabi_dsub+0x35c>)
 8001934:	08e4      	lsrs	r4, r4, #3
 8001936:	4003      	ands	r3, r0
 8001938:	0018      	movs	r0, r3
 800193a:	0549      	lsls	r1, r1, #21
 800193c:	075b      	lsls	r3, r3, #29
 800193e:	0240      	lsls	r0, r0, #9
 8001940:	4323      	orrs	r3, r4
 8001942:	0d4a      	lsrs	r2, r1, #21
 8001944:	0b04      	lsrs	r4, r0, #12
 8001946:	0512      	lsls	r2, r2, #20
 8001948:	07ed      	lsls	r5, r5, #31
 800194a:	4322      	orrs	r2, r4
 800194c:	432a      	orrs	r2, r5
 800194e:	0018      	movs	r0, r3
 8001950:	0011      	movs	r1, r2
 8001952:	bcf0      	pop	{r4, r5, r6, r7}
 8001954:	46bb      	mov	fp, r7
 8001956:	46b2      	mov	sl, r6
 8001958:	46a9      	mov	r9, r5
 800195a:	46a0      	mov	r8, r4
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195e:	4642      	mov	r2, r8
 8001960:	1a12      	subs	r2, r2, r0
 8001962:	2a00      	cmp	r2, #0
 8001964:	dd52      	ble.n	8001a0c <__aeabi_dsub+0x20c>
 8001966:	2800      	cmp	r0, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dsub+0x16c>
 800196a:	e09c      	b.n	8001aa6 <__aeabi_dsub+0x2a6>
 800196c:	45a0      	cmp	r8, r4
 800196e:	d100      	bne.n	8001972 <__aeabi_dsub+0x172>
 8001970:	e0ca      	b.n	8001b08 <__aeabi_dsub+0x308>
 8001972:	2080      	movs	r0, #128	; 0x80
 8001974:	0400      	lsls	r0, r0, #16
 8001976:	4301      	orrs	r1, r0
 8001978:	2a38      	cmp	r2, #56	; 0x38
 800197a:	dd00      	ble.n	800197e <__aeabi_dsub+0x17e>
 800197c:	e149      	b.n	8001c12 <__aeabi_dsub+0x412>
 800197e:	2a1f      	cmp	r2, #31
 8001980:	dc00      	bgt.n	8001984 <__aeabi_dsub+0x184>
 8001982:	e197      	b.n	8001cb4 <__aeabi_dsub+0x4b4>
 8001984:	0010      	movs	r0, r2
 8001986:	000e      	movs	r6, r1
 8001988:	3820      	subs	r0, #32
 800198a:	40c6      	lsrs	r6, r0
 800198c:	2a20      	cmp	r2, #32
 800198e:	d004      	beq.n	800199a <__aeabi_dsub+0x19a>
 8001990:	2040      	movs	r0, #64	; 0x40
 8001992:	1a82      	subs	r2, r0, r2
 8001994:	4091      	lsls	r1, r2
 8001996:	430f      	orrs	r7, r1
 8001998:	46b9      	mov	r9, r7
 800199a:	464c      	mov	r4, r9
 800199c:	1e62      	subs	r2, r4, #1
 800199e:	4194      	sbcs	r4, r2
 80019a0:	4334      	orrs	r4, r6
 80019a2:	e13a      	b.n	8001c1a <__aeabi_dsub+0x41a>
 80019a4:	000a      	movs	r2, r1
 80019a6:	433a      	orrs	r2, r7
 80019a8:	d028      	beq.n	80019fc <__aeabi_dsub+0x1fc>
 80019aa:	46b3      	mov	fp, r6
 80019ac:	42b5      	cmp	r5, r6
 80019ae:	d02b      	beq.n	8001a08 <__aeabi_dsub+0x208>
 80019b0:	4a6b      	ldr	r2, [pc, #428]	; (8001b60 <__aeabi_dsub+0x360>)
 80019b2:	4442      	add	r2, r8
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d05d      	beq.n	8001a74 <__aeabi_dsub+0x274>
 80019b8:	4642      	mov	r2, r8
 80019ba:	4644      	mov	r4, r8
 80019bc:	1a82      	subs	r2, r0, r2
 80019be:	2c00      	cmp	r4, #0
 80019c0:	d000      	beq.n	80019c4 <__aeabi_dsub+0x1c4>
 80019c2:	e0f5      	b.n	8001bb0 <__aeabi_dsub+0x3b0>
 80019c4:	4665      	mov	r5, ip
 80019c6:	431d      	orrs	r5, r3
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x1cc>
 80019ca:	e19c      	b.n	8001d06 <__aeabi_dsub+0x506>
 80019cc:	1e55      	subs	r5, r2, #1
 80019ce:	2a01      	cmp	r2, #1
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x1d4>
 80019d2:	e1fb      	b.n	8001dcc <__aeabi_dsub+0x5cc>
 80019d4:	4c60      	ldr	r4, [pc, #384]	; (8001b58 <__aeabi_dsub+0x358>)
 80019d6:	42a2      	cmp	r2, r4
 80019d8:	d100      	bne.n	80019dc <__aeabi_dsub+0x1dc>
 80019da:	e1bd      	b.n	8001d58 <__aeabi_dsub+0x558>
 80019dc:	002a      	movs	r2, r5
 80019de:	e0f0      	b.n	8001bc2 <__aeabi_dsub+0x3c2>
 80019e0:	0008      	movs	r0, r1
 80019e2:	4338      	orrs	r0, r7
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x1e8>
 80019e6:	e0c3      	b.n	8001b70 <__aeabi_dsub+0x370>
 80019e8:	1e50      	subs	r0, r2, #1
 80019ea:	2a01      	cmp	r2, #1
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x1f0>
 80019ee:	e1a8      	b.n	8001d42 <__aeabi_dsub+0x542>
 80019f0:	4c59      	ldr	r4, [pc, #356]	; (8001b58 <__aeabi_dsub+0x358>)
 80019f2:	42a2      	cmp	r2, r4
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dsub+0x1f8>
 80019f6:	e087      	b.n	8001b08 <__aeabi_dsub+0x308>
 80019f8:	0002      	movs	r2, r0
 80019fa:	e736      	b.n	800186a <__aeabi_dsub+0x6a>
 80019fc:	2201      	movs	r2, #1
 80019fe:	4056      	eors	r6, r2
 8001a00:	46b3      	mov	fp, r6
 8001a02:	42b5      	cmp	r5, r6
 8001a04:	d000      	beq.n	8001a08 <__aeabi_dsub+0x208>
 8001a06:	e721      	b.n	800184c <__aeabi_dsub+0x4c>
 8001a08:	4a55      	ldr	r2, [pc, #340]	; (8001b60 <__aeabi_dsub+0x360>)
 8001a0a:	4442      	add	r2, r8
 8001a0c:	2a00      	cmp	r2, #0
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x212>
 8001a10:	e0b5      	b.n	8001b7e <__aeabi_dsub+0x37e>
 8001a12:	4642      	mov	r2, r8
 8001a14:	4644      	mov	r4, r8
 8001a16:	1a82      	subs	r2, r0, r2
 8001a18:	2c00      	cmp	r4, #0
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x21e>
 8001a1c:	e138      	b.n	8001c90 <__aeabi_dsub+0x490>
 8001a1e:	4e4e      	ldr	r6, [pc, #312]	; (8001b58 <__aeabi_dsub+0x358>)
 8001a20:	42b0      	cmp	r0, r6
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x226>
 8001a24:	e1de      	b.n	8001de4 <__aeabi_dsub+0x5e4>
 8001a26:	2680      	movs	r6, #128	; 0x80
 8001a28:	4664      	mov	r4, ip
 8001a2a:	0436      	lsls	r6, r6, #16
 8001a2c:	4334      	orrs	r4, r6
 8001a2e:	46a4      	mov	ip, r4
 8001a30:	2a38      	cmp	r2, #56	; 0x38
 8001a32:	dd00      	ble.n	8001a36 <__aeabi_dsub+0x236>
 8001a34:	e196      	b.n	8001d64 <__aeabi_dsub+0x564>
 8001a36:	2a1f      	cmp	r2, #31
 8001a38:	dd00      	ble.n	8001a3c <__aeabi_dsub+0x23c>
 8001a3a:	e224      	b.n	8001e86 <__aeabi_dsub+0x686>
 8001a3c:	2620      	movs	r6, #32
 8001a3e:	1ab4      	subs	r4, r6, r2
 8001a40:	46a2      	mov	sl, r4
 8001a42:	4664      	mov	r4, ip
 8001a44:	4656      	mov	r6, sl
 8001a46:	40b4      	lsls	r4, r6
 8001a48:	46a1      	mov	r9, r4
 8001a4a:	001c      	movs	r4, r3
 8001a4c:	464e      	mov	r6, r9
 8001a4e:	40d4      	lsrs	r4, r2
 8001a50:	4326      	orrs	r6, r4
 8001a52:	0034      	movs	r4, r6
 8001a54:	4656      	mov	r6, sl
 8001a56:	40b3      	lsls	r3, r6
 8001a58:	1e5e      	subs	r6, r3, #1
 8001a5a:	41b3      	sbcs	r3, r6
 8001a5c:	431c      	orrs	r4, r3
 8001a5e:	4663      	mov	r3, ip
 8001a60:	40d3      	lsrs	r3, r2
 8001a62:	18c9      	adds	r1, r1, r3
 8001a64:	19e4      	adds	r4, r4, r7
 8001a66:	42bc      	cmp	r4, r7
 8001a68:	41bf      	sbcs	r7, r7
 8001a6a:	427f      	negs	r7, r7
 8001a6c:	46b9      	mov	r9, r7
 8001a6e:	4680      	mov	r8, r0
 8001a70:	4489      	add	r9, r1
 8001a72:	e0d8      	b.n	8001c26 <__aeabi_dsub+0x426>
 8001a74:	4640      	mov	r0, r8
 8001a76:	4c3b      	ldr	r4, [pc, #236]	; (8001b64 <__aeabi_dsub+0x364>)
 8001a78:	3001      	adds	r0, #1
 8001a7a:	4220      	tst	r0, r4
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dsub+0x280>
 8001a7e:	e0b4      	b.n	8001bea <__aeabi_dsub+0x3ea>
 8001a80:	4640      	mov	r0, r8
 8001a82:	2800      	cmp	r0, #0
 8001a84:	d000      	beq.n	8001a88 <__aeabi_dsub+0x288>
 8001a86:	e144      	b.n	8001d12 <__aeabi_dsub+0x512>
 8001a88:	4660      	mov	r0, ip
 8001a8a:	4318      	orrs	r0, r3
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x290>
 8001a8e:	e190      	b.n	8001db2 <__aeabi_dsub+0x5b2>
 8001a90:	0008      	movs	r0, r1
 8001a92:	4338      	orrs	r0, r7
 8001a94:	d000      	beq.n	8001a98 <__aeabi_dsub+0x298>
 8001a96:	e1aa      	b.n	8001dee <__aeabi_dsub+0x5ee>
 8001a98:	4661      	mov	r1, ip
 8001a9a:	08db      	lsrs	r3, r3, #3
 8001a9c:	0749      	lsls	r1, r1, #29
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	4661      	mov	r1, ip
 8001aa2:	08cc      	lsrs	r4, r1, #3
 8001aa4:	e027      	b.n	8001af6 <__aeabi_dsub+0x2f6>
 8001aa6:	0008      	movs	r0, r1
 8001aa8:	4338      	orrs	r0, r7
 8001aaa:	d061      	beq.n	8001b70 <__aeabi_dsub+0x370>
 8001aac:	1e50      	subs	r0, r2, #1
 8001aae:	2a01      	cmp	r2, #1
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x2b4>
 8001ab2:	e139      	b.n	8001d28 <__aeabi_dsub+0x528>
 8001ab4:	42a2      	cmp	r2, r4
 8001ab6:	d027      	beq.n	8001b08 <__aeabi_dsub+0x308>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	e75d      	b.n	8001978 <__aeabi_dsub+0x178>
 8001abc:	0002      	movs	r2, r0
 8001abe:	391f      	subs	r1, #31
 8001ac0:	40ca      	lsrs	r2, r1
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d003      	beq.n	8001ad0 <__aeabi_dsub+0x2d0>
 8001ac8:	2240      	movs	r2, #64	; 0x40
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	4098      	lsls	r0, r3
 8001ace:	4304      	orrs	r4, r0
 8001ad0:	1e63      	subs	r3, r4, #1
 8001ad2:	419c      	sbcs	r4, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	4699      	mov	r9, r3
 8001ad8:	4698      	mov	r8, r3
 8001ada:	430c      	orrs	r4, r1
 8001adc:	0763      	lsls	r3, r4, #29
 8001ade:	d000      	beq.n	8001ae2 <__aeabi_dsub+0x2e2>
 8001ae0:	e712      	b.n	8001908 <__aeabi_dsub+0x108>
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	464a      	mov	r2, r9
 8001ae6:	08e4      	lsrs	r4, r4, #3
 8001ae8:	075b      	lsls	r3, r3, #29
 8001aea:	4323      	orrs	r3, r4
 8001aec:	08d4      	lsrs	r4, r2, #3
 8001aee:	4642      	mov	r2, r8
 8001af0:	4919      	ldr	r1, [pc, #100]	; (8001b58 <__aeabi_dsub+0x358>)
 8001af2:	428a      	cmp	r2, r1
 8001af4:	d00e      	beq.n	8001b14 <__aeabi_dsub+0x314>
 8001af6:	0324      	lsls	r4, r4, #12
 8001af8:	0552      	lsls	r2, r2, #21
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d52      	lsrs	r2, r2, #21
 8001afe:	e722      	b.n	8001946 <__aeabi_dsub+0x146>
 8001b00:	000a      	movs	r2, r1
 8001b02:	2400      	movs	r4, #0
 8001b04:	2300      	movs	r3, #0
 8001b06:	e71e      	b.n	8001946 <__aeabi_dsub+0x146>
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	4662      	mov	r2, ip
 8001b0c:	0752      	lsls	r2, r2, #29
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	4662      	mov	r2, ip
 8001b12:	08d4      	lsrs	r4, r2, #3
 8001b14:	001a      	movs	r2, r3
 8001b16:	4322      	orrs	r2, r4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x31c>
 8001b1a:	e1fc      	b.n	8001f16 <__aeabi_dsub+0x716>
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	0312      	lsls	r2, r2, #12
 8001b20:	4314      	orrs	r4, r2
 8001b22:	0324      	lsls	r4, r4, #12
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <__aeabi_dsub+0x358>)
 8001b26:	0b24      	lsrs	r4, r4, #12
 8001b28:	e70d      	b.n	8001946 <__aeabi_dsub+0x146>
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	f000 fa86 	bl	800203c <__clzsi2>
 8001b30:	0001      	movs	r1, r0
 8001b32:	3118      	adds	r1, #24
 8001b34:	291f      	cmp	r1, #31
 8001b36:	dc00      	bgt.n	8001b3a <__aeabi_dsub+0x33a>
 8001b38:	e6c4      	b.n	80018c4 <__aeabi_dsub+0xc4>
 8001b3a:	3808      	subs	r0, #8
 8001b3c:	4084      	lsls	r4, r0
 8001b3e:	4643      	mov	r3, r8
 8001b40:	0020      	movs	r0, r4
 8001b42:	2400      	movs	r4, #0
 8001b44:	4588      	cmp	r8, r1
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dsub+0x34a>
 8001b48:	e6c8      	b.n	80018dc <__aeabi_dsub+0xdc>
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__aeabi_dsub+0x35c>)
 8001b4c:	1a5b      	subs	r3, r3, r1
 8001b4e:	4010      	ands	r0, r2
 8001b50:	4698      	mov	r8, r3
 8001b52:	4681      	mov	r9, r0
 8001b54:	e6d6      	b.n	8001904 <__aeabi_dsub+0x104>
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	000007ff 	.word	0x000007ff
 8001b5c:	ff7fffff 	.word	0xff7fffff
 8001b60:	fffff801 	.word	0xfffff801
 8001b64:	000007fe 	.word	0x000007fe
 8001b68:	430f      	orrs	r7, r1
 8001b6a:	1e7a      	subs	r2, r7, #1
 8001b6c:	4197      	sbcs	r7, r2
 8001b6e:	e691      	b.n	8001894 <__aeabi_dsub+0x94>
 8001b70:	4661      	mov	r1, ip
 8001b72:	08db      	lsrs	r3, r3, #3
 8001b74:	0749      	lsls	r1, r1, #29
 8001b76:	430b      	orrs	r3, r1
 8001b78:	4661      	mov	r1, ip
 8001b7a:	08cc      	lsrs	r4, r1, #3
 8001b7c:	e7b8      	b.n	8001af0 <__aeabi_dsub+0x2f0>
 8001b7e:	4640      	mov	r0, r8
 8001b80:	4cd3      	ldr	r4, [pc, #844]	; (8001ed0 <__aeabi_dsub+0x6d0>)
 8001b82:	3001      	adds	r0, #1
 8001b84:	4220      	tst	r0, r4
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x38a>
 8001b88:	e0a2      	b.n	8001cd0 <__aeabi_dsub+0x4d0>
 8001b8a:	4640      	mov	r0, r8
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d000      	beq.n	8001b92 <__aeabi_dsub+0x392>
 8001b90:	e101      	b.n	8001d96 <__aeabi_dsub+0x596>
 8001b92:	4660      	mov	r0, ip
 8001b94:	4318      	orrs	r0, r3
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dsub+0x39a>
 8001b98:	e15e      	b.n	8001e58 <__aeabi_dsub+0x658>
 8001b9a:	0008      	movs	r0, r1
 8001b9c:	4338      	orrs	r0, r7
 8001b9e:	d000      	beq.n	8001ba2 <__aeabi_dsub+0x3a2>
 8001ba0:	e15f      	b.n	8001e62 <__aeabi_dsub+0x662>
 8001ba2:	4661      	mov	r1, ip
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	0749      	lsls	r1, r1, #29
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	4661      	mov	r1, ip
 8001bac:	08cc      	lsrs	r4, r1, #3
 8001bae:	e7a2      	b.n	8001af6 <__aeabi_dsub+0x2f6>
 8001bb0:	4dc8      	ldr	r5, [pc, #800]	; (8001ed4 <__aeabi_dsub+0x6d4>)
 8001bb2:	42a8      	cmp	r0, r5
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x3b8>
 8001bb6:	e0cf      	b.n	8001d58 <__aeabi_dsub+0x558>
 8001bb8:	2580      	movs	r5, #128	; 0x80
 8001bba:	4664      	mov	r4, ip
 8001bbc:	042d      	lsls	r5, r5, #16
 8001bbe:	432c      	orrs	r4, r5
 8001bc0:	46a4      	mov	ip, r4
 8001bc2:	2a38      	cmp	r2, #56	; 0x38
 8001bc4:	dc56      	bgt.n	8001c74 <__aeabi_dsub+0x474>
 8001bc6:	2a1f      	cmp	r2, #31
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dsub+0x3cc>
 8001bca:	e0d1      	b.n	8001d70 <__aeabi_dsub+0x570>
 8001bcc:	2520      	movs	r5, #32
 8001bce:	001e      	movs	r6, r3
 8001bd0:	1aad      	subs	r5, r5, r2
 8001bd2:	4664      	mov	r4, ip
 8001bd4:	40ab      	lsls	r3, r5
 8001bd6:	40ac      	lsls	r4, r5
 8001bd8:	40d6      	lsrs	r6, r2
 8001bda:	1e5d      	subs	r5, r3, #1
 8001bdc:	41ab      	sbcs	r3, r5
 8001bde:	4334      	orrs	r4, r6
 8001be0:	4323      	orrs	r3, r4
 8001be2:	4664      	mov	r4, ip
 8001be4:	40d4      	lsrs	r4, r2
 8001be6:	1b09      	subs	r1, r1, r4
 8001be8:	e049      	b.n	8001c7e <__aeabi_dsub+0x47e>
 8001bea:	4660      	mov	r0, ip
 8001bec:	1bdc      	subs	r4, r3, r7
 8001bee:	1a46      	subs	r6, r0, r1
 8001bf0:	42a3      	cmp	r3, r4
 8001bf2:	4180      	sbcs	r0, r0
 8001bf4:	4240      	negs	r0, r0
 8001bf6:	4681      	mov	r9, r0
 8001bf8:	0030      	movs	r0, r6
 8001bfa:	464e      	mov	r6, r9
 8001bfc:	1b80      	subs	r0, r0, r6
 8001bfe:	4681      	mov	r9, r0
 8001c00:	0200      	lsls	r0, r0, #8
 8001c02:	d476      	bmi.n	8001cf2 <__aeabi_dsub+0x4f2>
 8001c04:	464b      	mov	r3, r9
 8001c06:	4323      	orrs	r3, r4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dsub+0x40c>
 8001c0a:	e652      	b.n	80018b2 <__aeabi_dsub+0xb2>
 8001c0c:	2400      	movs	r4, #0
 8001c0e:	2500      	movs	r5, #0
 8001c10:	e771      	b.n	8001af6 <__aeabi_dsub+0x2f6>
 8001c12:	4339      	orrs	r1, r7
 8001c14:	000c      	movs	r4, r1
 8001c16:	1e62      	subs	r2, r4, #1
 8001c18:	4194      	sbcs	r4, r2
 8001c1a:	18e4      	adds	r4, r4, r3
 8001c1c:	429c      	cmp	r4, r3
 8001c1e:	419b      	sbcs	r3, r3
 8001c20:	425b      	negs	r3, r3
 8001c22:	4463      	add	r3, ip
 8001c24:	4699      	mov	r9, r3
 8001c26:	464b      	mov	r3, r9
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	d400      	bmi.n	8001c2e <__aeabi_dsub+0x42e>
 8001c2c:	e756      	b.n	8001adc <__aeabi_dsub+0x2dc>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	469c      	mov	ip, r3
 8001c32:	4ba8      	ldr	r3, [pc, #672]	; (8001ed4 <__aeabi_dsub+0x6d4>)
 8001c34:	44e0      	add	r8, ip
 8001c36:	4598      	cmp	r8, r3
 8001c38:	d038      	beq.n	8001cac <__aeabi_dsub+0x4ac>
 8001c3a:	464b      	mov	r3, r9
 8001c3c:	48a6      	ldr	r0, [pc, #664]	; (8001ed8 <__aeabi_dsub+0x6d8>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4003      	ands	r3, r0
 8001c42:	0018      	movs	r0, r3
 8001c44:	0863      	lsrs	r3, r4, #1
 8001c46:	4014      	ands	r4, r2
 8001c48:	431c      	orrs	r4, r3
 8001c4a:	07c3      	lsls	r3, r0, #31
 8001c4c:	431c      	orrs	r4, r3
 8001c4e:	0843      	lsrs	r3, r0, #1
 8001c50:	4699      	mov	r9, r3
 8001c52:	e657      	b.n	8001904 <__aeabi_dsub+0x104>
 8001c54:	0010      	movs	r0, r2
 8001c56:	000e      	movs	r6, r1
 8001c58:	3820      	subs	r0, #32
 8001c5a:	40c6      	lsrs	r6, r0
 8001c5c:	2a20      	cmp	r2, #32
 8001c5e:	d004      	beq.n	8001c6a <__aeabi_dsub+0x46a>
 8001c60:	2040      	movs	r0, #64	; 0x40
 8001c62:	1a82      	subs	r2, r0, r2
 8001c64:	4091      	lsls	r1, r2
 8001c66:	430f      	orrs	r7, r1
 8001c68:	46b9      	mov	r9, r7
 8001c6a:	464f      	mov	r7, r9
 8001c6c:	1e7a      	subs	r2, r7, #1
 8001c6e:	4197      	sbcs	r7, r2
 8001c70:	4337      	orrs	r7, r6
 8001c72:	e60f      	b.n	8001894 <__aeabi_dsub+0x94>
 8001c74:	4662      	mov	r2, ip
 8001c76:	431a      	orrs	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	1e5a      	subs	r2, r3, #1
 8001c7c:	4193      	sbcs	r3, r2
 8001c7e:	1afc      	subs	r4, r7, r3
 8001c80:	42a7      	cmp	r7, r4
 8001c82:	41bf      	sbcs	r7, r7
 8001c84:	427f      	negs	r7, r7
 8001c86:	1bcb      	subs	r3, r1, r7
 8001c88:	4699      	mov	r9, r3
 8001c8a:	465d      	mov	r5, fp
 8001c8c:	4680      	mov	r8, r0
 8001c8e:	e608      	b.n	80018a2 <__aeabi_dsub+0xa2>
 8001c90:	4666      	mov	r6, ip
 8001c92:	431e      	orrs	r6, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x498>
 8001c96:	e0be      	b.n	8001e16 <__aeabi_dsub+0x616>
 8001c98:	1e56      	subs	r6, r2, #1
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x4a0>
 8001c9e:	e109      	b.n	8001eb4 <__aeabi_dsub+0x6b4>
 8001ca0:	4c8c      	ldr	r4, [pc, #560]	; (8001ed4 <__aeabi_dsub+0x6d4>)
 8001ca2:	42a2      	cmp	r2, r4
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x4a8>
 8001ca6:	e119      	b.n	8001edc <__aeabi_dsub+0x6dc>
 8001ca8:	0032      	movs	r2, r6
 8001caa:	e6c1      	b.n	8001a30 <__aeabi_dsub+0x230>
 8001cac:	4642      	mov	r2, r8
 8001cae:	2400      	movs	r4, #0
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e648      	b.n	8001946 <__aeabi_dsub+0x146>
 8001cb4:	2020      	movs	r0, #32
 8001cb6:	000c      	movs	r4, r1
 8001cb8:	1a80      	subs	r0, r0, r2
 8001cba:	003e      	movs	r6, r7
 8001cbc:	4087      	lsls	r7, r0
 8001cbe:	4084      	lsls	r4, r0
 8001cc0:	40d6      	lsrs	r6, r2
 8001cc2:	1e78      	subs	r0, r7, #1
 8001cc4:	4187      	sbcs	r7, r0
 8001cc6:	40d1      	lsrs	r1, r2
 8001cc8:	4334      	orrs	r4, r6
 8001cca:	433c      	orrs	r4, r7
 8001ccc:	448c      	add	ip, r1
 8001cce:	e7a4      	b.n	8001c1a <__aeabi_dsub+0x41a>
 8001cd0:	4a80      	ldr	r2, [pc, #512]	; (8001ed4 <__aeabi_dsub+0x6d4>)
 8001cd2:	4290      	cmp	r0, r2
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x4d8>
 8001cd6:	e0e9      	b.n	8001eac <__aeabi_dsub+0x6ac>
 8001cd8:	19df      	adds	r7, r3, r7
 8001cda:	429f      	cmp	r7, r3
 8001cdc:	419b      	sbcs	r3, r3
 8001cde:	4461      	add	r1, ip
 8001ce0:	425b      	negs	r3, r3
 8001ce2:	18c9      	adds	r1, r1, r3
 8001ce4:	07cc      	lsls	r4, r1, #31
 8001ce6:	087f      	lsrs	r7, r7, #1
 8001ce8:	084b      	lsrs	r3, r1, #1
 8001cea:	4699      	mov	r9, r3
 8001cec:	4680      	mov	r8, r0
 8001cee:	433c      	orrs	r4, r7
 8001cf0:	e6f4      	b.n	8001adc <__aeabi_dsub+0x2dc>
 8001cf2:	1afc      	subs	r4, r7, r3
 8001cf4:	42a7      	cmp	r7, r4
 8001cf6:	41bf      	sbcs	r7, r7
 8001cf8:	4663      	mov	r3, ip
 8001cfa:	427f      	negs	r7, r7
 8001cfc:	1ac9      	subs	r1, r1, r3
 8001cfe:	1bcb      	subs	r3, r1, r7
 8001d00:	4699      	mov	r9, r3
 8001d02:	465d      	mov	r5, fp
 8001d04:	e5d5      	b.n	80018b2 <__aeabi_dsub+0xb2>
 8001d06:	08ff      	lsrs	r7, r7, #3
 8001d08:	074b      	lsls	r3, r1, #29
 8001d0a:	465d      	mov	r5, fp
 8001d0c:	433b      	orrs	r3, r7
 8001d0e:	08cc      	lsrs	r4, r1, #3
 8001d10:	e6ee      	b.n	8001af0 <__aeabi_dsub+0x2f0>
 8001d12:	4662      	mov	r2, ip
 8001d14:	431a      	orrs	r2, r3
 8001d16:	d000      	beq.n	8001d1a <__aeabi_dsub+0x51a>
 8001d18:	e082      	b.n	8001e20 <__aeabi_dsub+0x620>
 8001d1a:	000b      	movs	r3, r1
 8001d1c:	433b      	orrs	r3, r7
 8001d1e:	d11b      	bne.n	8001d58 <__aeabi_dsub+0x558>
 8001d20:	2480      	movs	r4, #128	; 0x80
 8001d22:	2500      	movs	r5, #0
 8001d24:	0324      	lsls	r4, r4, #12
 8001d26:	e6f9      	b.n	8001b1c <__aeabi_dsub+0x31c>
 8001d28:	19dc      	adds	r4, r3, r7
 8001d2a:	429c      	cmp	r4, r3
 8001d2c:	419b      	sbcs	r3, r3
 8001d2e:	4461      	add	r1, ip
 8001d30:	4689      	mov	r9, r1
 8001d32:	425b      	negs	r3, r3
 8001d34:	4499      	add	r9, r3
 8001d36:	464b      	mov	r3, r9
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	d444      	bmi.n	8001dc6 <__aeabi_dsub+0x5c6>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	4698      	mov	r8, r3
 8001d40:	e6cc      	b.n	8001adc <__aeabi_dsub+0x2dc>
 8001d42:	1bdc      	subs	r4, r3, r7
 8001d44:	4662      	mov	r2, ip
 8001d46:	42a3      	cmp	r3, r4
 8001d48:	419b      	sbcs	r3, r3
 8001d4a:	1a51      	subs	r1, r2, r1
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	1acb      	subs	r3, r1, r3
 8001d50:	4699      	mov	r9, r3
 8001d52:	2301      	movs	r3, #1
 8001d54:	4698      	mov	r8, r3
 8001d56:	e5a4      	b.n	80018a2 <__aeabi_dsub+0xa2>
 8001d58:	08ff      	lsrs	r7, r7, #3
 8001d5a:	074b      	lsls	r3, r1, #29
 8001d5c:	465d      	mov	r5, fp
 8001d5e:	433b      	orrs	r3, r7
 8001d60:	08cc      	lsrs	r4, r1, #3
 8001d62:	e6d7      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001d64:	4662      	mov	r2, ip
 8001d66:	431a      	orrs	r2, r3
 8001d68:	0014      	movs	r4, r2
 8001d6a:	1e63      	subs	r3, r4, #1
 8001d6c:	419c      	sbcs	r4, r3
 8001d6e:	e679      	b.n	8001a64 <__aeabi_dsub+0x264>
 8001d70:	0015      	movs	r5, r2
 8001d72:	4664      	mov	r4, ip
 8001d74:	3d20      	subs	r5, #32
 8001d76:	40ec      	lsrs	r4, r5
 8001d78:	46a0      	mov	r8, r4
 8001d7a:	2a20      	cmp	r2, #32
 8001d7c:	d005      	beq.n	8001d8a <__aeabi_dsub+0x58a>
 8001d7e:	2540      	movs	r5, #64	; 0x40
 8001d80:	4664      	mov	r4, ip
 8001d82:	1aaa      	subs	r2, r5, r2
 8001d84:	4094      	lsls	r4, r2
 8001d86:	4323      	orrs	r3, r4
 8001d88:	469a      	mov	sl, r3
 8001d8a:	4654      	mov	r4, sl
 8001d8c:	1e63      	subs	r3, r4, #1
 8001d8e:	419c      	sbcs	r4, r3
 8001d90:	4643      	mov	r3, r8
 8001d92:	4323      	orrs	r3, r4
 8001d94:	e773      	b.n	8001c7e <__aeabi_dsub+0x47e>
 8001d96:	4662      	mov	r2, ip
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	d023      	beq.n	8001de4 <__aeabi_dsub+0x5e4>
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d000      	beq.n	8001da4 <__aeabi_dsub+0x5a4>
 8001da2:	e0a0      	b.n	8001ee6 <__aeabi_dsub+0x6e6>
 8001da4:	4662      	mov	r2, ip
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	0752      	lsls	r2, r2, #29
 8001daa:	4313      	orrs	r3, r2
 8001dac:	4662      	mov	r2, ip
 8001dae:	08d4      	lsrs	r4, r2, #3
 8001db0:	e6b0      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001db2:	000b      	movs	r3, r1
 8001db4:	433b      	orrs	r3, r7
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x5ba>
 8001db8:	e728      	b.n	8001c0c <__aeabi_dsub+0x40c>
 8001dba:	08ff      	lsrs	r7, r7, #3
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	465d      	mov	r5, fp
 8001dc0:	433b      	orrs	r3, r7
 8001dc2:	08cc      	lsrs	r4, r1, #3
 8001dc4:	e697      	b.n	8001af6 <__aeabi_dsub+0x2f6>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	4698      	mov	r8, r3
 8001dca:	e736      	b.n	8001c3a <__aeabi_dsub+0x43a>
 8001dcc:	1afc      	subs	r4, r7, r3
 8001dce:	42a7      	cmp	r7, r4
 8001dd0:	41bf      	sbcs	r7, r7
 8001dd2:	4663      	mov	r3, ip
 8001dd4:	427f      	negs	r7, r7
 8001dd6:	1ac9      	subs	r1, r1, r3
 8001dd8:	1bcb      	subs	r3, r1, r7
 8001dda:	4699      	mov	r9, r3
 8001ddc:	2301      	movs	r3, #1
 8001dde:	465d      	mov	r5, fp
 8001de0:	4698      	mov	r8, r3
 8001de2:	e55e      	b.n	80018a2 <__aeabi_dsub+0xa2>
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	08ff      	lsrs	r7, r7, #3
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e692      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001dee:	1bdc      	subs	r4, r3, r7
 8001df0:	4660      	mov	r0, ip
 8001df2:	42a3      	cmp	r3, r4
 8001df4:	41b6      	sbcs	r6, r6
 8001df6:	1a40      	subs	r0, r0, r1
 8001df8:	4276      	negs	r6, r6
 8001dfa:	1b80      	subs	r0, r0, r6
 8001dfc:	4681      	mov	r9, r0
 8001dfe:	0200      	lsls	r0, r0, #8
 8001e00:	d560      	bpl.n	8001ec4 <__aeabi_dsub+0x6c4>
 8001e02:	1afc      	subs	r4, r7, r3
 8001e04:	42a7      	cmp	r7, r4
 8001e06:	41bf      	sbcs	r7, r7
 8001e08:	4663      	mov	r3, ip
 8001e0a:	427f      	negs	r7, r7
 8001e0c:	1ac9      	subs	r1, r1, r3
 8001e0e:	1bcb      	subs	r3, r1, r7
 8001e10:	4699      	mov	r9, r3
 8001e12:	465d      	mov	r5, fp
 8001e14:	e576      	b.n	8001904 <__aeabi_dsub+0x104>
 8001e16:	08ff      	lsrs	r7, r7, #3
 8001e18:	074b      	lsls	r3, r1, #29
 8001e1a:	433b      	orrs	r3, r7
 8001e1c:	08cc      	lsrs	r4, r1, #3
 8001e1e:	e667      	b.n	8001af0 <__aeabi_dsub+0x2f0>
 8001e20:	000a      	movs	r2, r1
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	433a      	orrs	r2, r7
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x62a>
 8001e28:	e66f      	b.n	8001b0a <__aeabi_dsub+0x30a>
 8001e2a:	4662      	mov	r2, ip
 8001e2c:	0752      	lsls	r2, r2, #29
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	4662      	mov	r2, ip
 8001e32:	08d4      	lsrs	r4, r2, #3
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	0312      	lsls	r2, r2, #12
 8001e38:	4214      	tst	r4, r2
 8001e3a:	d007      	beq.n	8001e4c <__aeabi_dsub+0x64c>
 8001e3c:	08c8      	lsrs	r0, r1, #3
 8001e3e:	4210      	tst	r0, r2
 8001e40:	d104      	bne.n	8001e4c <__aeabi_dsub+0x64c>
 8001e42:	465d      	mov	r5, fp
 8001e44:	0004      	movs	r4, r0
 8001e46:	08fb      	lsrs	r3, r7, #3
 8001e48:	0749      	lsls	r1, r1, #29
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	0f5a      	lsrs	r2, r3, #29
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	0752      	lsls	r2, r2, #29
 8001e54:	4313      	orrs	r3, r2
 8001e56:	e65d      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001e58:	074b      	lsls	r3, r1, #29
 8001e5a:	08ff      	lsrs	r7, r7, #3
 8001e5c:	433b      	orrs	r3, r7
 8001e5e:	08cc      	lsrs	r4, r1, #3
 8001e60:	e649      	b.n	8001af6 <__aeabi_dsub+0x2f6>
 8001e62:	19dc      	adds	r4, r3, r7
 8001e64:	429c      	cmp	r4, r3
 8001e66:	419b      	sbcs	r3, r3
 8001e68:	4461      	add	r1, ip
 8001e6a:	4689      	mov	r9, r1
 8001e6c:	425b      	negs	r3, r3
 8001e6e:	4499      	add	r9, r3
 8001e70:	464b      	mov	r3, r9
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	d400      	bmi.n	8001e78 <__aeabi_dsub+0x678>
 8001e76:	e631      	b.n	8001adc <__aeabi_dsub+0x2dc>
 8001e78:	464a      	mov	r2, r9
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <__aeabi_dsub+0x6d8>)
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	2301      	movs	r3, #1
 8001e80:	4691      	mov	r9, r2
 8001e82:	4698      	mov	r8, r3
 8001e84:	e62a      	b.n	8001adc <__aeabi_dsub+0x2dc>
 8001e86:	0016      	movs	r6, r2
 8001e88:	4664      	mov	r4, ip
 8001e8a:	3e20      	subs	r6, #32
 8001e8c:	40f4      	lsrs	r4, r6
 8001e8e:	46a0      	mov	r8, r4
 8001e90:	2a20      	cmp	r2, #32
 8001e92:	d005      	beq.n	8001ea0 <__aeabi_dsub+0x6a0>
 8001e94:	2640      	movs	r6, #64	; 0x40
 8001e96:	4664      	mov	r4, ip
 8001e98:	1ab2      	subs	r2, r6, r2
 8001e9a:	4094      	lsls	r4, r2
 8001e9c:	4323      	orrs	r3, r4
 8001e9e:	469a      	mov	sl, r3
 8001ea0:	4654      	mov	r4, sl
 8001ea2:	1e63      	subs	r3, r4, #1
 8001ea4:	419c      	sbcs	r4, r3
 8001ea6:	4643      	mov	r3, r8
 8001ea8:	431c      	orrs	r4, r3
 8001eaa:	e5db      	b.n	8001a64 <__aeabi_dsub+0x264>
 8001eac:	0002      	movs	r2, r0
 8001eae:	2400      	movs	r4, #0
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e548      	b.n	8001946 <__aeabi_dsub+0x146>
 8001eb4:	19dc      	adds	r4, r3, r7
 8001eb6:	42bc      	cmp	r4, r7
 8001eb8:	41bf      	sbcs	r7, r7
 8001eba:	4461      	add	r1, ip
 8001ebc:	4689      	mov	r9, r1
 8001ebe:	427f      	negs	r7, r7
 8001ec0:	44b9      	add	r9, r7
 8001ec2:	e738      	b.n	8001d36 <__aeabi_dsub+0x536>
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4323      	orrs	r3, r4
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x6cc>
 8001eca:	e69f      	b.n	8001c0c <__aeabi_dsub+0x40c>
 8001ecc:	e606      	b.n	8001adc <__aeabi_dsub+0x2dc>
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	000007fe 	.word	0x000007fe
 8001ed4:	000007ff 	.word	0x000007ff
 8001ed8:	ff7fffff 	.word	0xff7fffff
 8001edc:	08ff      	lsrs	r7, r7, #3
 8001ede:	074b      	lsls	r3, r1, #29
 8001ee0:	433b      	orrs	r3, r7
 8001ee2:	08cc      	lsrs	r4, r1, #3
 8001ee4:	e616      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	0752      	lsls	r2, r2, #29
 8001eec:	4313      	orrs	r3, r2
 8001eee:	4662      	mov	r2, ip
 8001ef0:	08d4      	lsrs	r4, r2, #3
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	0312      	lsls	r2, r2, #12
 8001ef6:	4214      	tst	r4, r2
 8001ef8:	d007      	beq.n	8001f0a <__aeabi_dsub+0x70a>
 8001efa:	08c8      	lsrs	r0, r1, #3
 8001efc:	4210      	tst	r0, r2
 8001efe:	d104      	bne.n	8001f0a <__aeabi_dsub+0x70a>
 8001f00:	465d      	mov	r5, fp
 8001f02:	0004      	movs	r4, r0
 8001f04:	08fb      	lsrs	r3, r7, #3
 8001f06:	0749      	lsls	r1, r1, #29
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	0f5a      	lsrs	r2, r3, #29
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	4313      	orrs	r3, r2
 8001f14:	e5fe      	b.n	8001b14 <__aeabi_dsub+0x314>
 8001f16:	2300      	movs	r3, #0
 8001f18:	4a01      	ldr	r2, [pc, #4]	; (8001f20 <__aeabi_dsub+0x720>)
 8001f1a:	001c      	movs	r4, r3
 8001f1c:	e513      	b.n	8001946 <__aeabi_dsub+0x146>
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	000007ff 	.word	0x000007ff

08001f24 <__aeabi_d2iz>:
 8001f24:	000a      	movs	r2, r1
 8001f26:	b530      	push	{r4, r5, lr}
 8001f28:	4c13      	ldr	r4, [pc, #76]	; (8001f78 <__aeabi_d2iz+0x54>)
 8001f2a:	0053      	lsls	r3, r2, #1
 8001f2c:	0309      	lsls	r1, r1, #12
 8001f2e:	0005      	movs	r5, r0
 8001f30:	0b09      	lsrs	r1, r1, #12
 8001f32:	2000      	movs	r0, #0
 8001f34:	0d5b      	lsrs	r3, r3, #21
 8001f36:	0fd2      	lsrs	r2, r2, #31
 8001f38:	42a3      	cmp	r3, r4
 8001f3a:	dd04      	ble.n	8001f46 <__aeabi_d2iz+0x22>
 8001f3c:	480f      	ldr	r0, [pc, #60]	; (8001f7c <__aeabi_d2iz+0x58>)
 8001f3e:	4283      	cmp	r3, r0
 8001f40:	dd02      	ble.n	8001f48 <__aeabi_d2iz+0x24>
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <__aeabi_d2iz+0x5c>)
 8001f44:	18d0      	adds	r0, r2, r3
 8001f46:	bd30      	pop	{r4, r5, pc}
 8001f48:	2080      	movs	r0, #128	; 0x80
 8001f4a:	0340      	lsls	r0, r0, #13
 8001f4c:	4301      	orrs	r1, r0
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <__aeabi_d2iz+0x60>)
 8001f50:	1ac0      	subs	r0, r0, r3
 8001f52:	281f      	cmp	r0, #31
 8001f54:	dd08      	ble.n	8001f68 <__aeabi_d2iz+0x44>
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <__aeabi_d2iz+0x64>)
 8001f58:	1ac3      	subs	r3, r0, r3
 8001f5a:	40d9      	lsrs	r1, r3
 8001f5c:	000b      	movs	r3, r1
 8001f5e:	4258      	negs	r0, r3
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d1f0      	bne.n	8001f46 <__aeabi_d2iz+0x22>
 8001f64:	0018      	movs	r0, r3
 8001f66:	e7ee      	b.n	8001f46 <__aeabi_d2iz+0x22>
 8001f68:	4c08      	ldr	r4, [pc, #32]	; (8001f8c <__aeabi_d2iz+0x68>)
 8001f6a:	40c5      	lsrs	r5, r0
 8001f6c:	46a4      	mov	ip, r4
 8001f6e:	4463      	add	r3, ip
 8001f70:	4099      	lsls	r1, r3
 8001f72:	000b      	movs	r3, r1
 8001f74:	432b      	orrs	r3, r5
 8001f76:	e7f2      	b.n	8001f5e <__aeabi_d2iz+0x3a>
 8001f78:	000003fe 	.word	0x000003fe
 8001f7c:	0000041d 	.word	0x0000041d
 8001f80:	7fffffff 	.word	0x7fffffff
 8001f84:	00000433 	.word	0x00000433
 8001f88:	00000413 	.word	0x00000413
 8001f8c:	fffffbed 	.word	0xfffffbed

08001f90 <__aeabi_i2d>:
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d016      	beq.n	8001fc4 <__aeabi_i2d+0x34>
 8001f96:	17c3      	asrs	r3, r0, #31
 8001f98:	18c5      	adds	r5, r0, r3
 8001f9a:	405d      	eors	r5, r3
 8001f9c:	0fc4      	lsrs	r4, r0, #31
 8001f9e:	0028      	movs	r0, r5
 8001fa0:	f000 f84c 	bl	800203c <__clzsi2>
 8001fa4:	4a11      	ldr	r2, [pc, #68]	; (8001fec <__aeabi_i2d+0x5c>)
 8001fa6:	1a12      	subs	r2, r2, r0
 8001fa8:	280a      	cmp	r0, #10
 8001faa:	dc16      	bgt.n	8001fda <__aeabi_i2d+0x4a>
 8001fac:	0003      	movs	r3, r0
 8001fae:	002e      	movs	r6, r5
 8001fb0:	3315      	adds	r3, #21
 8001fb2:	409e      	lsls	r6, r3
 8001fb4:	230b      	movs	r3, #11
 8001fb6:	1a18      	subs	r0, r3, r0
 8001fb8:	40c5      	lsrs	r5, r0
 8001fba:	0552      	lsls	r2, r2, #21
 8001fbc:	032d      	lsls	r5, r5, #12
 8001fbe:	0b2d      	lsrs	r5, r5, #12
 8001fc0:	0d53      	lsrs	r3, r2, #21
 8001fc2:	e003      	b.n	8001fcc <__aeabi_i2d+0x3c>
 8001fc4:	2400      	movs	r4, #0
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2500      	movs	r5, #0
 8001fca:	2600      	movs	r6, #0
 8001fcc:	051b      	lsls	r3, r3, #20
 8001fce:	432b      	orrs	r3, r5
 8001fd0:	07e4      	lsls	r4, r4, #31
 8001fd2:	4323      	orrs	r3, r4
 8001fd4:	0030      	movs	r0, r6
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
 8001fda:	380b      	subs	r0, #11
 8001fdc:	4085      	lsls	r5, r0
 8001fde:	0552      	lsls	r2, r2, #21
 8001fe0:	032d      	lsls	r5, r5, #12
 8001fe2:	2600      	movs	r6, #0
 8001fe4:	0b2d      	lsrs	r5, r5, #12
 8001fe6:	0d53      	lsrs	r3, r2, #21
 8001fe8:	e7f0      	b.n	8001fcc <__aeabi_i2d+0x3c>
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	0000041e 	.word	0x0000041e

08001ff0 <__aeabi_ui2d>:
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	1e04      	subs	r4, r0, #0
 8001ff4:	d010      	beq.n	8002018 <__aeabi_ui2d+0x28>
 8001ff6:	f000 f821 	bl	800203c <__clzsi2>
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <__aeabi_ui2d+0x48>)
 8001ffc:	1a1b      	subs	r3, r3, r0
 8001ffe:	280a      	cmp	r0, #10
 8002000:	dc11      	bgt.n	8002026 <__aeabi_ui2d+0x36>
 8002002:	220b      	movs	r2, #11
 8002004:	0021      	movs	r1, r4
 8002006:	1a12      	subs	r2, r2, r0
 8002008:	40d1      	lsrs	r1, r2
 800200a:	3015      	adds	r0, #21
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	055b      	lsls	r3, r3, #21
 8002010:	4084      	lsls	r4, r0
 8002012:	0b12      	lsrs	r2, r2, #12
 8002014:	0d5b      	lsrs	r3, r3, #21
 8002016:	e001      	b.n	800201c <__aeabi_ui2d+0x2c>
 8002018:	2300      	movs	r3, #0
 800201a:	2200      	movs	r2, #0
 800201c:	051b      	lsls	r3, r3, #20
 800201e:	4313      	orrs	r3, r2
 8002020:	0020      	movs	r0, r4
 8002022:	0019      	movs	r1, r3
 8002024:	bd10      	pop	{r4, pc}
 8002026:	0022      	movs	r2, r4
 8002028:	380b      	subs	r0, #11
 800202a:	4082      	lsls	r2, r0
 800202c:	055b      	lsls	r3, r3, #21
 800202e:	0312      	lsls	r2, r2, #12
 8002030:	2400      	movs	r4, #0
 8002032:	0b12      	lsrs	r2, r2, #12
 8002034:	0d5b      	lsrs	r3, r3, #21
 8002036:	e7f1      	b.n	800201c <__aeabi_ui2d+0x2c>
 8002038:	0000041e 	.word	0x0000041e

0800203c <__clzsi2>:
 800203c:	211c      	movs	r1, #28
 800203e:	2301      	movs	r3, #1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	4298      	cmp	r0, r3
 8002044:	d301      	bcc.n	800204a <__clzsi2+0xe>
 8002046:	0c00      	lsrs	r0, r0, #16
 8002048:	3910      	subs	r1, #16
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	4298      	cmp	r0, r3
 800204e:	d301      	bcc.n	8002054 <__clzsi2+0x18>
 8002050:	0a00      	lsrs	r0, r0, #8
 8002052:	3908      	subs	r1, #8
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	4298      	cmp	r0, r3
 8002058:	d301      	bcc.n	800205e <__clzsi2+0x22>
 800205a:	0900      	lsrs	r0, r0, #4
 800205c:	3904      	subs	r1, #4
 800205e:	a202      	add	r2, pc, #8	; (adr r2, 8002068 <__clzsi2+0x2c>)
 8002060:	5c10      	ldrb	r0, [r2, r0]
 8002062:	1840      	adds	r0, r0, r1
 8002064:	4770      	bx	lr
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	02020304 	.word	0x02020304
 800206c:	01010101 	.word	0x01010101
	...

08002078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	double freqency = 0.25; //hz
 800207e:	2200      	movs	r2, #0
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <main+0x120>)
 8002082:	623a      	str	r2, [r7, #32]
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
	double omega = TWO_PI * freqency;
 8002086:	4a45      	ldr	r2, [pc, #276]	; (800219c <main+0x124>)
 8002088:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <main+0x128>)
 800208a:	6a38      	ldr	r0, [r7, #32]
 800208c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800208e:	f7ff f94b 	bl	8001328 <__aeabi_dmul>
 8002092:	0002      	movs	r2, r0
 8002094:	000b      	movs	r3, r1
 8002096:	61ba      	str	r2, [r7, #24]
 8002098:	61fb      	str	r3, [r7, #28]
	double t = 0;
 800209a:	2200      	movs	r2, #0
 800209c:	2300      	movs	r3, #0
 800209e:	62ba      	str	r2, [r7, #40]	; 0x28
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t dt = 10;
 80020a2:	230a      	movs	r3, #10
 80020a4:	617b      	str	r3, [r7, #20]
	duty_cycle = dt+1;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <main+0x12c>)
 80020ac:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ae:	f000 fb21 	bl	80026f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b2:	f000 f883 	bl	80021bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b6:	f000 f957 	bl	8002368 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020ba:	f000 f925 	bl	8002308 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80020be:	f000 f8b9 	bl	8002234 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <main+0x130>)
 80020c4:	2100      	movs	r1, #0
 80020c6:	0018      	movs	r0, r3
 80020c8:	f001 fb34 	bl	8003734 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(motor_dir_GPIO_Port, motor_dir_Pin, GPIO_PIN_RESET);
 80020cc:	2390      	movs	r3, #144	; 0x90
 80020ce:	05db      	lsls	r3, r3, #23
 80020d0:	2200      	movs	r2, #0
 80020d2:	2120      	movs	r1, #32
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fdce 	bl	8002c76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, HAL_GPIO_ReadPin(motor_dir_GPIO_Port, motor_dir_Pin));
 80020da:	2390      	movs	r3, #144	; 0x90
 80020dc:	05db      	lsls	r3, r3, #23
 80020de:	2120      	movs	r1, #32
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 fdab 	bl	8002c3c <HAL_GPIO_ReadPin>
 80020e6:	0003      	movs	r3, r0
 80020e8:	001a      	movs	r2, r3
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <main+0x134>)
 80020ec:	2108      	movs	r1, #8
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 fdc1 	bl	8002c76 <HAL_GPIO_WritePin>

  while (1)
  {
	  t = t + ((double)dt / 1000);
 80020f4:	6978      	ldr	r0, [r7, #20]
 80020f6:	f7ff ff7b 	bl	8001ff0 <__aeabi_ui2d>
 80020fa:	2200      	movs	r2, #0
 80020fc:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <main+0x138>)
 80020fe:	f7fe fd11 	bl	8000b24 <__aeabi_ddiv>
 8002102:	0002      	movs	r2, r0
 8002104:	000b      	movs	r3, r1
 8002106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800210a:	f7fe f9cf 	bl	80004ac <__aeabi_dadd>
 800210e:	0002      	movs	r2, r0
 8002110:	000b      	movs	r3, r1
 8002112:	62ba      	str	r2, [r7, #40]	; 0x28
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
	  double calc_duty_cycle = (tim3_oc_max_value - 1)*(0.25*(sin(omega * t)+0.75));
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <main+0x13c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3b01      	subs	r3, #1
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff ff67 	bl	8001ff0 <__aeabi_ui2d>
 8002122:	0004      	movs	r4, r0
 8002124:	000d      	movs	r5, r1
 8002126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	69b8      	ldr	r0, [r7, #24]
 800212c:	69f9      	ldr	r1, [r7, #28]
 800212e:	f7ff f8fb 	bl	8001328 <__aeabi_dmul>
 8002132:	0002      	movs	r2, r0
 8002134:	000b      	movs	r3, r1
 8002136:	0010      	movs	r0, r2
 8002138:	0019      	movs	r1, r3
 800213a:	f002 fb9f 	bl	800487c <sin>
 800213e:	2200      	movs	r2, #0
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <main+0x140>)
 8002142:	f7fe f9b3 	bl	80004ac <__aeabi_dadd>
 8002146:	0002      	movs	r2, r0
 8002148:	000b      	movs	r3, r1
 800214a:	0010      	movs	r0, r2
 800214c:	0019      	movs	r1, r3
 800214e:	2200      	movs	r2, #0
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <main+0x120>)
 8002152:	f7ff f8e9 	bl	8001328 <__aeabi_dmul>
 8002156:	0002      	movs	r2, r0
 8002158:	000b      	movs	r3, r1
 800215a:	0020      	movs	r0, r4
 800215c:	0029      	movs	r1, r5
 800215e:	f7ff f8e3 	bl	8001328 <__aeabi_dmul>
 8002162:	0002      	movs	r2, r0
 8002164:	000b      	movs	r3, r1
 8002166:	60ba      	str	r2, [r7, #8]
 8002168:	60fb      	str	r3, [r7, #12]
//	  if(calc_duty_cycle < 0)
//	  {
//		  HAL_GPIO_TogglePin(motor_dir_GPIO_Port, motor_dir_Pin);
//		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	  }
	  duty_cycle = (uint32_t)fabs(calc_duty_cycle);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	f7fe f979 	bl	8000470 <__aeabi_d2uiz>
 800217e:	0002      	movs	r2, r0
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <main+0x12c>)
 8002182:	601a      	str	r2, [r3, #0]
//	  if(duty_cycle < 1000)
//	  {
//		  duty_cycle = 1000;
//	  }

	  set_pwm_duty_cycle(duty_cycle);
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <main+0x12c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 f94f 	bl	800242c <set_pwm_duty_cycle>
//	  {
//		  HAL_GPIO_TogglePin(motor_dir_GPIO_Port, motor_dir_Pin);
//		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	  }

	  HAL_Delay(dt);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	0018      	movs	r0, r3
 8002192:	f000 fb13 	bl	80027bc <HAL_Delay>
  {
 8002196:	e7ad      	b.n	80020f4 <main+0x7c>
 8002198:	3fd00000 	.word	0x3fd00000
 800219c:	5474a168 	.word	0x5474a168
 80021a0:	401921fb 	.word	0x401921fb
 80021a4:	200000fc 	.word	0x200000fc
 80021a8:	20000028 	.word	0x20000028
 80021ac:	48000400 	.word	0x48000400
 80021b0:	408f4000 	.word	0x408f4000
 80021b4:	200000f8 	.word	0x200000f8
 80021b8:	3fe80000 	.word	0x3fe80000

080021bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b093      	sub	sp, #76	; 0x4c
 80021c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c2:	2414      	movs	r4, #20
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	0018      	movs	r0, r3
 80021c8:	2334      	movs	r3, #52	; 0x34
 80021ca:	001a      	movs	r2, r3
 80021cc:	2100      	movs	r1, #0
 80021ce:	f002 fb4d 	bl	800486c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	0018      	movs	r0, r3
 80021d6:	2310      	movs	r3, #16
 80021d8:	001a      	movs	r2, r3
 80021da:	2100      	movs	r1, #0
 80021dc:	f002 fb46 	bl	800486c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	2220      	movs	r2, #32
 80021e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80021e6:	193b      	adds	r3, r7, r4
 80021e8:	2201      	movs	r2, #1
 80021ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f2:	193b      	adds	r3, r7, r4
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 fd5b 	bl	8002cb0 <HAL_RCC_OscConfig>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d001      	beq.n	8002202 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80021fe:	f000 f947 	bl	8002490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2203      	movs	r2, #3
 800220c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	2101      	movs	r1, #1
 800221e:	0018      	movs	r0, r3
 8002220:	f001 f8cc 	bl	80033bc <HAL_RCC_ClockConfig>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002228:	f000 f932 	bl	8002490 <Error_Handler>
  }
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b013      	add	sp, #76	; 0x4c
 8002232:	bd90      	pop	{r4, r7, pc}

08002234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	2320      	movs	r3, #32
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	0018      	movs	r0, r3
 8002240:	2308      	movs	r3, #8
 8002242:	001a      	movs	r2, r3
 8002244:	2100      	movs	r1, #0
 8002246:	f002 fb11 	bl	800486c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	0018      	movs	r0, r3
 800224e:	231c      	movs	r3, #28
 8002250:	001a      	movs	r2, r3
 8002252:	2100      	movs	r1, #0
 8002254:	f002 fb0a 	bl	800486c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002258:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <MX_TIM3_Init+0xc0>)
 800225a:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <MX_TIM3_Init+0xc4>)
 800225c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <MX_TIM3_Init+0xc0>)
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <MX_TIM3_Init+0xc0>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4800-1;
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <MX_TIM3_Init+0xc0>)
 800226c:	4a23      	ldr	r2, [pc, #140]	; (80022fc <MX_TIM3_Init+0xc8>)
 800226e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <MX_TIM3_Init+0xc0>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <MX_TIM3_Init+0xc0>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <MX_TIM3_Init+0xc0>)
 800227e:	0018      	movs	r0, r3
 8002280:	f001 fa08 	bl	8003694 <HAL_TIM_PWM_Init>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002288:	f000 f902 	bl	8002490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	2120      	movs	r1, #32
 800228e:	187b      	adds	r3, r7, r1
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002294:	187b      	adds	r3, r7, r1
 8002296:	2200      	movs	r2, #0
 8002298:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800229a:	187a      	adds	r2, r7, r1
 800229c:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <MX_TIM3_Init+0xc0>)
 800229e:	0011      	movs	r1, r2
 80022a0:	0018      	movs	r0, r3
 80022a2:	f001 fea9 	bl	8003ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80022aa:	f000 f8f1 	bl	8002490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2260      	movs	r2, #96	; 0x60
 80022b2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2400-1;
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <MX_TIM3_Init+0xcc>)
 80022b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2204      	movs	r2, #4
 80022c4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c6:	1d39      	adds	r1, r7, #4
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_TIM3_Init+0xc0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	0018      	movs	r0, r3
 80022ce:	f001 fb53 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80022d6:	f000 f8db 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  tim3_oc_max_value = htim3.Init.Period;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_TIM3_Init+0xc0>)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_TIM3_Init+0xd0>)
 80022e0:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <MX_TIM3_Init+0xc0>)
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f91b 	bl	8002520 <HAL_TIM_MspPostInit>

}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b00a      	add	sp, #40	; 0x28
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	20000028 	.word	0x20000028
 80022f8:	40000400 	.word	0x40000400
 80022fc:	000012bf 	.word	0x000012bf
 8002300:	0000095f 	.word	0x0000095f
 8002304:	200000f8 	.word	0x200000f8

08002308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800230e:	4a15      	ldr	r2, [pc, #84]	; (8002364 <MX_USART2_UART_Init+0x5c>)
 8002310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002314:	2296      	movs	r2, #150	; 0x96
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800234c:	0018      	movs	r0, r3
 800234e:	f001 feab 	bl	80040a8 <HAL_UART_Init>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d001      	beq.n	800235a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002356:	f000 f89b 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000070 	.word	0x20000070
 8002364:	40004400 	.word	0x40004400

08002368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236e:	240c      	movs	r4, #12
 8002370:	193b      	adds	r3, r7, r4
 8002372:	0018      	movs	r0, r3
 8002374:	2314      	movs	r3, #20
 8002376:	001a      	movs	r2, r3
 8002378:	2100      	movs	r1, #0
 800237a:	f002 fa77 	bl	800486c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <MX_GPIO_Init+0xbc>)
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <MX_GPIO_Init+0xbc>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0289      	lsls	r1, r1, #10
 8002388:	430a      	orrs	r2, r1
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <MX_GPIO_Init+0xbc>)
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	4b22      	ldr	r3, [pc, #136]	; (8002424 <MX_GPIO_Init+0xbc>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <MX_GPIO_Init+0xbc>)
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	02c9      	lsls	r1, r1, #11
 80023a4:	430a      	orrs	r2, r1
 80023a6:	615a      	str	r2, [r3, #20]
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <MX_GPIO_Init+0xbc>)
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	02db      	lsls	r3, r3, #11
 80023b0:	4013      	ands	r3, r2
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_dir_GPIO_Port, motor_dir_Pin, GPIO_PIN_RESET);
 80023b6:	2390      	movs	r3, #144	; 0x90
 80023b8:	05db      	lsls	r3, r3, #23
 80023ba:	2200      	movs	r2, #0
 80023bc:	2120      	movs	r1, #32
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 fc59 	bl	8002c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MX_GPIO_Init+0xc0>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	2108      	movs	r1, #8
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 fc53 	bl	8002c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : motor_dir_Pin */
  GPIO_InitStruct.Pin = motor_dir_Pin;
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	2220      	movs	r2, #32
 80023d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	2201      	movs	r2, #1
 80023da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(motor_dir_GPIO_Port, &GPIO_InitStruct);
 80023e8:	193a      	adds	r2, r7, r4
 80023ea:	2390      	movs	r3, #144	; 0x90
 80023ec:	05db      	lsls	r3, r3, #23
 80023ee:	0011      	movs	r1, r2
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 fabb 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80023f6:	0021      	movs	r1, r4
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2208      	movs	r2, #8
 80023fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2201      	movs	r2, #1
 8002402:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	2200      	movs	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002410:	187b      	adds	r3, r7, r1
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <MX_GPIO_Init+0xc0>)
 8002414:	0019      	movs	r1, r3
 8002416:	0010      	movs	r0, r2
 8002418:	f000 faa8 	bl	800296c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b009      	add	sp, #36	; 0x24
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	48000400 	.word	0x48000400

0800242c <set_pwm_duty_cycle>:

/* USER CODE BEGIN 4 */

void set_pwm_duty_cycle(uint32_t duty_cycle)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b08b      	sub	sp, #44	; 0x2c
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	// configure output compare functionality
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002434:	240c      	movs	r4, #12
 8002436:	193b      	adds	r3, r7, r4
 8002438:	0018      	movs	r0, r3
 800243a:	231c      	movs	r3, #28
 800243c:	001a      	movs	r2, r3
 800243e:	2100      	movs	r1, #0
 8002440:	f002 fa14 	bl	800486c <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002444:	193b      	adds	r3, r7, r4
 8002446:	2260      	movs	r2, #96	; 0x60
 8002448:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = duty_cycle;
 800244a:	193b      	adds	r3, r7, r4
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002450:	193b      	adds	r3, r7, r4
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002456:	193b      	adds	r3, r7, r4
 8002458:	2204      	movs	r2, #4
 800245a:	611a      	str	r2, [r3, #16]

	// stop PWM
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <set_pwm_duty_cycle+0x60>)
 800245e:	2100      	movs	r1, #0
 8002460:	0018      	movs	r0, r3
 8002462:	f001 fa13 	bl	800388c <HAL_TIM_PWM_Stop>

	// configure channel
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002466:	1939      	adds	r1, r7, r4
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <set_pwm_duty_cycle+0x60>)
 800246a:	2200      	movs	r2, #0
 800246c:	0018      	movs	r0, r3
 800246e:	f001 fa83 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <set_pwm_duty_cycle+0x4e>
	{
	Error_Handler();
 8002476:	f000 f80b 	bl	8002490 <Error_Handler>
	}

	// start PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <set_pwm_duty_cycle+0x60>)
 800247c:	2100      	movs	r1, #0
 800247e:	0018      	movs	r0, r3
 8002480:	f001 f958 	bl	8003734 <HAL_TIM_PWM_Start>

}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b00b      	add	sp, #44	; 0x2c
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	20000028 	.word	0x20000028

08002490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002494:	b672      	cpsid	i
}
 8002496:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002498:	e7fe      	b.n	8002498 <Error_Handler+0x8>
	...

0800249c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_MspInit+0x44>)
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_MspInit+0x44>)
 80024a8:	2101      	movs	r1, #1
 80024aa:	430a      	orrs	r2, r1
 80024ac:	619a      	str	r2, [r3, #24]
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_MspInit+0x44>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4013      	ands	r3, r2
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_MspInit+0x44>)
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_MspInit+0x44>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0549      	lsls	r1, r1, #21
 80024c4:	430a      	orrs	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_MspInit+0x44>)
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	055b      	lsls	r3, r3, #21
 80024d0:	4013      	ands	r3, r2
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	b002      	add	sp, #8
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_TIM_PWM_MspInit+0x34>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10b      	bne.n	800250e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_TIM_PWM_MspInit+0x38>)
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_TIM_PWM_MspInit+0x38>)
 80024fc:	2102      	movs	r1, #2
 80024fe:	430a      	orrs	r2, r1
 8002500:	61da      	str	r2, [r3, #28]
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_TIM_PWM_MspInit+0x38>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	2202      	movs	r2, #2
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	40000400 	.word	0x40000400
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	240c      	movs	r4, #12
 800252a:	193b      	adds	r3, r7, r4
 800252c:	0018      	movs	r0, r3
 800252e:	2314      	movs	r3, #20
 8002530:	001a      	movs	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	f002 f99a 	bl	800486c <memset>
  if(htim->Instance==TIM3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a15      	ldr	r2, [pc, #84]	; (8002594 <HAL_TIM_MspPostInit+0x74>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d124      	bne.n	800258c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_TIM_MspPostInit+0x78>)
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_TIM_MspPostInit+0x78>)
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	0289      	lsls	r1, r1, #10
 800254c:	430a      	orrs	r2, r1
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_TIM_MspPostInit+0x78>)
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	029b      	lsls	r3, r3, #10
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = motor_pwm_Pin;
 800255e:	0021      	movs	r1, r4
 8002560:	187b      	adds	r3, r7, r1
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2202      	movs	r2, #2
 800256a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2201      	movs	r2, #1
 800257c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(motor_pwm_GPIO_Port, &GPIO_InitStruct);
 800257e:	187a      	adds	r2, r7, r1
 8002580:	2390      	movs	r3, #144	; 0x90
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	0011      	movs	r1, r2
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f9f0 	bl	800296c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b009      	add	sp, #36	; 0x24
 8002592:	bd90      	pop	{r4, r7, pc}
 8002594:	40000400 	.word	0x40000400
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b08b      	sub	sp, #44	; 0x2c
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	2414      	movs	r4, #20
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	0018      	movs	r0, r3
 80025aa:	2314      	movs	r3, #20
 80025ac:	001a      	movs	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	f002 f95c 	bl	800486c <memset>
  if(huart->Instance==USART2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_UART_MspInit+0x90>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d132      	bne.n	8002624 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_UART_MspInit+0x94>)
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_UART_MspInit+0x94>)
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	0289      	lsls	r1, r1, #10
 80025c8:	430a      	orrs	r2, r1
 80025ca:	61da      	str	r2, [r3, #28]
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_UART_MspInit+0x94>)
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	029b      	lsls	r3, r3, #10
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_UART_MspInit+0x94>)
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_UART_MspInit+0x94>)
 80025e0:	2180      	movs	r1, #128	; 0x80
 80025e2:	0289      	lsls	r1, r1, #10
 80025e4:	430a      	orrs	r2, r1
 80025e6:	615a      	str	r2, [r3, #20]
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_UART_MspInit+0x94>)
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80025f6:	0021      	movs	r1, r4
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <HAL_UART_MspInit+0x98>)
 80025fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2202      	movs	r2, #2
 8002602:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2203      	movs	r2, #3
 800260e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2201      	movs	r2, #1
 8002614:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	187a      	adds	r2, r7, r1
 8002618:	2390      	movs	r3, #144	; 0x90
 800261a:	05db      	lsls	r3, r3, #23
 800261c:	0011      	movs	r1, r2
 800261e:	0018      	movs	r0, r3
 8002620:	f000 f9a4 	bl	800296c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b00b      	add	sp, #44	; 0x2c
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	40004400 	.word	0x40004400
 8002630:	40021000 	.word	0x40021000
 8002634:	00008004 	.word	0x00008004

08002638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800263c:	e7fe      	b.n	800263c <NMI_Handler+0x4>

0800263e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <HardFault_Handler+0x4>

08002644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265c:	f000 f892 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002670:	4813      	ldr	r0, [pc, #76]	; (80026c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002672:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002674:	f7ff fff7 	bl	8002666 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002678:	4812      	ldr	r0, [pc, #72]	; (80026c4 <LoopForever+0x6>)
    LDR R1, [R0]
 800267a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800267c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <LoopForever+0xa>)
    CMP R1, R2
 8002680:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002682:	d105      	bne.n	8002690 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002684:	4811      	ldr	r0, [pc, #68]	; (80026cc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002686:	4912      	ldr	r1, [pc, #72]	; (80026d0 <LoopForever+0x12>)
    STR R1, [R0]
 8002688:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800268a:	4812      	ldr	r0, [pc, #72]	; (80026d4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800268c:	4912      	ldr	r1, [pc, #72]	; (80026d8 <LoopForever+0x1a>)
    STR R1, [R0]
 800268e:	6001      	str	r1, [r0, #0]

08002690 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002690:	4812      	ldr	r0, [pc, #72]	; (80026dc <LoopForever+0x1e>)
  ldr r1, =_edata
 8002692:	4913      	ldr	r1, [pc, #76]	; (80026e0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002694:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <LoopForever+0x26>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002698:	e002      	b.n	80026a0 <LoopCopyDataInit>

0800269a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800269c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269e:	3304      	adds	r3, #4

080026a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a4:	d3f9      	bcc.n	800269a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80026a8:	4c10      	ldr	r4, [pc, #64]	; (80026ec <LoopForever+0x2e>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ac:	e001      	b.n	80026b2 <LoopFillZerobss>

080026ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b0:	3204      	adds	r2, #4

080026b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b4:	d3fb      	bcc.n	80026ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026b6:	f002 f8b5 	bl	8004824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ba:	f7ff fcdd 	bl	8002078 <main>

080026be <LoopForever>:

LoopForever:
    b LoopForever
 80026be:	e7fe      	b.n	80026be <LoopForever>
  ldr   r0, =_estack
 80026c0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80026c4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80026c8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80026cc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80026d0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80026d4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80026d8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80026e4:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 80026e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80026ec:	20000104 	.word	0x20000104

080026f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC1_IRQHandler>
	...

080026f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <HAL_Init+0x24>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_Init+0x24>)
 80026fe:	2110      	movs	r1, #16
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002704:	2000      	movs	r0, #0
 8002706:	f000 f809 	bl	800271c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800270a:	f7ff fec7 	bl	800249c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_InitTick+0x5c>)
 8002726:	681c      	ldr	r4, [r3, #0]
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <HAL_InitTick+0x60>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	0019      	movs	r1, r3
 800272e:	23fa      	movs	r3, #250	; 0xfa
 8002730:	0098      	lsls	r0, r3, #2
 8002732:	f7fd fce9 	bl	8000108 <__udivsi3>
 8002736:	0003      	movs	r3, r0
 8002738:	0019      	movs	r1, r3
 800273a:	0020      	movs	r0, r4
 800273c:	f7fd fce4 	bl	8000108 <__udivsi3>
 8002740:	0003      	movs	r3, r0
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f905 	bl	8002952 <HAL_SYSTICK_Config>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e00f      	b.n	8002770 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d80b      	bhi.n	800276e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	2301      	movs	r3, #1
 800275a:	425b      	negs	r3, r3
 800275c:	2200      	movs	r2, #0
 800275e:	0018      	movs	r0, r3
 8002760:	f000 f8e2 	bl	8002928 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_InitTick+0x64>)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b003      	add	sp, #12
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	20000000 	.word	0x20000000
 800277c:	20000008 	.word	0x20000008
 8002780:	20000004 	.word	0x20000004

08002784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_IncTick+0x1c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	001a      	movs	r2, r3
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_IncTick+0x20>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	18d2      	adds	r2, r2, r3
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_IncTick+0x20>)
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	20000008 	.word	0x20000008
 80027a4:	20000100 	.word	0x20000100

080027a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_GetTick+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000100 	.word	0x20000100

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fff0 	bl	80027a8 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	001a      	movs	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	f7ff ffe0 	bl	80027a8 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b004      	add	sp, #16
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	20000008 	.word	0x20000008

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	0002      	movs	r2, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b7f      	cmp	r3, #127	; 0x7f
 8002818:	d828      	bhi.n	800286c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800281a:	4a2f      	ldr	r2, [pc, #188]	; (80028d8 <__NVIC_SetPriority+0xd4>)
 800281c:	1dfb      	adds	r3, r7, #7
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	b25b      	sxtb	r3, r3
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	33c0      	adds	r3, #192	; 0xc0
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	589b      	ldr	r3, [r3, r2]
 800282a:	1dfa      	adds	r2, r7, #7
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	0011      	movs	r1, r2
 8002830:	2203      	movs	r2, #3
 8002832:	400a      	ands	r2, r1
 8002834:	00d2      	lsls	r2, r2, #3
 8002836:	21ff      	movs	r1, #255	; 0xff
 8002838:	4091      	lsls	r1, r2
 800283a:	000a      	movs	r2, r1
 800283c:	43d2      	mvns	r2, r2
 800283e:	401a      	ands	r2, r3
 8002840:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	401a      	ands	r2, r3
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	0018      	movs	r0, r3
 8002850:	2303      	movs	r3, #3
 8002852:	4003      	ands	r3, r0
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002858:	481f      	ldr	r0, [pc, #124]	; (80028d8 <__NVIC_SetPriority+0xd4>)
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b25b      	sxtb	r3, r3
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	430a      	orrs	r2, r1
 8002864:	33c0      	adds	r3, #192	; 0xc0
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800286a:	e031      	b.n	80028d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <__NVIC_SetPriority+0xd8>)
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	0019      	movs	r1, r3
 8002874:	230f      	movs	r3, #15
 8002876:	400b      	ands	r3, r1
 8002878:	3b08      	subs	r3, #8
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3306      	adds	r3, #6
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	18d3      	adds	r3, r2, r3
 8002882:	3304      	adds	r3, #4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1dfa      	adds	r2, r7, #7
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	0011      	movs	r1, r2
 800288c:	2203      	movs	r2, #3
 800288e:	400a      	ands	r2, r1
 8002890:	00d2      	lsls	r2, r2, #3
 8002892:	21ff      	movs	r1, #255	; 0xff
 8002894:	4091      	lsls	r1, r2
 8002896:	000a      	movs	r2, r1
 8002898:	43d2      	mvns	r2, r2
 800289a:	401a      	ands	r2, r3
 800289c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	22ff      	movs	r2, #255	; 0xff
 80028a4:	401a      	ands	r2, r3
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	0018      	movs	r0, r3
 80028ac:	2303      	movs	r3, #3
 80028ae:	4003      	ands	r3, r0
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b4:	4809      	ldr	r0, [pc, #36]	; (80028dc <__NVIC_SetPriority+0xd8>)
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	001c      	movs	r4, r3
 80028bc:	230f      	movs	r3, #15
 80028be:	4023      	ands	r3, r4
 80028c0:	3b08      	subs	r3, #8
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	430a      	orrs	r2, r1
 80028c6:	3306      	adds	r3, #6
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	18c3      	adds	r3, r0, r3
 80028cc:	3304      	adds	r3, #4
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b003      	add	sp, #12
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	1e5a      	subs	r2, r3, #1
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	045b      	lsls	r3, r3, #17
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d301      	bcc.n	80028f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f4:	2301      	movs	r3, #1
 80028f6:	e010      	b.n	800291a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <SysTick_Config+0x44>)
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	3a01      	subs	r2, #1
 80028fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002900:	2301      	movs	r3, #1
 8002902:	425b      	negs	r3, r3
 8002904:	2103      	movs	r1, #3
 8002906:	0018      	movs	r0, r3
 8002908:	f7ff ff7c 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <SysTick_Config+0x44>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <SysTick_Config+0x44>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	e000e010 	.word	0xe000e010

08002928 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	210f      	movs	r1, #15
 8002934:	187b      	adds	r3, r7, r1
 8002936:	1c02      	adds	r2, r0, #0
 8002938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	187b      	adds	r3, r7, r1
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b25b      	sxtb	r3, r3
 8002942:	0011      	movs	r1, r2
 8002944:	0018      	movs	r0, r3
 8002946:	f7ff ff5d 	bl	8002804 <__NVIC_SetPriority>
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff ffbf 	bl	80028e0 <SysTick_Config>
 8002962:	0003      	movs	r3, r0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	e149      	b.n	8002c10 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4091      	lsls	r1, r2
 8002986:	000a      	movs	r2, r1
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d100      	bne.n	8002994 <HAL_GPIO_Init+0x28>
 8002992:	e13a      	b.n	8002c0a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2203      	movs	r2, #3
 800299a:	4013      	ands	r3, r2
 800299c:	2b01      	cmp	r3, #1
 800299e:	d005      	beq.n	80029ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d130      	bne.n	8002a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	409a      	lsls	r2, r3
 80029ba:	0013      	movs	r3, r2
 80029bc:	43da      	mvns	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	0013      	movs	r3, r2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e2:	2201      	movs	r2, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
 80029e8:	0013      	movs	r3, r2
 80029ea:	43da      	mvns	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	2201      	movs	r2, #1
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
 8002a00:	0013      	movs	r3, r2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2203      	movs	r2, #3
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d017      	beq.n	8002a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d123      	bne.n	8002a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	58d3      	ldr	r3, [r2, r3]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2207      	movs	r2, #7
 8002a68:	4013      	ands	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	43da      	mvns	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2107      	movs	r1, #7
 8002a82:	400b      	ands	r3, r1
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	409a      	lsls	r2, r3
 8002a88:	0013      	movs	r3, r2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	0013      	movs	r3, r2
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	401a      	ands	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	0013      	movs	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
 8002ad8:	029b      	lsls	r3, r3, #10
 8002ada:	4013      	ands	r3, r2
 8002adc:	d100      	bne.n	8002ae0 <HAL_GPIO_Init+0x174>
 8002ade:	e094      	b.n	8002c0a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae0:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	4b50      	ldr	r3, [pc, #320]	; (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2201      	movs	r2, #1
 8002af2:	4013      	ands	r3, r2
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002af8:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <HAL_GPIO_Init+0x2c0>)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	589b      	ldr	r3, [r3, r2]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	409a      	lsls	r2, r3
 8002b12:	0013      	movs	r3, r2
 8002b14:	43da      	mvns	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	2390      	movs	r3, #144	; 0x90
 8002b20:	05db      	lsls	r3, r3, #23
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d00d      	beq.n	8002b42 <HAL_GPIO_Init+0x1d6>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a41      	ldr	r2, [pc, #260]	; (8002c30 <HAL_GPIO_Init+0x2c4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <HAL_GPIO_Init+0x1d2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a40      	ldr	r2, [pc, #256]	; (8002c34 <HAL_GPIO_Init+0x2c8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_GPIO_Init+0x1ce>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e004      	b.n	8002b44 <HAL_GPIO_Init+0x1d8>
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_Init+0x1d8>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_GPIO_Init+0x1d8>
 8002b42:	2300      	movs	r3, #0
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	2103      	movs	r1, #3
 8002b48:	400a      	ands	r2, r1
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	4093      	lsls	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b54:	4935      	ldr	r1, [pc, #212]	; (8002c2c <HAL_GPIO_Init+0x2c0>)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b62:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	035b      	lsls	r3, r3, #13
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b86:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	039b      	lsls	r3, r3, #14
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	029b      	lsls	r3, r3, #10
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43da      	mvns	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	025b      	lsls	r3, r3, #9
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	40da      	lsrs	r2, r3
 8002c18:	1e13      	subs	r3, r2, #0
 8002c1a:	d000      	beq.n	8002c1e <HAL_GPIO_Init+0x2b2>
 8002c1c:	e6ae      	b.n	800297c <HAL_GPIO_Init+0x10>
  } 
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b006      	add	sp, #24
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	48000400 	.word	0x48000400
 8002c34:	48000800 	.word	0x48000800
 8002c38:	40010400 	.word	0x40010400

08002c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	000a      	movs	r2, r1
 8002c46:	1cbb      	adds	r3, r7, #2
 8002c48:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	1cba      	adds	r2, r7, #2
 8002c50:	8812      	ldrh	r2, [r2, #0]
 8002c52:	4013      	ands	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c56:	230f      	movs	r3, #15
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e003      	b.n	8002c68 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c60:	230f      	movs	r3, #15
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	781b      	ldrb	r3, [r3, #0]
  }
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b004      	add	sp, #16
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	0008      	movs	r0, r1
 8002c80:	0011      	movs	r1, r2
 8002c82:	1cbb      	adds	r3, r7, #2
 8002c84:	1c02      	adds	r2, r0, #0
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	1c7b      	adds	r3, r7, #1
 8002c8a:	1c0a      	adds	r2, r1, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c8e:	1c7b      	adds	r3, r7, #1
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c96:	1cbb      	adds	r3, r7, #2
 8002c98:	881a      	ldrh	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c9e:	e003      	b.n	8002ca8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ca0:	1cbb      	adds	r3, r7, #2
 8002ca2:	881a      	ldrh	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f000 fb76 	bl	80033b0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d100      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x20>
 8002cce:	e08e      	b.n	8002dee <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cd0:	4bc5      	ldr	r3, [pc, #788]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	220c      	movs	r2, #12
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d00e      	beq.n	8002cfa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cdc:	4bc2      	ldr	r3, [pc, #776]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	220c      	movs	r2, #12
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d117      	bne.n	8002d18 <HAL_RCC_OscConfig+0x68>
 8002ce8:	4bbf      	ldr	r3, [pc, #764]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	23c0      	movs	r3, #192	; 0xc0
 8002cee:	025b      	lsls	r3, r3, #9
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	025b      	lsls	r3, r3, #9
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10e      	bne.n	8002d18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfa:	4bbb      	ldr	r3, [pc, #748]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	029b      	lsls	r3, r3, #10
 8002d02:	4013      	ands	r3, r2
 8002d04:	d100      	bne.n	8002d08 <HAL_RCC_OscConfig+0x58>
 8002d06:	e071      	b.n	8002dec <HAL_RCC_OscConfig+0x13c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d000      	beq.n	8002d12 <HAL_RCC_OscConfig+0x62>
 8002d10:	e06c      	b.n	8002dec <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f000 fb4c 	bl	80033b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_OscConfig+0x80>
 8002d20:	4bb1      	ldr	r3, [pc, #708]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4bb0      	ldr	r3, [pc, #704]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	0249      	lsls	r1, r1, #9
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e02f      	b.n	8002d90 <HAL_RCC_OscConfig+0xe0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10c      	bne.n	8002d52 <HAL_RCC_OscConfig+0xa2>
 8002d38:	4bab      	ldr	r3, [pc, #684]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4baa      	ldr	r3, [pc, #680]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d3e:	49ab      	ldr	r1, [pc, #684]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	4ba8      	ldr	r3, [pc, #672]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4ba7      	ldr	r3, [pc, #668]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d4a:	49a9      	ldr	r1, [pc, #676]	; (8002ff0 <HAL_RCC_OscConfig+0x340>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e01e      	b.n	8002d90 <HAL_RCC_OscConfig+0xe0>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d10e      	bne.n	8002d78 <HAL_RCC_OscConfig+0xc8>
 8002d5a:	4ba3      	ldr	r3, [pc, #652]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4ba2      	ldr	r3, [pc, #648]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	02c9      	lsls	r1, r1, #11
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	4b9f      	ldr	r3, [pc, #636]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b9e      	ldr	r3, [pc, #632]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	0249      	lsls	r1, r1, #9
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xe0>
 8002d78:	4b9b      	ldr	r3, [pc, #620]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b9a      	ldr	r3, [pc, #616]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d7e:	499b      	ldr	r1, [pc, #620]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4b98      	ldr	r3, [pc, #608]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b97      	ldr	r3, [pc, #604]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002d8a:	4999      	ldr	r1, [pc, #612]	; (8002ff0 <HAL_RCC_OscConfig+0x340>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d014      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff fd06 	bl	80027a8 <HAL_GetTick>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da2:	f7ff fd01 	bl	80027a8 <HAL_GetTick>
 8002da6:	0002      	movs	r2, r0
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b64      	cmp	r3, #100	; 0x64
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e2fd      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db4:	4b8c      	ldr	r3, [pc, #560]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	029b      	lsls	r3, r3, #10
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0xf2>
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7ff fcf1 	bl	80027a8 <HAL_GetTick>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7ff fcec 	bl	80027a8 <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e2e8      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	4b82      	ldr	r3, [pc, #520]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	029b      	lsls	r3, r3, #10
 8002de6:	4013      	ands	r3, r2
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x11c>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	d100      	bne.n	8002dfa <HAL_RCC_OscConfig+0x14a>
 8002df8:	e06c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	220c      	movs	r2, #12
 8002e00:	4013      	ands	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e04:	4b78      	ldr	r3, [pc, #480]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	220c      	movs	r2, #12
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d11f      	bne.n	8002e50 <HAL_RCC_OscConfig+0x1a0>
 8002e10:	4b75      	ldr	r3, [pc, #468]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	23c0      	movs	r3, #192	; 0xc0
 8002e16:	025b      	lsls	r3, r3, #9
 8002e18:	401a      	ands	r2, r3
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2202      	movs	r2, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_OscConfig+0x188>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e2bb      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b6b      	ldr	r3, [pc, #428]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	22f8      	movs	r2, #248	; 0xf8
 8002e3e:	4393      	bics	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00da      	lsls	r2, r3, #3
 8002e48:	4b67      	ldr	r3, [pc, #412]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e041      	b.n	8002ed4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d024      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b62      	ldr	r3, [pc, #392]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e5e:	2101      	movs	r1, #1
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff fca0 	bl	80027a8 <HAL_GetTick>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff fc9b 	bl	80027a8 <HAL_GetTick>
 8002e72:	0002      	movs	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e297      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2202      	movs	r2, #2
 8002e86:	4013      	ands	r3, r2
 8002e88:	d0f1      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b57      	ldr	r3, [pc, #348]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	22f8      	movs	r2, #248	; 0xf8
 8002e90:	4393      	bics	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00da      	lsls	r2, r3, #3
 8002e9a:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e018      	b.n	8002ed4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b50      	ldr	r3, [pc, #320]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	438a      	bics	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7ff fc7b 	bl	80027a8 <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7ff fc76 	bl	80027a8 <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e272      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d1f1      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2208      	movs	r2, #8
 8002eda:	4013      	ands	r3, r2
 8002edc:	d036      	beq.n	8002f4c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4b40      	ldr	r3, [pc, #256]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eea:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff fc59 	bl	80027a8 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7ff fc54 	bl	80027a8 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e250      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d0f1      	beq.n	8002efc <HAL_RCC_OscConfig+0x24c>
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1e:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	438a      	bics	r2, r1
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7ff fc3f 	bl	80027a8 <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f30:	f7ff fc3a 	bl	80027a8 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e236      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2202      	movs	r2, #2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d1f1      	bne.n	8002f30 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2204      	movs	r2, #4
 8002f52:	4013      	ands	r3, r2
 8002f54:	d100      	bne.n	8002f58 <HAL_RCC_OscConfig+0x2a8>
 8002f56:	e0b5      	b.n	80030c4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f58:	201f      	movs	r0, #31
 8002f5a:	183b      	adds	r3, r7, r0
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	055b      	lsls	r3, r3, #21
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d110      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	0549      	lsls	r1, r1, #21
 8002f76:	430a      	orrs	r2, r1
 8002f78:	61da      	str	r2, [r3, #28]
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	055b      	lsls	r3, r3, #21
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f88:	183b      	adds	r3, r7, r0
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_OscConfig+0x344>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4013      	ands	r3, r2
 8002f98:	d11a      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_RCC_OscConfig+0x344>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_RCC_OscConfig+0x344>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa8:	f7ff fbfe 	bl	80027a8 <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7ff fbf9 	bl	80027a8 <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1f5      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x344>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x348>
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <HAL_RCC_OscConfig+0x338>)
 8002fde:	2101      	movs	r1, #1
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	621a      	str	r2, [r3, #32]
 8002fe4:	e036      	b.n	8003054 <HAL_RCC_OscConfig+0x3a4>
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	fffeffff 	.word	0xfffeffff
 8002ff0:	fffbffff 	.word	0xfffbffff
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x36a>
 8003000:	4bca      	ldr	r3, [pc, #808]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	4bc9      	ldr	r3, [pc, #804]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003006:	2101      	movs	r1, #1
 8003008:	438a      	bics	r2, r1
 800300a:	621a      	str	r2, [r3, #32]
 800300c:	4bc7      	ldr	r3, [pc, #796]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	4bc6      	ldr	r3, [pc, #792]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003012:	2104      	movs	r1, #4
 8003014:	438a      	bics	r2, r1
 8003016:	621a      	str	r2, [r3, #32]
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x3a4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x38c>
 8003022:	4bc2      	ldr	r3, [pc, #776]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	4bc1      	ldr	r3, [pc, #772]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003028:	2104      	movs	r1, #4
 800302a:	430a      	orrs	r2, r1
 800302c:	621a      	str	r2, [r3, #32]
 800302e:	4bbf      	ldr	r3, [pc, #764]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	4bbe      	ldr	r3, [pc, #760]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003034:	2101      	movs	r1, #1
 8003036:	430a      	orrs	r2, r1
 8003038:	621a      	str	r2, [r3, #32]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x3a4>
 800303c:	4bbb      	ldr	r3, [pc, #748]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	4bba      	ldr	r3, [pc, #744]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003042:	2101      	movs	r1, #1
 8003044:	438a      	bics	r2, r1
 8003046:	621a      	str	r2, [r3, #32]
 8003048:	4bb8      	ldr	r3, [pc, #736]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	4bb7      	ldr	r3, [pc, #732]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800304e:	2104      	movs	r1, #4
 8003050:	438a      	bics	r2, r1
 8003052:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d014      	beq.n	8003086 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7ff fba4 	bl	80027a8 <HAL_GetTick>
 8003060:	0003      	movs	r3, r0
 8003062:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	e009      	b.n	800307a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7ff fb9f 	bl	80027a8 <HAL_GetTick>
 800306a:	0002      	movs	r2, r0
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	4aaf      	ldr	r2, [pc, #700]	; (8003330 <HAL_RCC_OscConfig+0x680>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e19a      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	4bac      	ldr	r3, [pc, #688]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	2202      	movs	r2, #2
 8003080:	4013      	ands	r3, r2
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x3b6>
 8003084:	e013      	b.n	80030ae <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7ff fb8f 	bl	80027a8 <HAL_GetTick>
 800308a:	0003      	movs	r3, r0
 800308c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308e:	e009      	b.n	80030a4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7ff fb8a 	bl	80027a8 <HAL_GetTick>
 8003094:	0002      	movs	r2, r0
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	4aa5      	ldr	r2, [pc, #660]	; (8003330 <HAL_RCC_OscConfig+0x680>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e185      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	4ba1      	ldr	r3, [pc, #644]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	2202      	movs	r2, #2
 80030aa:	4013      	ands	r3, r2
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ae:	231f      	movs	r3, #31
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b8:	4b9c      	ldr	r3, [pc, #624]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	4b9b      	ldr	r3, [pc, #620]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80030be:	499d      	ldr	r1, [pc, #628]	; (8003334 <HAL_RCC_OscConfig+0x684>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2210      	movs	r2, #16
 80030ca:	4013      	ands	r3, r2
 80030cc:	d063      	beq.n	8003196 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d12a      	bne.n	800312c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030d6:	4b95      	ldr	r3, [pc, #596]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80030d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030da:	4b94      	ldr	r3, [pc, #592]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80030dc:	2104      	movs	r1, #4
 80030de:	430a      	orrs	r2, r1
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80030e2:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80030e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e6:	4b91      	ldr	r3, [pc, #580]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7ff fb5b 	bl	80027a8 <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030f8:	f7ff fb56 	bl	80027a8 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e152      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	2202      	movs	r2, #2
 8003110:	4013      	ands	r3, r2
 8003112:	d0f1      	beq.n	80030f8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003114:	4b85      	ldr	r3, [pc, #532]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	22f8      	movs	r2, #248	; 0xf8
 800311a:	4393      	bics	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	00da      	lsls	r2, r3, #3
 8003124:	4b81      	ldr	r3, [pc, #516]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34
 800312a:	e034      	b.n	8003196 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	3305      	adds	r3, #5
 8003132:	d111      	bne.n	8003158 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003134:	4b7d      	ldr	r3, [pc, #500]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	4b7c      	ldr	r3, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800313a:	2104      	movs	r1, #4
 800313c:	438a      	bics	r2, r1
 800313e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003140:	4b7a      	ldr	r3, [pc, #488]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	22f8      	movs	r2, #248	; 0xf8
 8003146:	4393      	bics	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	00da      	lsls	r2, r3, #3
 8003150:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003152:	430a      	orrs	r2, r1
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
 8003156:	e01e      	b.n	8003196 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003158:	4b74      	ldr	r3, [pc, #464]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800315a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315c:	4b73      	ldr	r3, [pc, #460]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800315e:	2104      	movs	r1, #4
 8003160:	430a      	orrs	r2, r1
 8003162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003164:	4b71      	ldr	r3, [pc, #452]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003168:	4b70      	ldr	r3, [pc, #448]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800316a:	2101      	movs	r1, #1
 800316c:	438a      	bics	r2, r1
 800316e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003170:	f7ff fb1a 	bl	80027a8 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800317a:	f7ff fb15 	bl	80027a8 <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e111      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800318c:	4b67      	ldr	r3, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	2202      	movs	r2, #2
 8003192:	4013      	ands	r3, r2
 8003194:	d1f1      	bne.n	800317a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2220      	movs	r2, #32
 800319c:	4013      	ands	r3, r2
 800319e:	d05c      	beq.n	800325a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	220c      	movs	r2, #12
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d00e      	beq.n	80031ca <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031ac:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	220c      	movs	r2, #12
 80031b2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d114      	bne.n	80031e2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031b8:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	23c0      	movs	r3, #192	; 0xc0
 80031be:	025b      	lsls	r3, r3, #9
 80031c0:	401a      	ands	r2, r3
 80031c2:	23c0      	movs	r3, #192	; 0xc0
 80031c4:	025b      	lsls	r3, r3, #9
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d10b      	bne.n	80031e2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80031ca:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80031cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	029b      	lsls	r3, r3, #10
 80031d2:	4013      	ands	r3, r2
 80031d4:	d040      	beq.n	8003258 <HAL_RCC_OscConfig+0x5a8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d03c      	beq.n	8003258 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0e6      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01b      	beq.n	8003222 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80031ea:	4b50      	ldr	r3, [pc, #320]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80031ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ee:	4b4f      	ldr	r3, [pc, #316]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	0249      	lsls	r1, r1, #9
 80031f4:	430a      	orrs	r2, r1
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7ff fad6 	bl	80027a8 <HAL_GetTick>
 80031fc:	0003      	movs	r3, r0
 80031fe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003202:	f7ff fad1 	bl	80027a8 <HAL_GetTick>
 8003206:	0002      	movs	r2, r0
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0cd      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003214:	4b45      	ldr	r3, [pc, #276]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	4013      	ands	r3, r2
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x552>
 8003220:	e01b      	b.n	800325a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003222:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003228:	4943      	ldr	r1, [pc, #268]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800322a:	400a      	ands	r2, r1
 800322c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7ff fabb 	bl	80027a8 <HAL_GetTick>
 8003232:	0003      	movs	r3, r0
 8003234:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003238:	f7ff fab6 	bl	80027a8 <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0b2      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800324c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	029b      	lsls	r3, r3, #10
 8003252:	4013      	ands	r3, r2
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x588>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003258:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d100      	bne.n	8003264 <HAL_RCC_OscConfig+0x5b4>
 8003262:	e0a4      	b.n	80033ae <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	220c      	movs	r2, #12
 800326a:	4013      	ands	r3, r2
 800326c:	2b08      	cmp	r3, #8
 800326e:	d100      	bne.n	8003272 <HAL_RCC_OscConfig+0x5c2>
 8003270:	e078      	b.n	8003364 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2b02      	cmp	r3, #2
 8003278:	d14c      	bne.n	8003314 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003280:	492e      	ldr	r1, [pc, #184]	; (800333c <HAL_RCC_OscConfig+0x68c>)
 8003282:	400a      	ands	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7ff fa8f 	bl	80027a8 <HAL_GetTick>
 800328a:	0003      	movs	r3, r0
 800328c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7ff fa8a 	bl	80027a8 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e086      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a2:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	049b      	lsls	r3, r3, #18
 80032aa:	4013      	ands	r3, r2
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ae:	4b1f      	ldr	r3, [pc, #124]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	220f      	movs	r2, #15
 80032b4:	4393      	bics	r3, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80032be:	430a      	orrs	r2, r1
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032c2:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <HAL_RCC_OscConfig+0x690>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	431a      	orrs	r2, r3
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 80032e2:	2180      	movs	r1, #128	; 0x80
 80032e4:	0449      	lsls	r1, r1, #17
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7ff fa5d 	bl	80027a8 <HAL_GetTick>
 80032ee:	0003      	movs	r3, r0
 80032f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f4:	f7ff fa58 	bl	80027a8 <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e054      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	049b      	lsls	r3, r3, #18
 800330e:	4013      	ands	r3, r2
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x644>
 8003312:	e04c      	b.n	80033ae <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <HAL_RCC_OscConfig+0x67c>)
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <HAL_RCC_OscConfig+0x68c>)
 800331c:	400a      	ands	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fa42 	bl	80027a8 <HAL_GetTick>
 8003324:	0003      	movs	r3, r0
 8003326:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x6a6>
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	40021000 	.word	0x40021000
 8003330:	00001388 	.word	0x00001388
 8003334:	efffffff 	.word	0xefffffff
 8003338:	fffeffff 	.word	0xfffeffff
 800333c:	feffffff 	.word	0xfeffffff
 8003340:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003344:	f7ff fa30 	bl	80027a8 <HAL_GetTick>
 8003348:	0002      	movs	r2, r0
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e02c      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_RCC_OscConfig+0x708>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	049b      	lsls	r3, r3, #18
 800335e:	4013      	ands	r3, r2
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x694>
 8003362:	e024      	b.n	80033ae <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e01f      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_RCC_OscConfig+0x708>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_RCC_OscConfig+0x708>)
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	23c0      	movs	r3, #192	; 0xc0
 8003380:	025b      	lsls	r3, r3, #9
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	429a      	cmp	r2, r3
 800338a:	d10e      	bne.n	80033aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	220f      	movs	r2, #15
 8003390:	401a      	ands	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d107      	bne.n	80033aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	23f0      	movs	r3, #240	; 0xf0
 800339e:	039b      	lsls	r3, r3, #14
 80033a0:	401a      	ands	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b008      	add	sp, #32
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0bf      	b.n	8003550 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_RCC_ClockConfig+0x19c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	4013      	ands	r3, r2
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d911      	bls.n	8003402 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_RCC_ClockConfig+0x19c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2201      	movs	r2, #1
 80033e4:	4393      	bics	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	4b5b      	ldr	r3, [pc, #364]	; (8003558 <HAL_RCC_ClockConfig+0x19c>)
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x19c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2201      	movs	r2, #1
 80033f6:	4013      	ands	r3, r2
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0a6      	b.n	8003550 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2202      	movs	r2, #2
 8003408:	4013      	ands	r3, r2
 800340a:	d015      	beq.n	8003438 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2204      	movs	r2, #4
 8003412:	4013      	ands	r3, r2
 8003414:	d006      	beq.n	8003424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 800341c:	21e0      	movs	r1, #224	; 0xe0
 800341e:	00c9      	lsls	r1, r1, #3
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003424:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	22f0      	movs	r2, #240	; 0xf0
 800342a:	4393      	bics	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2201      	movs	r2, #1
 800343e:	4013      	ands	r3, r2
 8003440:	d04c      	beq.n	80034dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b44      	ldr	r3, [pc, #272]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	029b      	lsls	r3, r3, #10
 8003452:	4013      	ands	r3, r2
 8003454:	d120      	bne.n	8003498 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e07a      	b.n	8003550 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	049b      	lsls	r3, r3, #18
 800346a:	4013      	ands	r3, r2
 800346c:	d114      	bne.n	8003498 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06e      	b.n	8003550 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800347a:	4b38      	ldr	r3, [pc, #224]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 800347c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	029b      	lsls	r3, r3, #10
 8003482:	4013      	ands	r3, r2
 8003484:	d108      	bne.n	8003498 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e062      	b.n	8003550 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2202      	movs	r2, #2
 8003490:	4013      	ands	r3, r2
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e05b      	b.n	8003550 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003498:	4b30      	ldr	r3, [pc, #192]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	4393      	bics	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ac:	f7ff f97c 	bl	80027a8 <HAL_GetTick>
 80034b0:	0003      	movs	r3, r0
 80034b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b4:	e009      	b.n	80034ca <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b6:	f7ff f977 	bl	80027a8 <HAL_GetTick>
 80034ba:	0002      	movs	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	4a27      	ldr	r2, [pc, #156]	; (8003560 <HAL_RCC_ClockConfig+0x1a4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e042      	b.n	8003550 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	220c      	movs	r2, #12
 80034d0:	401a      	ands	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1ec      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_RCC_ClockConfig+0x19c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2201      	movs	r2, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d211      	bcs.n	800350e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_ClockConfig+0x19c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2201      	movs	r2, #1
 80034f0:	4393      	bics	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <HAL_RCC_ClockConfig+0x19c>)
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <HAL_RCC_ClockConfig+0x19c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2201      	movs	r2, #1
 8003502:	4013      	ands	r3, r2
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d001      	beq.n	800350e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e020      	b.n	8003550 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2204      	movs	r2, #4
 8003514:	4013      	ands	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4a11      	ldr	r2, [pc, #68]	; (8003564 <HAL_RCC_ClockConfig+0x1a8>)
 800351e:	4013      	ands	r3, r2
 8003520:	0019      	movs	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800352c:	f000 f820 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8003530:	0001      	movs	r1, r0
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1a0>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	220f      	movs	r2, #15
 800353a:	4013      	ands	r3, r2
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x1ac>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	000a      	movs	r2, r1
 8003542:	40da      	lsrs	r2, r3
 8003544:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1b0>)
 8003546:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003548:	2000      	movs	r0, #0
 800354a:	f7ff f8e7 	bl	800271c <HAL_InitTick>
  
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b004      	add	sp, #16
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40022000 	.word	0x40022000
 800355c:	40021000 	.word	0x40021000
 8003560:	00001388 	.word	0x00001388
 8003564:	fffff8ff 	.word	0xfffff8ff
 8003568:	08005930 	.word	0x08005930
 800356c:	20000000 	.word	0x20000000

08003570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800358a:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_RCC_GetSysClockFreq+0xd0>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	220c      	movs	r2, #12
 8003594:	4013      	ands	r3, r2
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d046      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0xb8>
 800359a:	d848      	bhi.n	800362e <HAL_RCC_GetSysClockFreq+0xbe>
 800359c:	2b04      	cmp	r3, #4
 800359e:	d002      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x36>
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d003      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x3c>
 80035a4:	e043      	b.n	800362e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a6:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_RCC_GetSysClockFreq+0xd4>)
 80035a8:	613b      	str	r3, [r7, #16]
      break;
 80035aa:	e043      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	0c9b      	lsrs	r3, r3, #18
 80035b0:	220f      	movs	r2, #15
 80035b2:	4013      	ands	r3, r2
 80035b4:	4a24      	ldr	r2, [pc, #144]	; (8003648 <HAL_RCC_GetSysClockFreq+0xd8>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	220f      	movs	r2, #15
 80035c0:	4013      	ands	r3, r2
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <HAL_RCC_GetSysClockFreq+0xdc>)
 80035c4:	5cd3      	ldrb	r3, [r2, r3]
 80035c6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	23c0      	movs	r3, #192	; 0xc0
 80035cc:	025b      	lsls	r3, r3, #9
 80035ce:	401a      	ands	r2, r3
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	025b      	lsls	r3, r3, #9
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d109      	bne.n	80035ec <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	481a      	ldr	r0, [pc, #104]	; (8003644 <HAL_RCC_GetSysClockFreq+0xd4>)
 80035dc:	f7fc fd94 	bl	8000108 <__udivsi3>
 80035e0:	0003      	movs	r3, r0
 80035e2:	001a      	movs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4353      	muls	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e01a      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	23c0      	movs	r3, #192	; 0xc0
 80035f0:	025b      	lsls	r3, r3, #9
 80035f2:	401a      	ands	r2, r3
 80035f4:	23c0      	movs	r3, #192	; 0xc0
 80035f6:	025b      	lsls	r3, r3, #9
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d109      	bne.n	8003610 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	4814      	ldr	r0, [pc, #80]	; (8003650 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003600:	f7fc fd82 	bl	8000108 <__udivsi3>
 8003604:	0003      	movs	r3, r0
 8003606:	001a      	movs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4353      	muls	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e008      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003614:	f7fc fd78 	bl	8000108 <__udivsi3>
 8003618:	0003      	movs	r3, r0
 800361a:	001a      	movs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4353      	muls	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	613b      	str	r3, [r7, #16]
      break;
 8003626:	e005      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_GetSysClockFreq+0xe0>)
 800362a:	613b      	str	r3, [r7, #16]
      break;
 800362c:	e002      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003630:	613b      	str	r3, [r7, #16]
      break;
 8003632:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003634:	693b      	ldr	r3, [r7, #16]
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b006      	add	sp, #24
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	40021000 	.word	0x40021000
 8003644:	007a1200 	.word	0x007a1200
 8003648:	08005948 	.word	0x08005948
 800364c:	08005958 	.word	0x08005958
 8003650:	02dc6c00 	.word	0x02dc6c00

08003654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b02      	ldr	r3, [pc, #8]	; (8003664 <HAL_RCC_GetHCLKFreq+0x10>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	20000000 	.word	0x20000000

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800366c:	f7ff fff2 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003670:	0001      	movs	r1, r0
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	2207      	movs	r2, #7
 800367a:	4013      	ands	r3, r2
 800367c:	4a04      	ldr	r2, [pc, #16]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	40d9      	lsrs	r1, r3
 8003682:	000b      	movs	r3, r1
}    
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	40021000 	.word	0x40021000
 8003690:	08005940 	.word	0x08005940

08003694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e042      	b.n	800372c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223d      	movs	r2, #61	; 0x3d
 80036aa:	5c9b      	ldrb	r3, [r3, r2]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223c      	movs	r2, #60	; 0x3c
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fe ff11 	bl	80024e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223d      	movs	r2, #61	; 0x3d
 80036c6:	2102      	movs	r1, #2
 80036c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	0019      	movs	r1, r3
 80036d4:	0010      	movs	r0, r2
 80036d6:	f000 fa15 	bl	8003b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2246      	movs	r2, #70	; 0x46
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	223e      	movs	r2, #62	; 0x3e
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	223f      	movs	r2, #63	; 0x3f
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2240      	movs	r2, #64	; 0x40
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2241      	movs	r2, #65	; 0x41
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2242      	movs	r2, #66	; 0x42
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2243      	movs	r2, #67	; 0x43
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2244      	movs	r2, #68	; 0x44
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2245      	movs	r2, #69	; 0x45
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223d      	movs	r2, #61	; 0x3d
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b002      	add	sp, #8
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d108      	bne.n	8003756 <HAL_TIM_PWM_Start+0x22>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	223e      	movs	r2, #62	; 0x3e
 8003748:	5c9b      	ldrb	r3, [r3, r2]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	1e5a      	subs	r2, r3, #1
 8003750:	4193      	sbcs	r3, r2
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e01f      	b.n	8003796 <HAL_TIM_PWM_Start+0x62>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d108      	bne.n	800376e <HAL_TIM_PWM_Start+0x3a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	223f      	movs	r2, #63	; 0x3f
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	1e5a      	subs	r2, r3, #1
 8003768:	4193      	sbcs	r3, r2
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e013      	b.n	8003796 <HAL_TIM_PWM_Start+0x62>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d108      	bne.n	8003786 <HAL_TIM_PWM_Start+0x52>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2240      	movs	r2, #64	; 0x40
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	1e5a      	subs	r2, r3, #1
 8003780:	4193      	sbcs	r3, r2
 8003782:	b2db      	uxtb	r3, r3
 8003784:	e007      	b.n	8003796 <HAL_TIM_PWM_Start+0x62>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2241      	movs	r2, #65	; 0x41
 800378a:	5c9b      	ldrb	r3, [r3, r2]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	1e5a      	subs	r2, r3, #1
 8003792:	4193      	sbcs	r3, r2
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06a      	b.n	8003874 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <HAL_TIM_PWM_Start+0x7a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	223e      	movs	r2, #62	; 0x3e
 80037a8:	2102      	movs	r1, #2
 80037aa:	5499      	strb	r1, [r3, r2]
 80037ac:	e013      	b.n	80037d6 <HAL_TIM_PWM_Start+0xa2>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d104      	bne.n	80037be <HAL_TIM_PWM_Start+0x8a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	223f      	movs	r2, #63	; 0x3f
 80037b8:	2102      	movs	r1, #2
 80037ba:	5499      	strb	r1, [r3, r2]
 80037bc:	e00b      	b.n	80037d6 <HAL_TIM_PWM_Start+0xa2>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_PWM_Start+0x9a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2240      	movs	r2, #64	; 0x40
 80037c8:	2102      	movs	r1, #2
 80037ca:	5499      	strb	r1, [r3, r2]
 80037cc:	e003      	b.n	80037d6 <HAL_TIM_PWM_Start+0xa2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2241      	movs	r2, #65	; 0x41
 80037d2:	2102      	movs	r1, #2
 80037d4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6839      	ldr	r1, [r7, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 fbe6 	bl	8003fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a24      	ldr	r2, [pc, #144]	; (800387c <HAL_TIM_PWM_Start+0x148>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_TIM_PWM_Start+0xce>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a23      	ldr	r2, [pc, #140]	; (8003880 <HAL_TIM_PWM_Start+0x14c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_TIM_PWM_Start+0xce>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a21      	ldr	r2, [pc, #132]	; (8003884 <HAL_TIM_PWM_Start+0x150>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_TIM_PWM_Start+0xd2>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_TIM_PWM_Start+0xd4>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	0209      	lsls	r1, r1, #8
 800381a:	430a      	orrs	r2, r1
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <HAL_TIM_PWM_Start+0x148>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00a      	beq.n	800383e <HAL_TIM_PWM_Start+0x10a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	05db      	lsls	r3, r3, #23
 8003830:	429a      	cmp	r2, r3
 8003832:	d004      	beq.n	800383e <HAL_TIM_PWM_Start+0x10a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a13      	ldr	r2, [pc, #76]	; (8003888 <HAL_TIM_PWM_Start+0x154>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d111      	bne.n	8003862 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2207      	movs	r2, #7
 8003846:	4013      	ands	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b06      	cmp	r3, #6
 800384e:	d010      	beq.n	8003872 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2101      	movs	r1, #1
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003860:	e007      	b.n	8003872 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2101      	movs	r1, #1
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800
 8003888:	40000400 	.word	0x40000400

0800388c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6839      	ldr	r1, [r7, #0]
 800389c:	2200      	movs	r2, #0
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 fb86 	bl	8003fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2d      	ldr	r2, [pc, #180]	; (8003960 <HAL_TIM_PWM_Stop+0xd4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_TIM_PWM_Stop+0x36>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2c      	ldr	r2, [pc, #176]	; (8003964 <HAL_TIM_PWM_Stop+0xd8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIM_PWM_Stop+0x36>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <HAL_TIM_PWM_Stop+0xdc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_TIM_PWM_Stop+0x3a>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_TIM_PWM_Stop+0x3c>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d013      	beq.n	80038f4 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	4a26      	ldr	r2, [pc, #152]	; (800396c <HAL_TIM_PWM_Stop+0xe0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	d10d      	bne.n	80038f4 <HAL_TIM_PWM_Stop+0x68>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	4a24      	ldr	r2, [pc, #144]	; (8003970 <HAL_TIM_PWM_Stop+0xe4>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	d107      	bne.n	80038f4 <HAL_TIM_PWM_Stop+0x68>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4921      	ldr	r1, [pc, #132]	; (8003974 <HAL_TIM_PWM_Stop+0xe8>)
 80038f0:	400a      	ands	r2, r1
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_TIM_PWM_Stop+0xe0>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	d10d      	bne.n	800391c <HAL_TIM_PWM_Stop+0x90>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_TIM_PWM_Stop+0xe4>)
 8003908:	4013      	ands	r3, r2
 800390a:	d107      	bne.n	800391c <HAL_TIM_PWM_Stop+0x90>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2101      	movs	r1, #1
 8003918:	438a      	bics	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <HAL_TIM_PWM_Stop+0xa0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	223e      	movs	r2, #62	; 0x3e
 8003926:	2101      	movs	r1, #1
 8003928:	5499      	strb	r1, [r3, r2]
 800392a:	e013      	b.n	8003954 <HAL_TIM_PWM_Stop+0xc8>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d104      	bne.n	800393c <HAL_TIM_PWM_Stop+0xb0>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	223f      	movs	r2, #63	; 0x3f
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
 800393a:	e00b      	b.n	8003954 <HAL_TIM_PWM_Stop+0xc8>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b08      	cmp	r3, #8
 8003940:	d104      	bne.n	800394c <HAL_TIM_PWM_Stop+0xc0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]
 800394a:	e003      	b.n	8003954 <HAL_TIM_PWM_Stop+0xc8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2241      	movs	r2, #65	; 0x41
 8003950:	2101      	movs	r1, #1
 8003952:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b002      	add	sp, #8
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40014400 	.word	0x40014400
 8003968:	40014800 	.word	0x40014800
 800396c:	00001111 	.word	0x00001111
 8003970:	00000444 	.word	0x00000444
 8003974:	ffff7fff 	.word	0xffff7fff

08003978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2317      	movs	r3, #23
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	223c      	movs	r2, #60	; 0x3c
 8003990:	5c9b      	ldrb	r3, [r3, r2]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003996:	2302      	movs	r3, #2
 8003998:	e0ad      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	223c      	movs	r2, #60	; 0x3c
 800399e:	2101      	movs	r1, #1
 80039a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	d100      	bne.n	80039aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80039a8:	e076      	b.n	8003a98 <HAL_TIM_PWM_ConfigChannel+0x120>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d900      	bls.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80039b0:	e095      	b.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x166>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d04e      	beq.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0xde>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d900      	bls.n	80039c0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80039be:	e08e      	b.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x166>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x56>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d021      	beq.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x98>
 80039cc:	e087      	b.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	0011      	movs	r1, r2
 80039d6:	0018      	movs	r0, r3
 80039d8:	f000 f90a 	bl	8003bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2108      	movs	r1, #8
 80039e8:	430a      	orrs	r2, r1
 80039ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2104      	movs	r1, #4
 80039f8:	438a      	bics	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6999      	ldr	r1, [r3, #24]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
      break;
 8003a0e:	e06b      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	0011      	movs	r1, r2
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 f967 	bl	8003cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0109      	lsls	r1, r1, #4
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4931      	ldr	r1, [pc, #196]	; (8003b00 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	021a      	lsls	r2, r3, #8
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	619a      	str	r2, [r3, #24]
      break;
 8003a54:	e048      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	0011      	movs	r1, r2
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 f9c2 	bl	8003de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2108      	movs	r1, #8
 8003a70:	430a      	orrs	r2, r1
 8003a72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2104      	movs	r1, #4
 8003a80:	438a      	bics	r2, r1
 8003a82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69d9      	ldr	r1, [r3, #28]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	61da      	str	r2, [r3, #28]
      break;
 8003a96:	e027      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	0011      	movs	r1, r2
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 fa21 	bl	8003ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	0109      	lsls	r1, r1, #4
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	490f      	ldr	r1, [pc, #60]	; (8003b00 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69d9      	ldr	r1, [r3, #28]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	61da      	str	r2, [r3, #28]
      break;
 8003adc:	e004      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003ade:	2317      	movs	r3, #23
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	223c      	movs	r2, #60	; 0x3c
 8003aec:	2100      	movs	r1, #0
 8003aee:	5499      	strb	r1, [r3, r2]

  return status;
 8003af0:	2317      	movs	r3, #23
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	781b      	ldrb	r3, [r3, #0]
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b006      	add	sp, #24
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	fffffbff 	.word	0xfffffbff

08003b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <TIM_Base_SetConfig+0xd4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d008      	beq.n	8003b2e <TIM_Base_SetConfig+0x2a>
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	05db      	lsls	r3, r3, #23
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0x2a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2c      	ldr	r2, [pc, #176]	; (8003bdc <TIM_Base_SetConfig+0xd8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2270      	movs	r2, #112	; 0x70
 8003b32:	4393      	bics	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a25      	ldr	r2, [pc, #148]	; (8003bd8 <TIM_Base_SetConfig+0xd4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d014      	beq.n	8003b72 <TIM_Base_SetConfig+0x6e>
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	05db      	lsls	r3, r3, #23
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d00f      	beq.n	8003b72 <TIM_Base_SetConfig+0x6e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <TIM_Base_SetConfig+0xd8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_Base_SetConfig+0x6e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a20      	ldr	r2, [pc, #128]	; (8003be0 <TIM_Base_SetConfig+0xdc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_Base_SetConfig+0x6e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <TIM_Base_SetConfig+0xe0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_Base_SetConfig+0x6e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <TIM_Base_SetConfig+0xe4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d108      	bne.n	8003b84 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <TIM_Base_SetConfig+0xe8>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	4393      	bics	r3, r2
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <TIM_Base_SetConfig+0xd4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0xbe>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <TIM_Base_SetConfig+0xe0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0xbe>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <TIM_Base_SetConfig+0xe4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d103      	bne.n	8003bca <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	615a      	str	r2, [r3, #20]
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40002000 	.word	0x40002000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800
 8003bec:	fffffcff 	.word	0xfffffcff

08003bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4393      	bics	r3, r2
 8003c02:	001a      	movs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2270      	movs	r2, #112	; 0x70
 8003c1e:	4393      	bics	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2203      	movs	r2, #3
 8003c26:	4393      	bics	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2202      	movs	r2, #2
 8003c38:	4393      	bics	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <TIM_OC1_SetConfig+0xe8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d007      	beq.n	8003c5e <TIM_OC1_SetConfig+0x6e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <TIM_OC1_SetConfig+0xec>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d003      	beq.n	8003c5e <TIM_OC1_SetConfig+0x6e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <TIM_OC1_SetConfig+0xf0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10c      	bne.n	8003c78 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2208      	movs	r2, #8
 8003c62:	4393      	bics	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2204      	movs	r2, #4
 8003c74:	4393      	bics	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <TIM_OC1_SetConfig+0xe8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d007      	beq.n	8003c90 <TIM_OC1_SetConfig+0xa0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <TIM_OC1_SetConfig+0xec>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_OC1_SetConfig+0xa0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <TIM_OC1_SetConfig+0xf0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d111      	bne.n	8003cb4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <TIM_OC1_SetConfig+0xf4>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <TIM_OC1_SetConfig+0xf8>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b006      	add	sp, #24
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800
 8003ce4:	fffffeff 	.word	0xfffffeff
 8003ce8:	fffffdff 	.word	0xfffffdff

08003cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	4393      	bics	r3, r2
 8003cfe:	001a      	movs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <TIM_OC2_SetConfig+0xe0>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <TIM_OC2_SetConfig+0xe4>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2220      	movs	r2, #32
 8003d36:	4393      	bics	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <TIM_OC2_SetConfig+0xe8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10d      	bne.n	8003d6a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	4393      	bics	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2240      	movs	r2, #64	; 0x40
 8003d66:	4393      	bics	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <TIM_OC2_SetConfig+0xe8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <TIM_OC2_SetConfig+0x96>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <TIM_OC2_SetConfig+0xec>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d003      	beq.n	8003d82 <TIM_OC2_SetConfig+0x96>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <TIM_OC2_SetConfig+0xf0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d113      	bne.n	8003daa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <TIM_OC2_SetConfig+0xf4>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <TIM_OC2_SetConfig+0xf8>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	621a      	str	r2, [r3, #32]
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b006      	add	sp, #24
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	ffff8fff 	.word	0xffff8fff
 8003dd0:	fffffcff 	.word	0xfffffcff
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800
 8003de0:	fffffbff 	.word	0xfffffbff
 8003de4:	fffff7ff 	.word	0xfffff7ff

08003de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4a33      	ldr	r2, [pc, #204]	; (8003ec4 <TIM_OC3_SetConfig+0xdc>)
 8003df8:	401a      	ands	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2270      	movs	r2, #112	; 0x70
 8003e14:	4393      	bics	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <TIM_OC3_SetConfig+0xe0>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <TIM_OC3_SetConfig+0xe4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10d      	bne.n	8003e62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <TIM_OC3_SetConfig+0xe8>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ed4 <TIM_OC3_SetConfig+0xec>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a19      	ldr	r2, [pc, #100]	; (8003ecc <TIM_OC3_SetConfig+0xe4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <TIM_OC3_SetConfig+0x92>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <TIM_OC3_SetConfig+0xf0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_OC3_SetConfig+0x92>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <TIM_OC3_SetConfig+0xf4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d113      	bne.n	8003ea2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <TIM_OC3_SetConfig+0xf8>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <TIM_OC3_SetConfig+0xfc>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b006      	add	sp, #24
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	fffffeff 	.word	0xfffffeff
 8003ec8:	fffffdff 	.word	0xfffffdff
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	fffff7ff 	.word	0xfffff7ff
 8003ed4:	fffffbff 	.word	0xfffffbff
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	ffffefff 	.word	0xffffefff
 8003ee4:	ffffdfff 	.word	0xffffdfff

08003ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <TIM_OC4_SetConfig+0xa8>)
 8003ef8:	401a      	ands	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a20      	ldr	r2, [pc, #128]	; (8003f94 <TIM_OC4_SetConfig+0xac>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <TIM_OC4_SetConfig+0xb0>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <TIM_OC4_SetConfig+0xb4>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <TIM_OC4_SetConfig+0xb8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_OC4_SetConfig+0x70>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <TIM_OC4_SetConfig+0xbc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_OC4_SetConfig+0x70>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <TIM_OC4_SetConfig+0xc0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d109      	bne.n	8003f6c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	4a14      	ldr	r2, [pc, #80]	; (8003fac <TIM_OC4_SetConfig+0xc4>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b006      	add	sp, #24
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	ffffefff 	.word	0xffffefff
 8003f94:	ffff8fff 	.word	0xffff8fff
 8003f98:	fffffcff 	.word	0xfffffcff
 8003f9c:	ffffdfff 	.word	0xffffdfff
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800
 8003fac:	ffffbfff 	.word	0xffffbfff

08003fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	221f      	movs	r2, #31
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	0013      	movs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	43d2      	mvns	r2, r2
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	211f      	movs	r1, #31
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4099      	lsls	r1, r3
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b006      	add	sp, #24
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	223c      	movs	r2, #60	; 0x3c
 8004006:	5c9b      	ldrb	r3, [r3, r2]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800400c:	2302      	movs	r3, #2
 800400e:	e042      	b.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	223c      	movs	r2, #60	; 0x3c
 8004014:	2101      	movs	r1, #1
 8004016:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	223d      	movs	r2, #61	; 0x3d
 800401c:	2102      	movs	r1, #2
 800401e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2270      	movs	r2, #112	; 0x70
 8004034:	4393      	bics	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00a      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	429a      	cmp	r2, r3
 800405e:	d004      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10c      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	4393      	bics	r3, r2
 8004070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	4313      	orrs	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	223d      	movs	r2, #61	; 0x3d
 8004088:	2101      	movs	r1, #1
 800408a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	223c      	movs	r2, #60	; 0x3c
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400

080040a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e044      	b.n	8004144 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2278      	movs	r2, #120	; 0x78
 80040c6:	2100      	movs	r1, #0
 80040c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7fe fa65 	bl	800259c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2224      	movs	r2, #36	; 0x24
 80040d6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2101      	movs	r1, #1
 80040e4:	438a      	bics	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f000 f830 	bl	8004150 <UART_SetConfig>
 80040f0:	0003      	movs	r3, r0
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e024      	b.n	8004144 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0018      	movs	r0, r3
 8004106:	f000 f963 	bl	80043d0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	490d      	ldr	r1, [pc, #52]	; (800414c <HAL_UART_Init+0xa4>)
 8004116:	400a      	ands	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	212a      	movs	r1, #42	; 0x2a
 8004126:	438a      	bics	r2, r1
 8004128:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2101      	movs	r1, #1
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0018      	movs	r0, r3
 800413e:	f000 f9fb 	bl	8004538 <UART_CheckIdleState>
 8004142:	0003      	movs	r3, r0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}
 800414c:	ffffb7ff 	.word	0xffffb7ff

08004150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004158:	231e      	movs	r3, #30
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a8d      	ldr	r2, [pc, #564]	; (80043b4 <UART_SetConfig+0x264>)
 8004180:	4013      	ands	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	430a      	orrs	r2, r1
 800418c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a88      	ldr	r2, [pc, #544]	; (80043b8 <UART_SetConfig+0x268>)
 8004196:	4013      	ands	r3, r2
 8004198:	0019      	movs	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a7f      	ldr	r2, [pc, #508]	; (80043bc <UART_SetConfig+0x26c>)
 80041be:	4013      	ands	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a7b      	ldr	r2, [pc, #492]	; (80043c0 <UART_SetConfig+0x270>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d127      	bne.n	8004226 <UART_SetConfig+0xd6>
 80041d6:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <UART_SetConfig+0x274>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	2203      	movs	r2, #3
 80041dc:	4013      	ands	r3, r2
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d00d      	beq.n	80041fe <UART_SetConfig+0xae>
 80041e2:	d81b      	bhi.n	800421c <UART_SetConfig+0xcc>
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d014      	beq.n	8004212 <UART_SetConfig+0xc2>
 80041e8:	d818      	bhi.n	800421c <UART_SetConfig+0xcc>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <UART_SetConfig+0xa4>
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d00a      	beq.n	8004208 <UART_SetConfig+0xb8>
 80041f2:	e013      	b.n	800421c <UART_SetConfig+0xcc>
 80041f4:	231f      	movs	r3, #31
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e021      	b.n	8004242 <UART_SetConfig+0xf2>
 80041fe:	231f      	movs	r3, #31
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	2202      	movs	r2, #2
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e01c      	b.n	8004242 <UART_SetConfig+0xf2>
 8004208:	231f      	movs	r3, #31
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2204      	movs	r2, #4
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e017      	b.n	8004242 <UART_SetConfig+0xf2>
 8004212:	231f      	movs	r3, #31
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2208      	movs	r2, #8
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e012      	b.n	8004242 <UART_SetConfig+0xf2>
 800421c:	231f      	movs	r3, #31
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2210      	movs	r2, #16
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0xf2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a67      	ldr	r2, [pc, #412]	; (80043c8 <UART_SetConfig+0x278>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d104      	bne.n	800423a <UART_SetConfig+0xea>
 8004230:	231f      	movs	r3, #31
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e003      	b.n	8004242 <UART_SetConfig+0xf2>
 800423a:	231f      	movs	r3, #31
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2210      	movs	r2, #16
 8004240:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	429a      	cmp	r2, r3
 800424c:	d15c      	bne.n	8004308 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800424e:	231f      	movs	r3, #31
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d015      	beq.n	8004284 <UART_SetConfig+0x134>
 8004258:	dc18      	bgt.n	800428c <UART_SetConfig+0x13c>
 800425a:	2b04      	cmp	r3, #4
 800425c:	d00d      	beq.n	800427a <UART_SetConfig+0x12a>
 800425e:	dc15      	bgt.n	800428c <UART_SetConfig+0x13c>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <UART_SetConfig+0x11a>
 8004264:	2b02      	cmp	r3, #2
 8004266:	d005      	beq.n	8004274 <UART_SetConfig+0x124>
 8004268:	e010      	b.n	800428c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800426a:	f7ff f9fd 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 800426e:	0003      	movs	r3, r0
 8004270:	61bb      	str	r3, [r7, #24]
        break;
 8004272:	e012      	b.n	800429a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004274:	4b55      	ldr	r3, [pc, #340]	; (80043cc <UART_SetConfig+0x27c>)
 8004276:	61bb      	str	r3, [r7, #24]
        break;
 8004278:	e00f      	b.n	800429a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427a:	f7ff f979 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800427e:	0003      	movs	r3, r0
 8004280:	61bb      	str	r3, [r7, #24]
        break;
 8004282:	e00a      	b.n	800429a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	61bb      	str	r3, [r7, #24]
        break;
 800428a:	e006      	b.n	800429a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004290:	231e      	movs	r3, #30
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
        break;
 8004298:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d100      	bne.n	80042a2 <UART_SetConfig+0x152>
 80042a0:	e07a      	b.n	8004398 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	005a      	lsls	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	18d2      	adds	r2, r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	0019      	movs	r1, r3
 80042b4:	0010      	movs	r0, r2
 80042b6:	f7fb ff27 	bl	8000108 <__udivsi3>
 80042ba:	0003      	movs	r3, r0
 80042bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b0f      	cmp	r3, #15
 80042c2:	d91c      	bls.n	80042fe <UART_SetConfig+0x1ae>
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	025b      	lsls	r3, r3, #9
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d217      	bcs.n	80042fe <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	200e      	movs	r0, #14
 80042d4:	183b      	adds	r3, r7, r0
 80042d6:	210f      	movs	r1, #15
 80042d8:	438a      	bics	r2, r1
 80042da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2207      	movs	r2, #7
 80042e4:	4013      	ands	r3, r2
 80042e6:	b299      	uxth	r1, r3
 80042e8:	183b      	adds	r3, r7, r0
 80042ea:	183a      	adds	r2, r7, r0
 80042ec:	8812      	ldrh	r2, [r2, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	183a      	adds	r2, r7, r0
 80042f8:	8812      	ldrh	r2, [r2, #0]
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	e04c      	b.n	8004398 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80042fe:	231e      	movs	r3, #30
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e047      	b.n	8004398 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004308:	231f      	movs	r3, #31
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b08      	cmp	r3, #8
 8004310:	d015      	beq.n	800433e <UART_SetConfig+0x1ee>
 8004312:	dc18      	bgt.n	8004346 <UART_SetConfig+0x1f6>
 8004314:	2b04      	cmp	r3, #4
 8004316:	d00d      	beq.n	8004334 <UART_SetConfig+0x1e4>
 8004318:	dc15      	bgt.n	8004346 <UART_SetConfig+0x1f6>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <UART_SetConfig+0x1d4>
 800431e:	2b02      	cmp	r3, #2
 8004320:	d005      	beq.n	800432e <UART_SetConfig+0x1de>
 8004322:	e010      	b.n	8004346 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004324:	f7ff f9a0 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8004328:	0003      	movs	r3, r0
 800432a:	61bb      	str	r3, [r7, #24]
        break;
 800432c:	e012      	b.n	8004354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432e:	4b27      	ldr	r3, [pc, #156]	; (80043cc <UART_SetConfig+0x27c>)
 8004330:	61bb      	str	r3, [r7, #24]
        break;
 8004332:	e00f      	b.n	8004354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004334:	f7ff f91c 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004338:	0003      	movs	r3, r0
 800433a:	61bb      	str	r3, [r7, #24]
        break;
 800433c:	e00a      	b.n	8004354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	61bb      	str	r3, [r7, #24]
        break;
 8004344:	e006      	b.n	8004354 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800434a:	231e      	movs	r3, #30
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
        break;
 8004352:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01e      	beq.n	8004398 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	085a      	lsrs	r2, r3, #1
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	18d2      	adds	r2, r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0019      	movs	r1, r3
 800436a:	0010      	movs	r0, r2
 800436c:	f7fb fecc 	bl	8000108 <__udivsi3>
 8004370:	0003      	movs	r3, r0
 8004372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b0f      	cmp	r3, #15
 8004378:	d90a      	bls.n	8004390 <UART_SetConfig+0x240>
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	025b      	lsls	r3, r3, #9
 8004380:	429a      	cmp	r2, r3
 8004382:	d205      	bcs.n	8004390 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	b29a      	uxth	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	e003      	b.n	8004398 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004390:	231e      	movs	r3, #30
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043a4:	231e      	movs	r3, #30
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	781b      	ldrb	r3, [r3, #0]
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b008      	add	sp, #32
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	efff69f3 	.word	0xefff69f3
 80043b8:	ffffcfff 	.word	0xffffcfff
 80043bc:	fffff4ff 	.word	0xfffff4ff
 80043c0:	40013800 	.word	0x40013800
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40004400 	.word	0x40004400
 80043cc:	007a1200 	.word	0x007a1200

080043d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	2201      	movs	r2, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	d00b      	beq.n	80043fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a4a      	ldr	r2, [pc, #296]	; (8004514 <UART_AdvFeatureConfig+0x144>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	0019      	movs	r1, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2202      	movs	r2, #2
 8004400:	4013      	ands	r3, r2
 8004402:	d00b      	beq.n	800441c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4a43      	ldr	r2, [pc, #268]	; (8004518 <UART_AdvFeatureConfig+0x148>)
 800440c:	4013      	ands	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2204      	movs	r2, #4
 8004422:	4013      	ands	r3, r2
 8004424:	d00b      	beq.n	800443e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a3b      	ldr	r2, [pc, #236]	; (800451c <UART_AdvFeatureConfig+0x14c>)
 800442e:	4013      	ands	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2208      	movs	r2, #8
 8004444:	4013      	ands	r3, r2
 8004446:	d00b      	beq.n	8004460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4a34      	ldr	r2, [pc, #208]	; (8004520 <UART_AdvFeatureConfig+0x150>)
 8004450:	4013      	ands	r3, r2
 8004452:	0019      	movs	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2210      	movs	r2, #16
 8004466:	4013      	ands	r3, r2
 8004468:	d00b      	beq.n	8004482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4a2c      	ldr	r2, [pc, #176]	; (8004524 <UART_AdvFeatureConfig+0x154>)
 8004472:	4013      	ands	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2220      	movs	r2, #32
 8004488:	4013      	ands	r3, r2
 800448a:	d00b      	beq.n	80044a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	4a25      	ldr	r2, [pc, #148]	; (8004528 <UART_AdvFeatureConfig+0x158>)
 8004494:	4013      	ands	r3, r2
 8004496:	0019      	movs	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2240      	movs	r2, #64	; 0x40
 80044aa:	4013      	ands	r3, r2
 80044ac:	d01d      	beq.n	80044ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4a1d      	ldr	r2, [pc, #116]	; (800452c <UART_AdvFeatureConfig+0x15c>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	0019      	movs	r1, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	035b      	lsls	r3, r3, #13
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d10b      	bne.n	80044ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4a15      	ldr	r2, [pc, #84]	; (8004530 <UART_AdvFeatureConfig+0x160>)
 80044da:	4013      	ands	r3, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	4013      	ands	r3, r2
 80044f2:	d00b      	beq.n	800450c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <UART_AdvFeatureConfig+0x164>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	0019      	movs	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	b002      	add	sp, #8
 8004512:	bd80      	pop	{r7, pc}
 8004514:	fffdffff 	.word	0xfffdffff
 8004518:	fffeffff 	.word	0xfffeffff
 800451c:	fffbffff 	.word	0xfffbffff
 8004520:	ffff7fff 	.word	0xffff7fff
 8004524:	ffffefff 	.word	0xffffefff
 8004528:	ffffdfff 	.word	0xffffdfff
 800452c:	ffefffff 	.word	0xffefffff
 8004530:	ff9fffff 	.word	0xff9fffff
 8004534:	fff7ffff 	.word	0xfff7ffff

08004538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b092      	sub	sp, #72	; 0x48
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2284      	movs	r2, #132	; 0x84
 8004544:	2100      	movs	r1, #0
 8004546:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004548:	f7fe f92e 	bl	80027a8 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2208      	movs	r2, #8
 8004558:	4013      	ands	r3, r2
 800455a:	2b08      	cmp	r3, #8
 800455c:	d12c      	bne.n	80045b8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	2280      	movs	r2, #128	; 0x80
 8004562:	0391      	lsls	r1, r2, #14
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4a46      	ldr	r2, [pc, #280]	; (8004680 <UART_CheckIdleState+0x148>)
 8004568:	9200      	str	r2, [sp, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	f000 f88c 	bl	8004688 <UART_WaitOnFlagUntilTimeout>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d021      	beq.n	80045b8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004574:	f3ef 8310 	mrs	r3, PRIMASK
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800457c:	63bb      	str	r3, [r7, #56]	; 0x38
 800457e:	2301      	movs	r3, #1
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	f383 8810 	msr	PRIMASK, r3
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	438a      	bics	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	f383 8810 	msr	PRIMASK, r3
}
 80045a4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2278      	movs	r2, #120	; 0x78
 80045b0:	2100      	movs	r1, #0
 80045b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e05f      	b.n	8004678 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2204      	movs	r2, #4
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d146      	bne.n	8004654 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c8:	2280      	movs	r2, #128	; 0x80
 80045ca:	03d1      	lsls	r1, r2, #15
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <UART_CheckIdleState+0x148>)
 80045d0:	9200      	str	r2, [sp, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f000 f858 	bl	8004688 <UART_WaitOnFlagUntilTimeout>
 80045d8:	1e03      	subs	r3, r0, #0
 80045da:	d03b      	beq.n	8004654 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045dc:	f3ef 8310 	mrs	r3, PRIMASK
 80045e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80045e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	2301      	movs	r3, #1
 80045e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f383 8810 	msr	PRIMASK, r3
}
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4921      	ldr	r1, [pc, #132]	; (8004684 <UART_CheckIdleState+0x14c>)
 80045fe:	400a      	ands	r2, r1
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f383 8810 	msr	PRIMASK, r3
}
 800460c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460e:	f3ef 8310 	mrs	r3, PRIMASK
 8004612:	61bb      	str	r3, [r7, #24]
  return(result);
 8004614:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
 8004618:	2301      	movs	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2101      	movs	r1, #1
 8004630:	438a      	bics	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	f383 8810 	msr	PRIMASK, r3
}
 800463e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	2120      	movs	r1, #32
 8004646:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2278      	movs	r2, #120	; 0x78
 800464c:	2100      	movs	r1, #0
 800464e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e011      	b.n	8004678 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2280      	movs	r2, #128	; 0x80
 800465e:	2120      	movs	r1, #32
 8004660:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2278      	movs	r2, #120	; 0x78
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b010      	add	sp, #64	; 0x40
 800467e:	bd80      	pop	{r7, pc}
 8004680:	01ffffff 	.word	0x01ffffff
 8004684:	fffffedf 	.word	0xfffffedf

08004688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	1dfb      	adds	r3, r7, #7
 8004696:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004698:	e04b      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3301      	adds	r3, #1
 800469e:	d048      	beq.n	8004732 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fe f882 	bl	80027a8 <HAL_GetTick>
 80046a4:	0002      	movs	r2, r0
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e04b      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2204      	movs	r2, #4
 80046c2:	4013      	ands	r3, r2
 80046c4:	d035      	beq.n	8004732 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	2208      	movs	r2, #8
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d111      	bne.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2208      	movs	r2, #8
 80046da:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 f83c 	bl	800475c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2284      	movs	r2, #132	; 0x84
 80046e8:	2108      	movs	r1, #8
 80046ea:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2278      	movs	r2, #120	; 0x78
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e02c      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	401a      	ands	r2, r3
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	429a      	cmp	r2, r3
 800470a:	d112      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	0112      	lsls	r2, r2, #4
 8004714:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	0018      	movs	r0, r3
 800471a:	f000 f81f 	bl	800475c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2284      	movs	r2, #132	; 0x84
 8004722:	2120      	movs	r1, #32
 8004724:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2278      	movs	r2, #120	; 0x78
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e00f      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	4013      	ands	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	425a      	negs	r2, r3
 8004742:	4153      	adcs	r3, r2
 8004744:	b2db      	uxtb	r3, r3
 8004746:	001a      	movs	r2, r3
 8004748:	1dfb      	adds	r3, r7, #7
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d0a4      	beq.n	800469a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08e      	sub	sp, #56	; 0x38
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004764:	f3ef 8310 	mrs	r3, PRIMASK
 8004768:	617b      	str	r3, [r7, #20]
  return(result);
 800476a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
 800476e:	2301      	movs	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f383 8810 	msr	PRIMASK, r3
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4926      	ldr	r1, [pc, #152]	; (8004820 <UART_EndRxTransfer+0xc4>)
 8004786:	400a      	ands	r2, r1
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004796:	f3ef 8310 	mrs	r3, PRIMASK
 800479a:	623b      	str	r3, [r7, #32]
  return(result);
 800479c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
 80047a0:	2301      	movs	r3, #1
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	f383 8810 	msr	PRIMASK, r3
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2101      	movs	r1, #1
 80047b8:	438a      	bics	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	f383 8810 	msr	PRIMASK, r3
}
 80047c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d118      	bne.n	8004802 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d0:	f3ef 8310 	mrs	r3, PRIMASK
 80047d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80047d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047da:	2301      	movs	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f383 8810 	msr	PRIMASK, r3
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2110      	movs	r1, #16
 80047f2:	438a      	bics	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f383 8810 	msr	PRIMASK, r3
}
 8004800:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2280      	movs	r2, #128	; 0x80
 8004806:	2120      	movs	r1, #32
 8004808:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	46bd      	mov	sp, r7
 800481a:	b00e      	add	sp, #56	; 0x38
 800481c:	bd80      	pop	{r7, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	fffffedf 	.word	0xfffffedf

08004824 <__libc_init_array>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	2600      	movs	r6, #0
 8004828:	4d0c      	ldr	r5, [pc, #48]	; (800485c <__libc_init_array+0x38>)
 800482a:	4c0d      	ldr	r4, [pc, #52]	; (8004860 <__libc_init_array+0x3c>)
 800482c:	1b64      	subs	r4, r4, r5
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	42a6      	cmp	r6, r4
 8004832:	d109      	bne.n	8004848 <__libc_init_array+0x24>
 8004834:	2600      	movs	r6, #0
 8004836:	f001 f82f 	bl	8005898 <_init>
 800483a:	4d0a      	ldr	r5, [pc, #40]	; (8004864 <__libc_init_array+0x40>)
 800483c:	4c0a      	ldr	r4, [pc, #40]	; (8004868 <__libc_init_array+0x44>)
 800483e:	1b64      	subs	r4, r4, r5
 8004840:	10a4      	asrs	r4, r4, #2
 8004842:	42a6      	cmp	r6, r4
 8004844:	d105      	bne.n	8004852 <__libc_init_array+0x2e>
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	00b3      	lsls	r3, r6, #2
 800484a:	58eb      	ldr	r3, [r5, r3]
 800484c:	4798      	blx	r3
 800484e:	3601      	adds	r6, #1
 8004850:	e7ee      	b.n	8004830 <__libc_init_array+0xc>
 8004852:	00b3      	lsls	r3, r6, #2
 8004854:	58eb      	ldr	r3, [r5, r3]
 8004856:	4798      	blx	r3
 8004858:	3601      	adds	r6, #1
 800485a:	e7f2      	b.n	8004842 <__libc_init_array+0x1e>
 800485c:	08005b40 	.word	0x08005b40
 8004860:	08005b40 	.word	0x08005b40
 8004864:	08005b40 	.word	0x08005b40
 8004868:	08005b44 	.word	0x08005b44

0800486c <memset>:
 800486c:	0003      	movs	r3, r0
 800486e:	1882      	adds	r2, r0, r2
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	7019      	strb	r1, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <sin>:
 800487c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487e:	4a20      	ldr	r2, [pc, #128]	; (8004900 <sin+0x84>)
 8004880:	004b      	lsls	r3, r1, #1
 8004882:	b087      	sub	sp, #28
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	4293      	cmp	r3, r2
 8004888:	dc06      	bgt.n	8004898 <sin+0x1c>
 800488a:	2300      	movs	r3, #0
 800488c:	2200      	movs	r2, #0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	f000 fe53 	bl	800553c <__kernel_sin>
 8004896:	e006      	b.n	80048a6 <sin+0x2a>
 8004898:	4a1a      	ldr	r2, [pc, #104]	; (8004904 <sin+0x88>)
 800489a:	4293      	cmp	r3, r2
 800489c:	dd05      	ble.n	80048aa <sin+0x2e>
 800489e:	0002      	movs	r2, r0
 80048a0:	000b      	movs	r3, r1
 80048a2:	f7fc ffad 	bl	8001800 <__aeabi_dsub>
 80048a6:	b007      	add	sp, #28
 80048a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048aa:	aa02      	add	r2, sp, #8
 80048ac:	f000 f82c 	bl	8004908 <__ieee754_rem_pio2>
 80048b0:	9c04      	ldr	r4, [sp, #16]
 80048b2:	9d05      	ldr	r5, [sp, #20]
 80048b4:	2303      	movs	r3, #3
 80048b6:	4003      	ands	r3, r0
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d00a      	beq.n	80048d2 <sin+0x56>
 80048bc:	9802      	ldr	r0, [sp, #8]
 80048be:	9903      	ldr	r1, [sp, #12]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d00d      	beq.n	80048e0 <sin+0x64>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d115      	bne.n	80048f4 <sin+0x78>
 80048c8:	3301      	adds	r3, #1
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	0022      	movs	r2, r4
 80048ce:	002b      	movs	r3, r5
 80048d0:	e7df      	b.n	8004892 <sin+0x16>
 80048d2:	0022      	movs	r2, r4
 80048d4:	9802      	ldr	r0, [sp, #8]
 80048d6:	9903      	ldr	r1, [sp, #12]
 80048d8:	002b      	movs	r3, r5
 80048da:	f000 fa05 	bl	8004ce8 <__kernel_cos>
 80048de:	e7e2      	b.n	80048a6 <sin+0x2a>
 80048e0:	2301      	movs	r3, #1
 80048e2:	0022      	movs	r2, r4
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	002b      	movs	r3, r5
 80048e8:	f000 fe28 	bl	800553c <__kernel_sin>
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	18c9      	adds	r1, r1, r3
 80048f2:	e7d8      	b.n	80048a6 <sin+0x2a>
 80048f4:	0022      	movs	r2, r4
 80048f6:	002b      	movs	r3, r5
 80048f8:	f000 f9f6 	bl	8004ce8 <__kernel_cos>
 80048fc:	e7f6      	b.n	80048ec <sin+0x70>
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	3fe921fb 	.word	0x3fe921fb
 8004904:	7fefffff 	.word	0x7fefffff

08004908 <__ieee754_rem_pio2>:
 8004908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490a:	004b      	lsls	r3, r1, #1
 800490c:	b091      	sub	sp, #68	; 0x44
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	9302      	str	r3, [sp, #8]
 8004912:	0017      	movs	r7, r2
 8004914:	4bb6      	ldr	r3, [pc, #728]	; (8004bf0 <__ieee754_rem_pio2+0x2e8>)
 8004916:	9a02      	ldr	r2, [sp, #8]
 8004918:	0004      	movs	r4, r0
 800491a:	000d      	movs	r5, r1
 800491c:	9109      	str	r1, [sp, #36]	; 0x24
 800491e:	429a      	cmp	r2, r3
 8004920:	dc09      	bgt.n	8004936 <__ieee754_rem_pio2+0x2e>
 8004922:	0002      	movs	r2, r0
 8004924:	000b      	movs	r3, r1
 8004926:	603a      	str	r2, [r7, #0]
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	2300      	movs	r3, #0
 800492e:	60ba      	str	r2, [r7, #8]
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	2600      	movs	r6, #0
 8004934:	e025      	b.n	8004982 <__ieee754_rem_pio2+0x7a>
 8004936:	4baf      	ldr	r3, [pc, #700]	; (8004bf4 <__ieee754_rem_pio2+0x2ec>)
 8004938:	9a02      	ldr	r2, [sp, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	dd00      	ble.n	8004940 <__ieee754_rem_pio2+0x38>
 800493e:	e06e      	b.n	8004a1e <__ieee754_rem_pio2+0x116>
 8004940:	4ead      	ldr	r6, [pc, #692]	; (8004bf8 <__ieee754_rem_pio2+0x2f0>)
 8004942:	4aae      	ldr	r2, [pc, #696]	; (8004bfc <__ieee754_rem_pio2+0x2f4>)
 8004944:	2d00      	cmp	r5, #0
 8004946:	dd35      	ble.n	80049b4 <__ieee754_rem_pio2+0xac>
 8004948:	0020      	movs	r0, r4
 800494a:	0029      	movs	r1, r5
 800494c:	4baa      	ldr	r3, [pc, #680]	; (8004bf8 <__ieee754_rem_pio2+0x2f0>)
 800494e:	f7fc ff57 	bl	8001800 <__aeabi_dsub>
 8004952:	9b02      	ldr	r3, [sp, #8]
 8004954:	0004      	movs	r4, r0
 8004956:	000d      	movs	r5, r1
 8004958:	42b3      	cmp	r3, r6
 800495a:	d015      	beq.n	8004988 <__ieee754_rem_pio2+0x80>
 800495c:	4aa8      	ldr	r2, [pc, #672]	; (8004c00 <__ieee754_rem_pio2+0x2f8>)
 800495e:	4ba9      	ldr	r3, [pc, #676]	; (8004c04 <__ieee754_rem_pio2+0x2fc>)
 8004960:	f7fc ff4e 	bl	8001800 <__aeabi_dsub>
 8004964:	0002      	movs	r2, r0
 8004966:	000b      	movs	r3, r1
 8004968:	0020      	movs	r0, r4
 800496a:	603a      	str	r2, [r7, #0]
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	0029      	movs	r1, r5
 8004970:	f7fc ff46 	bl	8001800 <__aeabi_dsub>
 8004974:	4aa2      	ldr	r2, [pc, #648]	; (8004c00 <__ieee754_rem_pio2+0x2f8>)
 8004976:	4ba3      	ldr	r3, [pc, #652]	; (8004c04 <__ieee754_rem_pio2+0x2fc>)
 8004978:	f7fc ff42 	bl	8001800 <__aeabi_dsub>
 800497c:	2601      	movs	r6, #1
 800497e:	60b8      	str	r0, [r7, #8]
 8004980:	60f9      	str	r1, [r7, #12]
 8004982:	0030      	movs	r0, r6
 8004984:	b011      	add	sp, #68	; 0x44
 8004986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004988:	22d3      	movs	r2, #211	; 0xd3
 800498a:	4b9e      	ldr	r3, [pc, #632]	; (8004c04 <__ieee754_rem_pio2+0x2fc>)
 800498c:	0552      	lsls	r2, r2, #21
 800498e:	f7fc ff37 	bl	8001800 <__aeabi_dsub>
 8004992:	4a9d      	ldr	r2, [pc, #628]	; (8004c08 <__ieee754_rem_pio2+0x300>)
 8004994:	4b9d      	ldr	r3, [pc, #628]	; (8004c0c <__ieee754_rem_pio2+0x304>)
 8004996:	0004      	movs	r4, r0
 8004998:	000d      	movs	r5, r1
 800499a:	f7fc ff31 	bl	8001800 <__aeabi_dsub>
 800499e:	0002      	movs	r2, r0
 80049a0:	000b      	movs	r3, r1
 80049a2:	0020      	movs	r0, r4
 80049a4:	603a      	str	r2, [r7, #0]
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	0029      	movs	r1, r5
 80049aa:	f7fc ff29 	bl	8001800 <__aeabi_dsub>
 80049ae:	4a96      	ldr	r2, [pc, #600]	; (8004c08 <__ieee754_rem_pio2+0x300>)
 80049b0:	4b96      	ldr	r3, [pc, #600]	; (8004c0c <__ieee754_rem_pio2+0x304>)
 80049b2:	e7e1      	b.n	8004978 <__ieee754_rem_pio2+0x70>
 80049b4:	0020      	movs	r0, r4
 80049b6:	0029      	movs	r1, r5
 80049b8:	4b8f      	ldr	r3, [pc, #572]	; (8004bf8 <__ieee754_rem_pio2+0x2f0>)
 80049ba:	f7fb fd77 	bl	80004ac <__aeabi_dadd>
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	0004      	movs	r4, r0
 80049c2:	000d      	movs	r5, r1
 80049c4:	42b3      	cmp	r3, r6
 80049c6:	d014      	beq.n	80049f2 <__ieee754_rem_pio2+0xea>
 80049c8:	4a8d      	ldr	r2, [pc, #564]	; (8004c00 <__ieee754_rem_pio2+0x2f8>)
 80049ca:	4b8e      	ldr	r3, [pc, #568]	; (8004c04 <__ieee754_rem_pio2+0x2fc>)
 80049cc:	f7fb fd6e 	bl	80004ac <__aeabi_dadd>
 80049d0:	0002      	movs	r2, r0
 80049d2:	000b      	movs	r3, r1
 80049d4:	0020      	movs	r0, r4
 80049d6:	603a      	str	r2, [r7, #0]
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	0029      	movs	r1, r5
 80049dc:	f7fc ff10 	bl	8001800 <__aeabi_dsub>
 80049e0:	4a87      	ldr	r2, [pc, #540]	; (8004c00 <__ieee754_rem_pio2+0x2f8>)
 80049e2:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <__ieee754_rem_pio2+0x2fc>)
 80049e4:	f7fb fd62 	bl	80004ac <__aeabi_dadd>
 80049e8:	2601      	movs	r6, #1
 80049ea:	60b8      	str	r0, [r7, #8]
 80049ec:	60f9      	str	r1, [r7, #12]
 80049ee:	4276      	negs	r6, r6
 80049f0:	e7c7      	b.n	8004982 <__ieee754_rem_pio2+0x7a>
 80049f2:	22d3      	movs	r2, #211	; 0xd3
 80049f4:	4b83      	ldr	r3, [pc, #524]	; (8004c04 <__ieee754_rem_pio2+0x2fc>)
 80049f6:	0552      	lsls	r2, r2, #21
 80049f8:	f7fb fd58 	bl	80004ac <__aeabi_dadd>
 80049fc:	4a82      	ldr	r2, [pc, #520]	; (8004c08 <__ieee754_rem_pio2+0x300>)
 80049fe:	4b83      	ldr	r3, [pc, #524]	; (8004c0c <__ieee754_rem_pio2+0x304>)
 8004a00:	0004      	movs	r4, r0
 8004a02:	000d      	movs	r5, r1
 8004a04:	f7fb fd52 	bl	80004ac <__aeabi_dadd>
 8004a08:	0002      	movs	r2, r0
 8004a0a:	000b      	movs	r3, r1
 8004a0c:	0020      	movs	r0, r4
 8004a0e:	603a      	str	r2, [r7, #0]
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	0029      	movs	r1, r5
 8004a14:	f7fc fef4 	bl	8001800 <__aeabi_dsub>
 8004a18:	4a7b      	ldr	r2, [pc, #492]	; (8004c08 <__ieee754_rem_pio2+0x300>)
 8004a1a:	4b7c      	ldr	r3, [pc, #496]	; (8004c0c <__ieee754_rem_pio2+0x304>)
 8004a1c:	e7e2      	b.n	80049e4 <__ieee754_rem_pio2+0xdc>
 8004a1e:	4b7c      	ldr	r3, [pc, #496]	; (8004c10 <__ieee754_rem_pio2+0x308>)
 8004a20:	9a02      	ldr	r2, [sp, #8]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	dd00      	ble.n	8004a28 <__ieee754_rem_pio2+0x120>
 8004a26:	e0d3      	b.n	8004bd0 <__ieee754_rem_pio2+0x2c8>
 8004a28:	0020      	movs	r0, r4
 8004a2a:	0029      	movs	r1, r5
 8004a2c:	f000 fe32 	bl	8005694 <fabs>
 8004a30:	4a78      	ldr	r2, [pc, #480]	; (8004c14 <__ieee754_rem_pio2+0x30c>)
 8004a32:	4b79      	ldr	r3, [pc, #484]	; (8004c18 <__ieee754_rem_pio2+0x310>)
 8004a34:	0004      	movs	r4, r0
 8004a36:	000d      	movs	r5, r1
 8004a38:	f7fc fc76 	bl	8001328 <__aeabi_dmul>
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	4b77      	ldr	r3, [pc, #476]	; (8004c1c <__ieee754_rem_pio2+0x314>)
 8004a40:	f7fb fd34 	bl	80004ac <__aeabi_dadd>
 8004a44:	f7fd fa6e 	bl	8001f24 <__aeabi_d2iz>
 8004a48:	0006      	movs	r6, r0
 8004a4a:	f7fd faa1 	bl	8001f90 <__aeabi_i2d>
 8004a4e:	4a6b      	ldr	r2, [pc, #428]	; (8004bfc <__ieee754_rem_pio2+0x2f4>)
 8004a50:	4b69      	ldr	r3, [pc, #420]	; (8004bf8 <__ieee754_rem_pio2+0x2f0>)
 8004a52:	9006      	str	r0, [sp, #24]
 8004a54:	9107      	str	r1, [sp, #28]
 8004a56:	f7fc fc67 	bl	8001328 <__aeabi_dmul>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	000b      	movs	r3, r1
 8004a5e:	0020      	movs	r0, r4
 8004a60:	0029      	movs	r1, r5
 8004a62:	f7fc fecd 	bl	8001800 <__aeabi_dsub>
 8004a66:	4a66      	ldr	r2, [pc, #408]	; (8004c00 <__ieee754_rem_pio2+0x2f8>)
 8004a68:	9004      	str	r0, [sp, #16]
 8004a6a:	9105      	str	r1, [sp, #20]
 8004a6c:	9806      	ldr	r0, [sp, #24]
 8004a6e:	9907      	ldr	r1, [sp, #28]
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <__ieee754_rem_pio2+0x2fc>)
 8004a72:	f7fc fc59 	bl	8001328 <__aeabi_dmul>
 8004a76:	0004      	movs	r4, r0
 8004a78:	000d      	movs	r5, r1
 8004a7a:	2e1f      	cmp	r6, #31
 8004a7c:	dc0f      	bgt.n	8004a9e <__ieee754_rem_pio2+0x196>
 8004a7e:	4a68      	ldr	r2, [pc, #416]	; (8004c20 <__ieee754_rem_pio2+0x318>)
 8004a80:	1e73      	subs	r3, r6, #1
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	589b      	ldr	r3, [r3, r2]
 8004a86:	9a02      	ldr	r2, [sp, #8]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d008      	beq.n	8004a9e <__ieee754_rem_pio2+0x196>
 8004a8c:	9804      	ldr	r0, [sp, #16]
 8004a8e:	9905      	ldr	r1, [sp, #20]
 8004a90:	0022      	movs	r2, r4
 8004a92:	002b      	movs	r3, r5
 8004a94:	f7fc feb4 	bl	8001800 <__aeabi_dsub>
 8004a98:	6038      	str	r0, [r7, #0]
 8004a9a:	6079      	str	r1, [r7, #4]
 8004a9c:	e012      	b.n	8004ac4 <__ieee754_rem_pio2+0x1bc>
 8004a9e:	0022      	movs	r2, r4
 8004aa0:	9804      	ldr	r0, [sp, #16]
 8004aa2:	9905      	ldr	r1, [sp, #20]
 8004aa4:	002b      	movs	r3, r5
 8004aa6:	f7fc feab 	bl	8001800 <__aeabi_dsub>
 8004aaa:	9b02      	ldr	r3, [sp, #8]
 8004aac:	151b      	asrs	r3, r3, #20
 8004aae:	9308      	str	r3, [sp, #32]
 8004ab0:	9a08      	ldr	r2, [sp, #32]
 8004ab2:	004b      	lsls	r3, r1, #1
 8004ab4:	0d5b      	lsrs	r3, r3, #21
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	dc21      	bgt.n	8004b00 <__ieee754_rem_pio2+0x1f8>
 8004abc:	0002      	movs	r2, r0
 8004abe:	000b      	movs	r3, r1
 8004ac0:	603a      	str	r2, [r7, #0]
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	9804      	ldr	r0, [sp, #16]
 8004ac6:	9905      	ldr	r1, [sp, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	9302      	str	r3, [sp, #8]
 8004ace:	9b02      	ldr	r3, [sp, #8]
 8004ad0:	f7fc fe96 	bl	8001800 <__aeabi_dsub>
 8004ad4:	0022      	movs	r2, r4
 8004ad6:	002b      	movs	r3, r5
 8004ad8:	f7fc fe92 	bl	8001800 <__aeabi_dsub>
 8004adc:	000b      	movs	r3, r1
 8004ade:	0002      	movs	r2, r0
 8004ae0:	60ba      	str	r2, [r7, #8]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db00      	blt.n	8004aec <__ieee754_rem_pio2+0x1e4>
 8004aea:	e74a      	b.n	8004982 <__ieee754_rem_pio2+0x7a>
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	061b      	lsls	r3, r3, #24
 8004af0:	469c      	mov	ip, r3
 8004af2:	9c02      	ldr	r4, [sp, #8]
 8004af4:	18c9      	adds	r1, r1, r3
 8004af6:	4464      	add	r4, ip
 8004af8:	607c      	str	r4, [r7, #4]
 8004afa:	60b8      	str	r0, [r7, #8]
 8004afc:	60f9      	str	r1, [r7, #12]
 8004afe:	e776      	b.n	80049ee <__ieee754_rem_pio2+0xe6>
 8004b00:	22d3      	movs	r2, #211	; 0xd3
 8004b02:	9806      	ldr	r0, [sp, #24]
 8004b04:	9907      	ldr	r1, [sp, #28]
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <__ieee754_rem_pio2+0x2fc>)
 8004b08:	0552      	lsls	r2, r2, #21
 8004b0a:	f7fc fc0d 	bl	8001328 <__aeabi_dmul>
 8004b0e:	0004      	movs	r4, r0
 8004b10:	000d      	movs	r5, r1
 8004b12:	0002      	movs	r2, r0
 8004b14:	000b      	movs	r3, r1
 8004b16:	9804      	ldr	r0, [sp, #16]
 8004b18:	9905      	ldr	r1, [sp, #20]
 8004b1a:	f7fc fe71 	bl	8001800 <__aeabi_dsub>
 8004b1e:	0002      	movs	r2, r0
 8004b20:	000b      	movs	r3, r1
 8004b22:	9002      	str	r0, [sp, #8]
 8004b24:	9103      	str	r1, [sp, #12]
 8004b26:	9804      	ldr	r0, [sp, #16]
 8004b28:	9905      	ldr	r1, [sp, #20]
 8004b2a:	f7fc fe69 	bl	8001800 <__aeabi_dsub>
 8004b2e:	0022      	movs	r2, r4
 8004b30:	002b      	movs	r3, r5
 8004b32:	f7fc fe65 	bl	8001800 <__aeabi_dsub>
 8004b36:	0004      	movs	r4, r0
 8004b38:	000d      	movs	r5, r1
 8004b3a:	9806      	ldr	r0, [sp, #24]
 8004b3c:	9907      	ldr	r1, [sp, #28]
 8004b3e:	4a32      	ldr	r2, [pc, #200]	; (8004c08 <__ieee754_rem_pio2+0x300>)
 8004b40:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <__ieee754_rem_pio2+0x304>)
 8004b42:	f7fc fbf1 	bl	8001328 <__aeabi_dmul>
 8004b46:	0022      	movs	r2, r4
 8004b48:	002b      	movs	r3, r5
 8004b4a:	f7fc fe59 	bl	8001800 <__aeabi_dsub>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	000b      	movs	r3, r1
 8004b52:	0004      	movs	r4, r0
 8004b54:	000d      	movs	r5, r1
 8004b56:	9802      	ldr	r0, [sp, #8]
 8004b58:	9903      	ldr	r1, [sp, #12]
 8004b5a:	f7fc fe51 	bl	8001800 <__aeabi_dsub>
 8004b5e:	9a08      	ldr	r2, [sp, #32]
 8004b60:	004b      	lsls	r3, r1, #1
 8004b62:	0d5b      	lsrs	r3, r3, #21
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b31      	cmp	r3, #49	; 0x31
 8004b68:	dc08      	bgt.n	8004b7c <__ieee754_rem_pio2+0x274>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	000b      	movs	r3, r1
 8004b6e:	603a      	str	r2, [r7, #0]
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	9a02      	ldr	r2, [sp, #8]
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	9204      	str	r2, [sp, #16]
 8004b78:	9305      	str	r3, [sp, #20]
 8004b7a:	e7a3      	b.n	8004ac4 <__ieee754_rem_pio2+0x1bc>
 8004b7c:	22b8      	movs	r2, #184	; 0xb8
 8004b7e:	9806      	ldr	r0, [sp, #24]
 8004b80:	9907      	ldr	r1, [sp, #28]
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <__ieee754_rem_pio2+0x304>)
 8004b84:	0592      	lsls	r2, r2, #22
 8004b86:	f7fc fbcf 	bl	8001328 <__aeabi_dmul>
 8004b8a:	0004      	movs	r4, r0
 8004b8c:	000d      	movs	r5, r1
 8004b8e:	0002      	movs	r2, r0
 8004b90:	000b      	movs	r3, r1
 8004b92:	9802      	ldr	r0, [sp, #8]
 8004b94:	9903      	ldr	r1, [sp, #12]
 8004b96:	f7fc fe33 	bl	8001800 <__aeabi_dsub>
 8004b9a:	0002      	movs	r2, r0
 8004b9c:	000b      	movs	r3, r1
 8004b9e:	9004      	str	r0, [sp, #16]
 8004ba0:	9105      	str	r1, [sp, #20]
 8004ba2:	9802      	ldr	r0, [sp, #8]
 8004ba4:	9903      	ldr	r1, [sp, #12]
 8004ba6:	f7fc fe2b 	bl	8001800 <__aeabi_dsub>
 8004baa:	0022      	movs	r2, r4
 8004bac:	002b      	movs	r3, r5
 8004bae:	f7fc fe27 	bl	8001800 <__aeabi_dsub>
 8004bb2:	0004      	movs	r4, r0
 8004bb4:	000d      	movs	r5, r1
 8004bb6:	9806      	ldr	r0, [sp, #24]
 8004bb8:	9907      	ldr	r1, [sp, #28]
 8004bba:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <__ieee754_rem_pio2+0x31c>)
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <__ieee754_rem_pio2+0x320>)
 8004bbe:	f7fc fbb3 	bl	8001328 <__aeabi_dmul>
 8004bc2:	0022      	movs	r2, r4
 8004bc4:	002b      	movs	r3, r5
 8004bc6:	f7fc fe1b 	bl	8001800 <__aeabi_dsub>
 8004bca:	0004      	movs	r4, r0
 8004bcc:	000d      	movs	r5, r1
 8004bce:	e75d      	b.n	8004a8c <__ieee754_rem_pio2+0x184>
 8004bd0:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <__ieee754_rem_pio2+0x324>)
 8004bd2:	9a02      	ldr	r2, [sp, #8]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	dd2b      	ble.n	8004c30 <__ieee754_rem_pio2+0x328>
 8004bd8:	0022      	movs	r2, r4
 8004bda:	002b      	movs	r3, r5
 8004bdc:	0020      	movs	r0, r4
 8004bde:	0029      	movs	r1, r5
 8004be0:	f7fc fe0e 	bl	8001800 <__aeabi_dsub>
 8004be4:	60b8      	str	r0, [r7, #8]
 8004be6:	60f9      	str	r1, [r7, #12]
 8004be8:	6038      	str	r0, [r7, #0]
 8004bea:	6079      	str	r1, [r7, #4]
 8004bec:	e6a1      	b.n	8004932 <__ieee754_rem_pio2+0x2a>
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	3fe921fb 	.word	0x3fe921fb
 8004bf4:	4002d97b 	.word	0x4002d97b
 8004bf8:	3ff921fb 	.word	0x3ff921fb
 8004bfc:	54400000 	.word	0x54400000
 8004c00:	1a626331 	.word	0x1a626331
 8004c04:	3dd0b461 	.word	0x3dd0b461
 8004c08:	2e037073 	.word	0x2e037073
 8004c0c:	3ba3198a 	.word	0x3ba3198a
 8004c10:	413921fb 	.word	0x413921fb
 8004c14:	6dc9c883 	.word	0x6dc9c883
 8004c18:	3fe45f30 	.word	0x3fe45f30
 8004c1c:	3fe00000 	.word	0x3fe00000
 8004c20:	08005968 	.word	0x08005968
 8004c24:	252049c1 	.word	0x252049c1
 8004c28:	397b839a 	.word	0x397b839a
 8004c2c:	7fefffff 	.word	0x7fefffff
 8004c30:	9a02      	ldr	r2, [sp, #8]
 8004c32:	0020      	movs	r0, r4
 8004c34:	1516      	asrs	r6, r2, #20
 8004c36:	4a29      	ldr	r2, [pc, #164]	; (8004cdc <__ieee754_rem_pio2+0x3d4>)
 8004c38:	18b6      	adds	r6, r6, r2
 8004c3a:	9a02      	ldr	r2, [sp, #8]
 8004c3c:	0533      	lsls	r3, r6, #20
 8004c3e:	1ad5      	subs	r5, r2, r3
 8004c40:	0029      	movs	r1, r5
 8004c42:	f7fd f96f 	bl	8001f24 <__aeabi_d2iz>
 8004c46:	f7fd f9a3 	bl	8001f90 <__aeabi_i2d>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	000b      	movs	r3, r1
 8004c4e:	0020      	movs	r0, r4
 8004c50:	0029      	movs	r1, r5
 8004c52:	920a      	str	r2, [sp, #40]	; 0x28
 8004c54:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c56:	f7fc fdd3 	bl	8001800 <__aeabi_dsub>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <__ieee754_rem_pio2+0x3d8>)
 8004c5e:	f7fc fb63 	bl	8001328 <__aeabi_dmul>
 8004c62:	000d      	movs	r5, r1
 8004c64:	0004      	movs	r4, r0
 8004c66:	f7fd f95d 	bl	8001f24 <__aeabi_d2iz>
 8004c6a:	f7fd f991 	bl	8001f90 <__aeabi_i2d>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	000b      	movs	r3, r1
 8004c72:	0020      	movs	r0, r4
 8004c74:	0029      	movs	r1, r5
 8004c76:	920c      	str	r2, [sp, #48]	; 0x30
 8004c78:	930d      	str	r3, [sp, #52]	; 0x34
 8004c7a:	f7fc fdc1 	bl	8001800 <__aeabi_dsub>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <__ieee754_rem_pio2+0x3d8>)
 8004c82:	f7fc fb51 	bl	8001328 <__aeabi_dmul>
 8004c86:	2503      	movs	r5, #3
 8004c88:	900e      	str	r0, [sp, #56]	; 0x38
 8004c8a:	910f      	str	r1, [sp, #60]	; 0x3c
 8004c8c:	ac0a      	add	r4, sp, #40	; 0x28
 8004c8e:	2200      	movs	r2, #0
 8004c90:	6920      	ldr	r0, [r4, #16]
 8004c92:	6961      	ldr	r1, [r4, #20]
 8004c94:	2300      	movs	r3, #0
 8004c96:	9502      	str	r5, [sp, #8]
 8004c98:	3c08      	subs	r4, #8
 8004c9a:	3d01      	subs	r5, #1
 8004c9c:	f7fb fbba 	bl	8000414 <__aeabi_dcmpeq>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d1f4      	bne.n	8004c8e <__ieee754_rem_pio2+0x386>
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <__ieee754_rem_pio2+0x3dc>)
 8004ca6:	0032      	movs	r2, r6
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	2302      	movs	r3, #2
 8004cac:	0039      	movs	r1, r7
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	a80a      	add	r0, sp, #40	; 0x28
 8004cb2:	9b02      	ldr	r3, [sp, #8]
 8004cb4:	f000 f8d8 	bl	8004e68 <__kernel_rem_pio2>
 8004cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cba:	0006      	movs	r6, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db00      	blt.n	8004cc2 <__ieee754_rem_pio2+0x3ba>
 8004cc0:	e65f      	b.n	8004982 <__ieee754_rem_pio2+0x7a>
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	0609      	lsls	r1, r1, #24
 8004cca:	1843      	adds	r3, r0, r1
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	603a      	str	r2, [r7, #0]
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	1843      	adds	r3, r0, r1
 8004cd6:	60ba      	str	r2, [r7, #8]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e688      	b.n	80049ee <__ieee754_rem_pio2+0xe6>
 8004cdc:	fffffbea 	.word	0xfffffbea
 8004ce0:	41700000 	.word	0x41700000
 8004ce4:	080059e8 	.word	0x080059e8

08004ce8 <__kernel_cos>:
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	b087      	sub	sp, #28
 8004cec:	9204      	str	r2, [sp, #16]
 8004cee:	9305      	str	r3, [sp, #20]
 8004cf0:	004b      	lsls	r3, r1, #1
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	23f9      	movs	r3, #249	; 0xf9
 8004cf8:	9a00      	ldr	r2, [sp, #0]
 8004cfa:	0007      	movs	r7, r0
 8004cfc:	000e      	movs	r6, r1
 8004cfe:	059b      	lsls	r3, r3, #22
 8004d00:	429a      	cmp	r2, r3
 8004d02:	da04      	bge.n	8004d0e <__kernel_cos+0x26>
 8004d04:	f7fd f90e 	bl	8001f24 <__aeabi_d2iz>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d100      	bne.n	8004d0e <__kernel_cos+0x26>
 8004d0c:	e084      	b.n	8004e18 <__kernel_cos+0x130>
 8004d0e:	003a      	movs	r2, r7
 8004d10:	0033      	movs	r3, r6
 8004d12:	0038      	movs	r0, r7
 8004d14:	0031      	movs	r1, r6
 8004d16:	f7fc fb07 	bl	8001328 <__aeabi_dmul>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4b40      	ldr	r3, [pc, #256]	; (8004e20 <__kernel_cos+0x138>)
 8004d1e:	0004      	movs	r4, r0
 8004d20:	000d      	movs	r5, r1
 8004d22:	f7fc fb01 	bl	8001328 <__aeabi_dmul>
 8004d26:	4a3f      	ldr	r2, [pc, #252]	; (8004e24 <__kernel_cos+0x13c>)
 8004d28:	9002      	str	r0, [sp, #8]
 8004d2a:	9103      	str	r1, [sp, #12]
 8004d2c:	4b3e      	ldr	r3, [pc, #248]	; (8004e28 <__kernel_cos+0x140>)
 8004d2e:	0020      	movs	r0, r4
 8004d30:	0029      	movs	r1, r5
 8004d32:	f7fc faf9 	bl	8001328 <__aeabi_dmul>
 8004d36:	4a3d      	ldr	r2, [pc, #244]	; (8004e2c <__kernel_cos+0x144>)
 8004d38:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <__kernel_cos+0x148>)
 8004d3a:	f7fb fbb7 	bl	80004ac <__aeabi_dadd>
 8004d3e:	0022      	movs	r2, r4
 8004d40:	002b      	movs	r3, r5
 8004d42:	f7fc faf1 	bl	8001328 <__aeabi_dmul>
 8004d46:	4a3b      	ldr	r2, [pc, #236]	; (8004e34 <__kernel_cos+0x14c>)
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <__kernel_cos+0x150>)
 8004d4a:	f7fc fd59 	bl	8001800 <__aeabi_dsub>
 8004d4e:	0022      	movs	r2, r4
 8004d50:	002b      	movs	r3, r5
 8004d52:	f7fc fae9 	bl	8001328 <__aeabi_dmul>
 8004d56:	4a39      	ldr	r2, [pc, #228]	; (8004e3c <__kernel_cos+0x154>)
 8004d58:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <__kernel_cos+0x158>)
 8004d5a:	f7fb fba7 	bl	80004ac <__aeabi_dadd>
 8004d5e:	0022      	movs	r2, r4
 8004d60:	002b      	movs	r3, r5
 8004d62:	f7fc fae1 	bl	8001328 <__aeabi_dmul>
 8004d66:	4a37      	ldr	r2, [pc, #220]	; (8004e44 <__kernel_cos+0x15c>)
 8004d68:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <__kernel_cos+0x160>)
 8004d6a:	f7fc fd49 	bl	8001800 <__aeabi_dsub>
 8004d6e:	0022      	movs	r2, r4
 8004d70:	002b      	movs	r3, r5
 8004d72:	f7fc fad9 	bl	8001328 <__aeabi_dmul>
 8004d76:	4a35      	ldr	r2, [pc, #212]	; (8004e4c <__kernel_cos+0x164>)
 8004d78:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <__kernel_cos+0x168>)
 8004d7a:	f7fb fb97 	bl	80004ac <__aeabi_dadd>
 8004d7e:	0022      	movs	r2, r4
 8004d80:	002b      	movs	r3, r5
 8004d82:	f7fc fad1 	bl	8001328 <__aeabi_dmul>
 8004d86:	0022      	movs	r2, r4
 8004d88:	002b      	movs	r3, r5
 8004d8a:	f7fc facd 	bl	8001328 <__aeabi_dmul>
 8004d8e:	9a04      	ldr	r2, [sp, #16]
 8004d90:	9b05      	ldr	r3, [sp, #20]
 8004d92:	0004      	movs	r4, r0
 8004d94:	000d      	movs	r5, r1
 8004d96:	0038      	movs	r0, r7
 8004d98:	0031      	movs	r1, r6
 8004d9a:	f7fc fac5 	bl	8001328 <__aeabi_dmul>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	000b      	movs	r3, r1
 8004da2:	0020      	movs	r0, r4
 8004da4:	0029      	movs	r1, r5
 8004da6:	f7fc fd2b 	bl	8001800 <__aeabi_dsub>
 8004daa:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <__kernel_cos+0x16c>)
 8004dac:	9a00      	ldr	r2, [sp, #0]
 8004dae:	0004      	movs	r4, r0
 8004db0:	000d      	movs	r5, r1
 8004db2:	429a      	cmp	r2, r3
 8004db4:	dc0d      	bgt.n	8004dd2 <__kernel_cos+0xea>
 8004db6:	0002      	movs	r2, r0
 8004db8:	000b      	movs	r3, r1
 8004dba:	9802      	ldr	r0, [sp, #8]
 8004dbc:	9903      	ldr	r1, [sp, #12]
 8004dbe:	f7fc fd1f 	bl	8001800 <__aeabi_dsub>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	000b      	movs	r3, r1
 8004dc8:	4923      	ldr	r1, [pc, #140]	; (8004e58 <__kernel_cos+0x170>)
 8004dca:	f7fc fd19 	bl	8001800 <__aeabi_dsub>
 8004dce:	b007      	add	sp, #28
 8004dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <__kernel_cos+0x174>)
 8004dd4:	9a00      	ldr	r2, [sp, #0]
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	dc1b      	bgt.n	8004e14 <__kernel_cos+0x12c>
 8004ddc:	0013      	movs	r3, r2
 8004dde:	4a20      	ldr	r2, [pc, #128]	; (8004e60 <__kernel_cos+0x178>)
 8004de0:	4694      	mov	ip, r2
 8004de2:	4463      	add	r3, ip
 8004de4:	001f      	movs	r7, r3
 8004de6:	0032      	movs	r2, r6
 8004de8:	003b      	movs	r3, r7
 8004dea:	2000      	movs	r0, #0
 8004dec:	491a      	ldr	r1, [pc, #104]	; (8004e58 <__kernel_cos+0x170>)
 8004dee:	f7fc fd07 	bl	8001800 <__aeabi_dsub>
 8004df2:	0032      	movs	r2, r6
 8004df4:	003b      	movs	r3, r7
 8004df6:	9000      	str	r0, [sp, #0]
 8004df8:	9101      	str	r1, [sp, #4]
 8004dfa:	9802      	ldr	r0, [sp, #8]
 8004dfc:	9903      	ldr	r1, [sp, #12]
 8004dfe:	f7fc fcff 	bl	8001800 <__aeabi_dsub>
 8004e02:	0022      	movs	r2, r4
 8004e04:	002b      	movs	r3, r5
 8004e06:	f7fc fcfb 	bl	8001800 <__aeabi_dsub>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	000b      	movs	r3, r1
 8004e0e:	9800      	ldr	r0, [sp, #0]
 8004e10:	9901      	ldr	r1, [sp, #4]
 8004e12:	e7da      	b.n	8004dca <__kernel_cos+0xe2>
 8004e14:	4f13      	ldr	r7, [pc, #76]	; (8004e64 <__kernel_cos+0x17c>)
 8004e16:	e7e6      	b.n	8004de6 <__kernel_cos+0xfe>
 8004e18:	2000      	movs	r0, #0
 8004e1a:	490f      	ldr	r1, [pc, #60]	; (8004e58 <__kernel_cos+0x170>)
 8004e1c:	e7d7      	b.n	8004dce <__kernel_cos+0xe6>
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	3fe00000 	.word	0x3fe00000
 8004e24:	be8838d4 	.word	0xbe8838d4
 8004e28:	bda8fae9 	.word	0xbda8fae9
 8004e2c:	bdb4b1c4 	.word	0xbdb4b1c4
 8004e30:	3e21ee9e 	.word	0x3e21ee9e
 8004e34:	809c52ad 	.word	0x809c52ad
 8004e38:	3e927e4f 	.word	0x3e927e4f
 8004e3c:	19cb1590 	.word	0x19cb1590
 8004e40:	3efa01a0 	.word	0x3efa01a0
 8004e44:	16c15177 	.word	0x16c15177
 8004e48:	3f56c16c 	.word	0x3f56c16c
 8004e4c:	5555554c 	.word	0x5555554c
 8004e50:	3fa55555 	.word	0x3fa55555
 8004e54:	3fd33332 	.word	0x3fd33332
 8004e58:	3ff00000 	.word	0x3ff00000
 8004e5c:	3fe90000 	.word	0x3fe90000
 8004e60:	ffe00000 	.word	0xffe00000
 8004e64:	3fd20000 	.word	0x3fd20000

08004e68 <__kernel_rem_pio2>:
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	4ccb      	ldr	r4, [pc, #812]	; (8005198 <__kernel_rem_pio2+0x330>)
 8004e6c:	44a5      	add	sp, r4
 8004e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004e70:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004e72:	0014      	movs	r4, r2
 8004e74:	009a      	lsls	r2, r3, #2
 8004e76:	4bc9      	ldr	r3, [pc, #804]	; (800519c <__kernel_rem_pio2+0x334>)
 8004e78:	900e      	str	r0, [sp, #56]	; 0x38
 8004e7a:	58d3      	ldr	r3, [r2, r3]
 8004e7c:	9107      	str	r1, [sp, #28]
 8004e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e82:	3b01      	subs	r3, #1
 8004e84:	930c      	str	r3, [sp, #48]	; 0x30
 8004e86:	2300      	movs	r3, #0
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	0023      	movs	r3, r4
 8004e8c:	3314      	adds	r3, #20
 8004e8e:	db04      	blt.n	8004e9a <__kernel_rem_pio2+0x32>
 8004e90:	2118      	movs	r1, #24
 8004e92:	1ee0      	subs	r0, r4, #3
 8004e94:	f7fb f9c2 	bl	800021c <__divsi3>
 8004e98:	9000      	str	r0, [sp, #0]
 8004e9a:	2218      	movs	r2, #24
 8004e9c:	9b00      	ldr	r3, [sp, #0]
 8004e9e:	4252      	negs	r2, r2
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	435a      	muls	r2, r3
 8004ea4:	1913      	adds	r3, r2, r4
 8004ea6:	9302      	str	r3, [sp, #8]
 8004ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eaa:	9b00      	ldr	r3, [sp, #0]
 8004eac:	ae26      	add	r6, sp, #152	; 0x98
 8004eae:	1a9d      	subs	r5, r3, r2
 8004eb0:	002c      	movs	r4, r5
 8004eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb4:	189f      	adds	r7, r3, r2
 8004eb6:	1b63      	subs	r3, r4, r5
 8004eb8:	429f      	cmp	r7, r3
 8004eba:	da0f      	bge.n	8004edc <__kernel_rem_pio2+0x74>
 8004ebc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004ebe:	af76      	add	r7, sp, #472	; 0x1d8
 8004ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ec4:	1af3      	subs	r3, r6, r3
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	db30      	blt.n	8004f2c <__kernel_rem_pio2+0xc4>
 8004eca:	ab26      	add	r3, sp, #152	; 0x98
 8004ecc:	00f4      	lsls	r4, r6, #3
 8004ece:	2200      	movs	r2, #0
 8004ed0:	18e4      	adds	r4, r4, r3
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2500      	movs	r5, #0
 8004ed6:	9204      	str	r2, [sp, #16]
 8004ed8:	9305      	str	r3, [sp, #20]
 8004eda:	e01e      	b.n	8004f1a <__kernel_rem_pio2+0xb2>
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	db07      	blt.n	8004ef0 <__kernel_rem_pio2+0x88>
 8004ee0:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8004ee2:	00a3      	lsls	r3, r4, #2
 8004ee4:	58d0      	ldr	r0, [r2, r3]
 8004ee6:	f7fd f853 	bl	8001f90 <__aeabi_i2d>
 8004eea:	c603      	stmia	r6!, {r0, r1}
 8004eec:	3401      	adds	r4, #1
 8004eee:	e7e2      	b.n	8004eb6 <__kernel_rem_pio2+0x4e>
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	e7f9      	b.n	8004eea <__kernel_rem_pio2+0x82>
 8004ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ef8:	00e9      	lsls	r1, r5, #3
 8004efa:	1859      	adds	r1, r3, r1
 8004efc:	6808      	ldr	r0, [r1, #0]
 8004efe:	6849      	ldr	r1, [r1, #4]
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	6863      	ldr	r3, [r4, #4]
 8004f04:	f7fc fa10 	bl	8001328 <__aeabi_dmul>
 8004f08:	0002      	movs	r2, r0
 8004f0a:	000b      	movs	r3, r1
 8004f0c:	9804      	ldr	r0, [sp, #16]
 8004f0e:	9905      	ldr	r1, [sp, #20]
 8004f10:	f7fb facc 	bl	80004ac <__aeabi_dadd>
 8004f14:	9004      	str	r0, [sp, #16]
 8004f16:	9105      	str	r1, [sp, #20]
 8004f18:	3501      	adds	r5, #1
 8004f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f1c:	3c08      	subs	r4, #8
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	dde9      	ble.n	8004ef6 <__kernel_rem_pio2+0x8e>
 8004f22:	9b04      	ldr	r3, [sp, #16]
 8004f24:	9c05      	ldr	r4, [sp, #20]
 8004f26:	3601      	adds	r6, #1
 8004f28:	c718      	stmia	r7!, {r3, r4}
 8004f2a:	e7c9      	b.n	8004ec0 <__kernel_rem_pio2+0x58>
 8004f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2e:	aa12      	add	r2, sp, #72	; 0x48
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	9310      	str	r3, [sp, #64]	; 0x40
 8004f36:	9b00      	ldr	r3, [sp, #0]
 8004f38:	0098      	lsls	r0, r3, #2
 8004f3a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004f3c:	181b      	adds	r3, r3, r0
 8004f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	9b04      	ldr	r3, [sp, #16]
 8004f46:	aa76      	add	r2, sp, #472	; 0x1d8
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	18d3      	adds	r3, r2, r3
 8004f4c:	681c      	ldr	r4, [r3, #0]
 8004f4e:	685d      	ldr	r5, [r3, #4]
 8004f50:	ab12      	add	r3, sp, #72	; 0x48
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	9309      	str	r3, [sp, #36]	; 0x24
 8004f56:	9b04      	ldr	r3, [sp, #16]
 8004f58:	9211      	str	r2, [sp, #68]	; 0x44
 8004f5a:	9308      	str	r3, [sp, #32]
 8004f5c:	9b08      	ldr	r3, [sp, #32]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	dc74      	bgt.n	800504c <__kernel_rem_pio2+0x1e4>
 8004f62:	0020      	movs	r0, r4
 8004f64:	0029      	movs	r1, r5
 8004f66:	9a02      	ldr	r2, [sp, #8]
 8004f68:	f000 fc22 	bl	80057b0 <scalbn>
 8004f6c:	23ff      	movs	r3, #255	; 0xff
 8004f6e:	2200      	movs	r2, #0
 8004f70:	059b      	lsls	r3, r3, #22
 8004f72:	0004      	movs	r4, r0
 8004f74:	000d      	movs	r5, r1
 8004f76:	f7fc f9d7 	bl	8001328 <__aeabi_dmul>
 8004f7a:	f000 fb8f 	bl	800569c <floor>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	4b87      	ldr	r3, [pc, #540]	; (80051a0 <__kernel_rem_pio2+0x338>)
 8004f82:	f7fc f9d1 	bl	8001328 <__aeabi_dmul>
 8004f86:	0002      	movs	r2, r0
 8004f88:	000b      	movs	r3, r1
 8004f8a:	0020      	movs	r0, r4
 8004f8c:	0029      	movs	r1, r5
 8004f8e:	f7fc fc37 	bl	8001800 <__aeabi_dsub>
 8004f92:	000d      	movs	r5, r1
 8004f94:	0004      	movs	r4, r0
 8004f96:	f7fc ffc5 	bl	8001f24 <__aeabi_d2iz>
 8004f9a:	9009      	str	r0, [sp, #36]	; 0x24
 8004f9c:	f7fc fff8 	bl	8001f90 <__aeabi_i2d>
 8004fa0:	000b      	movs	r3, r1
 8004fa2:	0002      	movs	r2, r0
 8004fa4:	0029      	movs	r1, r5
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	f7fc fc2a 	bl	8001800 <__aeabi_dsub>
 8004fac:	9b02      	ldr	r3, [sp, #8]
 8004fae:	0006      	movs	r6, r0
 8004fb0:	000f      	movs	r7, r1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	dd74      	ble.n	80050a0 <__kernel_rem_pio2+0x238>
 8004fb6:	2118      	movs	r1, #24
 8004fb8:	9b04      	ldr	r3, [sp, #16]
 8004fba:	aa12      	add	r2, sp, #72	; 0x48
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	589a      	ldr	r2, [r3, r2]
 8004fc2:	9802      	ldr	r0, [sp, #8]
 8004fc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004fc6:	1a09      	subs	r1, r1, r0
 8004fc8:	0010      	movs	r0, r2
 8004fca:	4108      	asrs	r0, r1
 8004fcc:	1824      	adds	r4, r4, r0
 8004fce:	4088      	lsls	r0, r1
 8004fd0:	a912      	add	r1, sp, #72	; 0x48
 8004fd2:	1a12      	subs	r2, r2, r0
 8004fd4:	505a      	str	r2, [r3, r1]
 8004fd6:	2317      	movs	r3, #23
 8004fd8:	9902      	ldr	r1, [sp, #8]
 8004fda:	9409      	str	r4, [sp, #36]	; 0x24
 8004fdc:	1a5b      	subs	r3, r3, r1
 8004fde:	411a      	asrs	r2, r3
 8004fe0:	9208      	str	r2, [sp, #32]
 8004fe2:	9b08      	ldr	r3, [sp, #32]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dd6d      	ble.n	80050c4 <__kernel_rem_pio2+0x25c>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fec:	2080      	movs	r0, #128	; 0x80
 8004fee:	3301      	adds	r3, #1
 8004ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff2:	4b6c      	ldr	r3, [pc, #432]	; (80051a4 <__kernel_rem_pio2+0x33c>)
 8004ff4:	0014      	movs	r4, r2
 8004ff6:	469c      	mov	ip, r3
 8004ff8:	2501      	movs	r5, #1
 8004ffa:	0440      	lsls	r0, r0, #17
 8004ffc:	9b04      	ldr	r3, [sp, #16]
 8004ffe:	4293      	cmp	r3, r2
 8005000:	dd00      	ble.n	8005004 <__kernel_rem_pio2+0x19c>
 8005002:	e099      	b.n	8005138 <__kernel_rem_pio2+0x2d0>
 8005004:	9b02      	ldr	r3, [sp, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	dd05      	ble.n	8005016 <__kernel_rem_pio2+0x1ae>
 800500a:	2b01      	cmp	r3, #1
 800500c:	d100      	bne.n	8005010 <__kernel_rem_pio2+0x1a8>
 800500e:	e0a9      	b.n	8005164 <__kernel_rem_pio2+0x2fc>
 8005010:	2b02      	cmp	r3, #2
 8005012:	d100      	bne.n	8005016 <__kernel_rem_pio2+0x1ae>
 8005014:	e0b1      	b.n	800517a <__kernel_rem_pio2+0x312>
 8005016:	9b08      	ldr	r3, [sp, #32]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d153      	bne.n	80050c4 <__kernel_rem_pio2+0x25c>
 800501c:	0032      	movs	r2, r6
 800501e:	003b      	movs	r3, r7
 8005020:	2000      	movs	r0, #0
 8005022:	4961      	ldr	r1, [pc, #388]	; (80051a8 <__kernel_rem_pio2+0x340>)
 8005024:	f7fc fbec 	bl	8001800 <__aeabi_dsub>
 8005028:	0006      	movs	r6, r0
 800502a:	000f      	movs	r7, r1
 800502c:	2c00      	cmp	r4, #0
 800502e:	d049      	beq.n	80050c4 <__kernel_rem_pio2+0x25c>
 8005030:	9a02      	ldr	r2, [sp, #8]
 8005032:	2000      	movs	r0, #0
 8005034:	495c      	ldr	r1, [pc, #368]	; (80051a8 <__kernel_rem_pio2+0x340>)
 8005036:	f000 fbbb 	bl	80057b0 <scalbn>
 800503a:	0002      	movs	r2, r0
 800503c:	000b      	movs	r3, r1
 800503e:	0030      	movs	r0, r6
 8005040:	0039      	movs	r1, r7
 8005042:	f7fc fbdd 	bl	8001800 <__aeabi_dsub>
 8005046:	0006      	movs	r6, r0
 8005048:	000f      	movs	r7, r1
 800504a:	e03b      	b.n	80050c4 <__kernel_rem_pio2+0x25c>
 800504c:	2200      	movs	r2, #0
 800504e:	4b57      	ldr	r3, [pc, #348]	; (80051ac <__kernel_rem_pio2+0x344>)
 8005050:	0020      	movs	r0, r4
 8005052:	0029      	movs	r1, r5
 8005054:	f7fc f968 	bl	8001328 <__aeabi_dmul>
 8005058:	f7fc ff64 	bl	8001f24 <__aeabi_d2iz>
 800505c:	f7fc ff98 	bl	8001f90 <__aeabi_i2d>
 8005060:	2200      	movs	r2, #0
 8005062:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <__kernel_rem_pio2+0x348>)
 8005064:	0006      	movs	r6, r0
 8005066:	000f      	movs	r7, r1
 8005068:	f7fc f95e 	bl	8001328 <__aeabi_dmul>
 800506c:	0002      	movs	r2, r0
 800506e:	000b      	movs	r3, r1
 8005070:	0020      	movs	r0, r4
 8005072:	0029      	movs	r1, r5
 8005074:	f7fc fbc4 	bl	8001800 <__aeabi_dsub>
 8005078:	f7fc ff54 	bl	8001f24 <__aeabi_d2iz>
 800507c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005080:	c301      	stmia	r3!, {r0}
 8005082:	9309      	str	r3, [sp, #36]	; 0x24
 8005084:	9b08      	ldr	r3, [sp, #32]
 8005086:	0030      	movs	r0, r6
 8005088:	3b01      	subs	r3, #1
 800508a:	9308      	str	r3, [sp, #32]
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	18d3      	adds	r3, r2, r3
 8005090:	0039      	movs	r1, r7
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f7fb fa09 	bl	80004ac <__aeabi_dadd>
 800509a:	0004      	movs	r4, r0
 800509c:	000d      	movs	r5, r1
 800509e:	e75d      	b.n	8004f5c <__kernel_rem_pio2+0xf4>
 80050a0:	9b02      	ldr	r3, [sp, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <__kernel_rem_pio2+0x24e>
 80050a6:	9b04      	ldr	r3, [sp, #16]
 80050a8:	aa12      	add	r2, sp, #72	; 0x48
 80050aa:	3b01      	subs	r3, #1
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	5898      	ldr	r0, [r3, r2]
 80050b0:	15c3      	asrs	r3, r0, #23
 80050b2:	9308      	str	r3, [sp, #32]
 80050b4:	e795      	b.n	8004fe2 <__kernel_rem_pio2+0x17a>
 80050b6:	2200      	movs	r2, #0
 80050b8:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <__kernel_rem_pio2+0x34c>)
 80050ba:	f7fb f9cf 	bl	800045c <__aeabi_dcmpge>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d137      	bne.n	8005132 <__kernel_rem_pio2+0x2ca>
 80050c2:	9008      	str	r0, [sp, #32]
 80050c4:	2200      	movs	r2, #0
 80050c6:	2300      	movs	r3, #0
 80050c8:	0030      	movs	r0, r6
 80050ca:	0039      	movs	r1, r7
 80050cc:	f7fb f9a2 	bl	8000414 <__aeabi_dcmpeq>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d100      	bne.n	80050d6 <__kernel_rem_pio2+0x26e>
 80050d4:	e0b9      	b.n	800524a <__kernel_rem_pio2+0x3e2>
 80050d6:	2200      	movs	r2, #0
 80050d8:	9b04      	ldr	r3, [sp, #16]
 80050da:	3b01      	subs	r3, #1
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050e0:	428b      	cmp	r3, r1
 80050e2:	da53      	bge.n	800518c <__kernel_rem_pio2+0x324>
 80050e4:	2a00      	cmp	r2, #0
 80050e6:	d100      	bne.n	80050ea <__kernel_rem_pio2+0x282>
 80050e8:	e095      	b.n	8005216 <__kernel_rem_pio2+0x3ae>
 80050ea:	9b02      	ldr	r3, [sp, #8]
 80050ec:	aa12      	add	r2, sp, #72	; 0x48
 80050ee:	3b18      	subs	r3, #24
 80050f0:	9302      	str	r3, [sp, #8]
 80050f2:	9b00      	ldr	r3, [sp, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	589b      	ldr	r3, [r3, r2]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d100      	bne.n	80050fe <__kernel_rem_pio2+0x296>
 80050fc:	e0a1      	b.n	8005242 <__kernel_rem_pio2+0x3da>
 80050fe:	2000      	movs	r0, #0
 8005100:	9a02      	ldr	r2, [sp, #8]
 8005102:	4929      	ldr	r1, [pc, #164]	; (80051a8 <__kernel_rem_pio2+0x340>)
 8005104:	f000 fb54 	bl	80057b0 <scalbn>
 8005108:	0006      	movs	r6, r0
 800510a:	000f      	movs	r7, r1
 800510c:	9c00      	ldr	r4, [sp, #0]
 800510e:	2c00      	cmp	r4, #0
 8005110:	db00      	blt.n	8005114 <__kernel_rem_pio2+0x2ac>
 8005112:	e0d9      	b.n	80052c8 <__kernel_rem_pio2+0x460>
 8005114:	9c00      	ldr	r4, [sp, #0]
 8005116:	2c00      	cmp	r4, #0
 8005118:	da00      	bge.n	800511c <__kernel_rem_pio2+0x2b4>
 800511a:	e10c      	b.n	8005336 <__kernel_rem_pio2+0x4ce>
 800511c:	ab76      	add	r3, sp, #472	; 0x1d8
 800511e:	00e6      	lsls	r6, r4, #3
 8005120:	2200      	movs	r2, #0
 8005122:	18f6      	adds	r6, r6, r3
 8005124:	2300      	movs	r3, #0
 8005126:	9202      	str	r2, [sp, #8]
 8005128:	9303      	str	r3, [sp, #12]
 800512a:	9b00      	ldr	r3, [sp, #0]
 800512c:	2500      	movs	r5, #0
 800512e:	1b1f      	subs	r7, r3, r4
 8005130:	e0f3      	b.n	800531a <__kernel_rem_pio2+0x4b2>
 8005132:	2302      	movs	r3, #2
 8005134:	9308      	str	r3, [sp, #32]
 8005136:	e757      	b.n	8004fe8 <__kernel_rem_pio2+0x180>
 8005138:	9b00      	ldr	r3, [sp, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2c00      	cmp	r4, #0
 800513e:	d10b      	bne.n	8005158 <__kernel_rem_pio2+0x2f0>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <__kernel_rem_pio2+0x2e4>
 8005144:	9c00      	ldr	r4, [sp, #0]
 8005146:	1ac3      	subs	r3, r0, r3
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	002b      	movs	r3, r5
 800514c:	9c00      	ldr	r4, [sp, #0]
 800514e:	3201      	adds	r2, #1
 8005150:	3404      	adds	r4, #4
 8005152:	9400      	str	r4, [sp, #0]
 8005154:	001c      	movs	r4, r3
 8005156:	e751      	b.n	8004ffc <__kernel_rem_pio2+0x194>
 8005158:	4661      	mov	r1, ip
 800515a:	1acb      	subs	r3, r1, r3
 800515c:	9900      	ldr	r1, [sp, #0]
 800515e:	600b      	str	r3, [r1, #0]
 8005160:	0023      	movs	r3, r4
 8005162:	e7f3      	b.n	800514c <__kernel_rem_pio2+0x2e4>
 8005164:	9b04      	ldr	r3, [sp, #16]
 8005166:	aa12      	add	r2, sp, #72	; 0x48
 8005168:	3b01      	subs	r3, #1
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	589a      	ldr	r2, [r3, r2]
 800516e:	9200      	str	r2, [sp, #0]
 8005170:	0252      	lsls	r2, r2, #9
 8005172:	0a52      	lsrs	r2, r2, #9
 8005174:	a912      	add	r1, sp, #72	; 0x48
 8005176:	505a      	str	r2, [r3, r1]
 8005178:	e74d      	b.n	8005016 <__kernel_rem_pio2+0x1ae>
 800517a:	9b04      	ldr	r3, [sp, #16]
 800517c:	aa12      	add	r2, sp, #72	; 0x48
 800517e:	3b01      	subs	r3, #1
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	589a      	ldr	r2, [r3, r2]
 8005184:	9200      	str	r2, [sp, #0]
 8005186:	0292      	lsls	r2, r2, #10
 8005188:	0a92      	lsrs	r2, r2, #10
 800518a:	e7f3      	b.n	8005174 <__kernel_rem_pio2+0x30c>
 800518c:	0099      	lsls	r1, r3, #2
 800518e:	a812      	add	r0, sp, #72	; 0x48
 8005190:	5809      	ldr	r1, [r1, r0]
 8005192:	3b01      	subs	r3, #1
 8005194:	430a      	orrs	r2, r1
 8005196:	e7a2      	b.n	80050de <__kernel_rem_pio2+0x276>
 8005198:	fffffd84 	.word	0xfffffd84
 800519c:	08005b30 	.word	0x08005b30
 80051a0:	40200000 	.word	0x40200000
 80051a4:	00ffffff 	.word	0x00ffffff
 80051a8:	3ff00000 	.word	0x3ff00000
 80051ac:	3e700000 	.word	0x3e700000
 80051b0:	41700000 	.word	0x41700000
 80051b4:	3fe00000 	.word	0x3fe00000
 80051b8:	3301      	adds	r3, #1
 80051ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80051bc:	009a      	lsls	r2, r3, #2
 80051be:	4252      	negs	r2, r2
 80051c0:	588a      	ldr	r2, [r1, r2]
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	d0f8      	beq.n	80051b8 <__kernel_rem_pio2+0x350>
 80051c6:	9a04      	ldr	r2, [sp, #16]
 80051c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051ca:	1c57      	adds	r7, r2, #1
 80051cc:	1854      	adds	r4, r2, r1
 80051ce:	00e4      	lsls	r4, r4, #3
 80051d0:	aa26      	add	r2, sp, #152	; 0x98
 80051d2:	1914      	adds	r4, r2, r4
 80051d4:	9a04      	ldr	r2, [sp, #16]
 80051d6:	18d3      	adds	r3, r2, r3
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	9b04      	ldr	r3, [sp, #16]
 80051dc:	42bb      	cmp	r3, r7
 80051de:	da00      	bge.n	80051e2 <__kernel_rem_pio2+0x37a>
 80051e0:	e6b0      	b.n	8004f44 <__kernel_rem_pio2+0xdc>
 80051e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051e4:	00bb      	lsls	r3, r7, #2
 80051e6:	58d0      	ldr	r0, [r2, r3]
 80051e8:	f7fc fed2 	bl	8001f90 <__aeabi_i2d>
 80051ec:	2200      	movs	r2, #0
 80051ee:	2300      	movs	r3, #0
 80051f0:	0026      	movs	r6, r4
 80051f2:	2500      	movs	r5, #0
 80051f4:	6020      	str	r0, [r4, #0]
 80051f6:	6061      	str	r1, [r4, #4]
 80051f8:	9200      	str	r2, [sp, #0]
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051fe:	429d      	cmp	r5, r3
 8005200:	dd0b      	ble.n	800521a <__kernel_rem_pio2+0x3b2>
 8005202:	00fb      	lsls	r3, r7, #3
 8005204:	aa76      	add	r2, sp, #472	; 0x1d8
 8005206:	18d3      	adds	r3, r2, r3
 8005208:	3701      	adds	r7, #1
 800520a:	9900      	ldr	r1, [sp, #0]
 800520c:	9a01      	ldr	r2, [sp, #4]
 800520e:	3408      	adds	r4, #8
 8005210:	6019      	str	r1, [r3, #0]
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	e7e1      	b.n	80051da <__kernel_rem_pio2+0x372>
 8005216:	2301      	movs	r3, #1
 8005218:	e7cf      	b.n	80051ba <__kernel_rem_pio2+0x352>
 800521a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800521c:	00e9      	lsls	r1, r5, #3
 800521e:	1859      	adds	r1, r3, r1
 8005220:	6808      	ldr	r0, [r1, #0]
 8005222:	6849      	ldr	r1, [r1, #4]
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	6873      	ldr	r3, [r6, #4]
 8005228:	f7fc f87e 	bl	8001328 <__aeabi_dmul>
 800522c:	0002      	movs	r2, r0
 800522e:	000b      	movs	r3, r1
 8005230:	9800      	ldr	r0, [sp, #0]
 8005232:	9901      	ldr	r1, [sp, #4]
 8005234:	f7fb f93a 	bl	80004ac <__aeabi_dadd>
 8005238:	3501      	adds	r5, #1
 800523a:	9000      	str	r0, [sp, #0]
 800523c:	9101      	str	r1, [sp, #4]
 800523e:	3e08      	subs	r6, #8
 8005240:	e7dc      	b.n	80051fc <__kernel_rem_pio2+0x394>
 8005242:	9b00      	ldr	r3, [sp, #0]
 8005244:	3b01      	subs	r3, #1
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	e74f      	b.n	80050ea <__kernel_rem_pio2+0x282>
 800524a:	9b02      	ldr	r3, [sp, #8]
 800524c:	0030      	movs	r0, r6
 800524e:	425a      	negs	r2, r3
 8005250:	0039      	movs	r1, r7
 8005252:	f000 faad 	bl	80057b0 <scalbn>
 8005256:	2200      	movs	r2, #0
 8005258:	4bb5      	ldr	r3, [pc, #724]	; (8005530 <__kernel_rem_pio2+0x6c8>)
 800525a:	0004      	movs	r4, r0
 800525c:	000d      	movs	r5, r1
 800525e:	f7fb f8fd 	bl	800045c <__aeabi_dcmpge>
 8005262:	2800      	cmp	r0, #0
 8005264:	d025      	beq.n	80052b2 <__kernel_rem_pio2+0x44a>
 8005266:	2200      	movs	r2, #0
 8005268:	4bb2      	ldr	r3, [pc, #712]	; (8005534 <__kernel_rem_pio2+0x6cc>)
 800526a:	0020      	movs	r0, r4
 800526c:	0029      	movs	r1, r5
 800526e:	f7fc f85b 	bl	8001328 <__aeabi_dmul>
 8005272:	f7fc fe57 	bl	8001f24 <__aeabi_d2iz>
 8005276:	9b04      	ldr	r3, [sp, #16]
 8005278:	0006      	movs	r6, r0
 800527a:	009f      	lsls	r7, r3, #2
 800527c:	f7fc fe88 	bl	8001f90 <__aeabi_i2d>
 8005280:	2200      	movs	r2, #0
 8005282:	4bab      	ldr	r3, [pc, #684]	; (8005530 <__kernel_rem_pio2+0x6c8>)
 8005284:	f7fc f850 	bl	8001328 <__aeabi_dmul>
 8005288:	0002      	movs	r2, r0
 800528a:	000b      	movs	r3, r1
 800528c:	0020      	movs	r0, r4
 800528e:	0029      	movs	r1, r5
 8005290:	f7fc fab6 	bl	8001800 <__aeabi_dsub>
 8005294:	f7fc fe46 	bl	8001f24 <__aeabi_d2iz>
 8005298:	ab12      	add	r3, sp, #72	; 0x48
 800529a:	51d8      	str	r0, [r3, r7]
 800529c:	9b04      	ldr	r3, [sp, #16]
 800529e:	aa12      	add	r2, sp, #72	; 0x48
 80052a0:	3301      	adds	r3, #1
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	9b02      	ldr	r3, [sp, #8]
 80052a6:	3318      	adds	r3, #24
 80052a8:	9302      	str	r3, [sp, #8]
 80052aa:	9b00      	ldr	r3, [sp, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	509e      	str	r6, [r3, r2]
 80052b0:	e725      	b.n	80050fe <__kernel_rem_pio2+0x296>
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	0020      	movs	r0, r4
 80052b6:	0029      	movs	r1, r5
 80052b8:	009e      	lsls	r6, r3, #2
 80052ba:	f7fc fe33 	bl	8001f24 <__aeabi_d2iz>
 80052be:	ab12      	add	r3, sp, #72	; 0x48
 80052c0:	5198      	str	r0, [r3, r6]
 80052c2:	9b04      	ldr	r3, [sp, #16]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	e71a      	b.n	80050fe <__kernel_rem_pio2+0x296>
 80052c8:	00e5      	lsls	r5, r4, #3
 80052ca:	ab76      	add	r3, sp, #472	; 0x1d8
 80052cc:	aa12      	add	r2, sp, #72	; 0x48
 80052ce:	195d      	adds	r5, r3, r5
 80052d0:	00a3      	lsls	r3, r4, #2
 80052d2:	5898      	ldr	r0, [r3, r2]
 80052d4:	f7fc fe5c 	bl	8001f90 <__aeabi_i2d>
 80052d8:	0032      	movs	r2, r6
 80052da:	003b      	movs	r3, r7
 80052dc:	f7fc f824 	bl	8001328 <__aeabi_dmul>
 80052e0:	2200      	movs	r2, #0
 80052e2:	6028      	str	r0, [r5, #0]
 80052e4:	6069      	str	r1, [r5, #4]
 80052e6:	4b93      	ldr	r3, [pc, #588]	; (8005534 <__kernel_rem_pio2+0x6cc>)
 80052e8:	0030      	movs	r0, r6
 80052ea:	0039      	movs	r1, r7
 80052ec:	f7fc f81c 	bl	8001328 <__aeabi_dmul>
 80052f0:	3c01      	subs	r4, #1
 80052f2:	0006      	movs	r6, r0
 80052f4:	000f      	movs	r7, r1
 80052f6:	e70a      	b.n	800510e <__kernel_rem_pio2+0x2a6>
 80052f8:	4b8f      	ldr	r3, [pc, #572]	; (8005538 <__kernel_rem_pio2+0x6d0>)
 80052fa:	00e9      	lsls	r1, r5, #3
 80052fc:	1859      	adds	r1, r3, r1
 80052fe:	6808      	ldr	r0, [r1, #0]
 8005300:	6849      	ldr	r1, [r1, #4]
 8005302:	ce0c      	ldmia	r6!, {r2, r3}
 8005304:	f7fc f810 	bl	8001328 <__aeabi_dmul>
 8005308:	0002      	movs	r2, r0
 800530a:	000b      	movs	r3, r1
 800530c:	9802      	ldr	r0, [sp, #8]
 800530e:	9903      	ldr	r1, [sp, #12]
 8005310:	f7fb f8cc 	bl	80004ac <__aeabi_dadd>
 8005314:	9002      	str	r0, [sp, #8]
 8005316:	9103      	str	r1, [sp, #12]
 8005318:	3501      	adds	r5, #1
 800531a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800531c:	429d      	cmp	r5, r3
 800531e:	dc01      	bgt.n	8005324 <__kernel_rem_pio2+0x4bc>
 8005320:	42bd      	cmp	r5, r7
 8005322:	dde9      	ble.n	80052f8 <__kernel_rem_pio2+0x490>
 8005324:	ab4e      	add	r3, sp, #312	; 0x138
 8005326:	00ff      	lsls	r7, r7, #3
 8005328:	19df      	adds	r7, r3, r7
 800532a:	3c01      	subs	r4, #1
 800532c:	9a02      	ldr	r2, [sp, #8]
 800532e:	9b03      	ldr	r3, [sp, #12]
 8005330:	603a      	str	r2, [r7, #0]
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	e6ef      	b.n	8005116 <__kernel_rem_pio2+0x2ae>
 8005336:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005338:	2b02      	cmp	r3, #2
 800533a:	dc0e      	bgt.n	800535a <__kernel_rem_pio2+0x4f2>
 800533c:	2b00      	cmp	r3, #0
 800533e:	dd00      	ble.n	8005342 <__kernel_rem_pio2+0x4da>
 8005340:	e08c      	b.n	800545c <__kernel_rem_pio2+0x5f4>
 8005342:	2500      	movs	r5, #0
 8005344:	002c      	movs	r4, r5
 8005346:	42ab      	cmp	r3, r5
 8005348:	d046      	beq.n	80053d8 <__kernel_rem_pio2+0x570>
 800534a:	2007      	movs	r0, #7
 800534c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800534e:	4003      	ands	r3, r0
 8005350:	0018      	movs	r0, r3
 8005352:	239f      	movs	r3, #159	; 0x9f
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	449d      	add	sp, r3
 8005358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800535a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800535c:	2b03      	cmp	r3, #3
 800535e:	d1f4      	bne.n	800534a <__kernel_rem_pio2+0x4e2>
 8005360:	9b00      	ldr	r3, [sp, #0]
 8005362:	00dc      	lsls	r4, r3, #3
 8005364:	ab4e      	add	r3, sp, #312	; 0x138
 8005366:	191c      	adds	r4, r3, r4
 8005368:	0025      	movs	r5, r4
 800536a:	9b00      	ldr	r3, [sp, #0]
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	9b02      	ldr	r3, [sp, #8]
 8005370:	3d08      	subs	r5, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	dd00      	ble.n	8005378 <__kernel_rem_pio2+0x510>
 8005376:	e07f      	b.n	8005478 <__kernel_rem_pio2+0x610>
 8005378:	9d00      	ldr	r5, [sp, #0]
 800537a:	3c08      	subs	r4, #8
 800537c:	2d01      	cmp	r5, #1
 800537e:	dd00      	ble.n	8005382 <__kernel_rem_pio2+0x51a>
 8005380:	e09c      	b.n	80054bc <__kernel_rem_pio2+0x654>
 8005382:	2400      	movs	r4, #0
 8005384:	0021      	movs	r1, r4
 8005386:	9b00      	ldr	r3, [sp, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	dd00      	ble.n	800538e <__kernel_rem_pio2+0x526>
 800538c:	e0b4      	b.n	80054f8 <__kernel_rem_pio2+0x690>
 800538e:	9b08      	ldr	r3, [sp, #32]
 8005390:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8005392:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8005394:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8005396:	9851      	ldr	r0, [sp, #324]	; 0x144
 8005398:	2b00      	cmp	r3, #0
 800539a:	d000      	beq.n	800539e <__kernel_rem_pio2+0x536>
 800539c:	e0ba      	b.n	8005514 <__kernel_rem_pio2+0x6ac>
 800539e:	0033      	movs	r3, r6
 80053a0:	003a      	movs	r2, r7
 80053a2:	9e07      	ldr	r6, [sp, #28]
 80053a4:	6032      	str	r2, [r6, #0]
 80053a6:	6073      	str	r3, [r6, #4]
 80053a8:	002a      	movs	r2, r5
 80053aa:	0003      	movs	r3, r0
 80053ac:	60b2      	str	r2, [r6, #8]
 80053ae:	60f3      	str	r3, [r6, #12]
 80053b0:	0022      	movs	r2, r4
 80053b2:	000b      	movs	r3, r1
 80053b4:	6132      	str	r2, [r6, #16]
 80053b6:	6173      	str	r3, [r6, #20]
 80053b8:	e7c7      	b.n	800534a <__kernel_rem_pio2+0x4e2>
 80053ba:	9b00      	ldr	r3, [sp, #0]
 80053bc:	aa4e      	add	r2, sp, #312	; 0x138
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	18d3      	adds	r3, r2, r3
 80053c2:	0028      	movs	r0, r5
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	0021      	movs	r1, r4
 80053ca:	f7fb f86f 	bl	80004ac <__aeabi_dadd>
 80053ce:	0005      	movs	r5, r0
 80053d0:	000c      	movs	r4, r1
 80053d2:	9b00      	ldr	r3, [sp, #0]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	9b00      	ldr	r3, [sp, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	daed      	bge.n	80053ba <__kernel_rem_pio2+0x552>
 80053de:	9b08      	ldr	r3, [sp, #32]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <__kernel_rem_pio2+0x582>
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	061b      	lsls	r3, r3, #24
 80053e8:	18e4      	adds	r4, r4, r3
 80053ea:	002a      	movs	r2, r5
 80053ec:	0023      	movs	r3, r4
 80053ee:	9907      	ldr	r1, [sp, #28]
 80053f0:	600a      	str	r2, [r1, #0]
 80053f2:	604b      	str	r3, [r1, #4]
 80053f4:	e7a9      	b.n	800534a <__kernel_rem_pio2+0x4e2>
 80053f6:	00e3      	lsls	r3, r4, #3
 80053f8:	aa4e      	add	r2, sp, #312	; 0x138
 80053fa:	18d3      	adds	r3, r2, r3
 80053fc:	0030      	movs	r0, r6
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	0029      	movs	r1, r5
 8005404:	f7fb f852 	bl	80004ac <__aeabi_dadd>
 8005408:	0006      	movs	r6, r0
 800540a:	000d      	movs	r5, r1
 800540c:	3c01      	subs	r4, #1
 800540e:	2c00      	cmp	r4, #0
 8005410:	daf1      	bge.n	80053f6 <__kernel_rem_pio2+0x58e>
 8005412:	9b08      	ldr	r3, [sp, #32]
 8005414:	0029      	movs	r1, r5
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <__kernel_rem_pio2+0x5b8>
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	18e9      	adds	r1, r5, r3
 8005420:	0032      	movs	r2, r6
 8005422:	000b      	movs	r3, r1
 8005424:	9907      	ldr	r1, [sp, #28]
 8005426:	2401      	movs	r4, #1
 8005428:	600a      	str	r2, [r1, #0]
 800542a:	604b      	str	r3, [r1, #4]
 800542c:	984e      	ldr	r0, [sp, #312]	; 0x138
 800542e:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8005430:	002b      	movs	r3, r5
 8005432:	f7fc f9e5 	bl	8001800 <__aeabi_dsub>
 8005436:	0007      	movs	r7, r0
 8005438:	000e      	movs	r6, r1
 800543a:	ad4e      	add	r5, sp, #312	; 0x138
 800543c:	9b00      	ldr	r3, [sp, #0]
 800543e:	3508      	adds	r5, #8
 8005440:	42a3      	cmp	r3, r4
 8005442:	da0f      	bge.n	8005464 <__kernel_rem_pio2+0x5fc>
 8005444:	9b08      	ldr	r3, [sp, #32]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <__kernel_rem_pio2+0x5e8>
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	061b      	lsls	r3, r3, #24
 800544e:	18f6      	adds	r6, r6, r3
 8005450:	003a      	movs	r2, r7
 8005452:	0033      	movs	r3, r6
 8005454:	9907      	ldr	r1, [sp, #28]
 8005456:	608a      	str	r2, [r1, #8]
 8005458:	60cb      	str	r3, [r1, #12]
 800545a:	e776      	b.n	800534a <__kernel_rem_pio2+0x4e2>
 800545c:	2600      	movs	r6, #0
 800545e:	9c00      	ldr	r4, [sp, #0]
 8005460:	0035      	movs	r5, r6
 8005462:	e7d4      	b.n	800540e <__kernel_rem_pio2+0x5a6>
 8005464:	0038      	movs	r0, r7
 8005466:	682a      	ldr	r2, [r5, #0]
 8005468:	686b      	ldr	r3, [r5, #4]
 800546a:	0031      	movs	r1, r6
 800546c:	f7fb f81e 	bl	80004ac <__aeabi_dadd>
 8005470:	3401      	adds	r4, #1
 8005472:	0007      	movs	r7, r0
 8005474:	000e      	movs	r6, r1
 8005476:	e7e1      	b.n	800543c <__kernel_rem_pio2+0x5d4>
 8005478:	9b02      	ldr	r3, [sp, #8]
 800547a:	68ae      	ldr	r6, [r5, #8]
 800547c:	68ef      	ldr	r7, [r5, #12]
 800547e:	3b01      	subs	r3, #1
 8005480:	9302      	str	r3, [sp, #8]
 8005482:	682a      	ldr	r2, [r5, #0]
 8005484:	686b      	ldr	r3, [r5, #4]
 8005486:	9204      	str	r2, [sp, #16]
 8005488:	9305      	str	r3, [sp, #20]
 800548a:	9804      	ldr	r0, [sp, #16]
 800548c:	9905      	ldr	r1, [sp, #20]
 800548e:	0032      	movs	r2, r6
 8005490:	003b      	movs	r3, r7
 8005492:	f7fb f80b 	bl	80004ac <__aeabi_dadd>
 8005496:	0002      	movs	r2, r0
 8005498:	000b      	movs	r3, r1
 800549a:	900a      	str	r0, [sp, #40]	; 0x28
 800549c:	910b      	str	r1, [sp, #44]	; 0x2c
 800549e:	9804      	ldr	r0, [sp, #16]
 80054a0:	9905      	ldr	r1, [sp, #20]
 80054a2:	f7fc f9ad 	bl	8001800 <__aeabi_dsub>
 80054a6:	0032      	movs	r2, r6
 80054a8:	003b      	movs	r3, r7
 80054aa:	f7fa ffff 	bl	80004ac <__aeabi_dadd>
 80054ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054b2:	60a8      	str	r0, [r5, #8]
 80054b4:	60e9      	str	r1, [r5, #12]
 80054b6:	602a      	str	r2, [r5, #0]
 80054b8:	606b      	str	r3, [r5, #4]
 80054ba:	e758      	b.n	800536e <__kernel_rem_pio2+0x506>
 80054bc:	6826      	ldr	r6, [r4, #0]
 80054be:	6867      	ldr	r7, [r4, #4]
 80054c0:	68a2      	ldr	r2, [r4, #8]
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	0030      	movs	r0, r6
 80054c6:	0039      	movs	r1, r7
 80054c8:	9202      	str	r2, [sp, #8]
 80054ca:	9303      	str	r3, [sp, #12]
 80054cc:	f7fa ffee 	bl	80004ac <__aeabi_dadd>
 80054d0:	0002      	movs	r2, r0
 80054d2:	000b      	movs	r3, r1
 80054d4:	9004      	str	r0, [sp, #16]
 80054d6:	9105      	str	r1, [sp, #20]
 80054d8:	0030      	movs	r0, r6
 80054da:	0039      	movs	r1, r7
 80054dc:	f7fc f990 	bl	8001800 <__aeabi_dsub>
 80054e0:	9a02      	ldr	r2, [sp, #8]
 80054e2:	9b03      	ldr	r3, [sp, #12]
 80054e4:	f7fa ffe2 	bl	80004ac <__aeabi_dadd>
 80054e8:	9a04      	ldr	r2, [sp, #16]
 80054ea:	9b05      	ldr	r3, [sp, #20]
 80054ec:	60a0      	str	r0, [r4, #8]
 80054ee:	60e1      	str	r1, [r4, #12]
 80054f0:	6022      	str	r2, [r4, #0]
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	3d01      	subs	r5, #1
 80054f6:	e740      	b.n	800537a <__kernel_rem_pio2+0x512>
 80054f8:	9b00      	ldr	r3, [sp, #0]
 80054fa:	aa4e      	add	r2, sp, #312	; 0x138
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	18d3      	adds	r3, r2, r3
 8005500:	0020      	movs	r0, r4
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f7fa ffd1 	bl	80004ac <__aeabi_dadd>
 800550a:	9b00      	ldr	r3, [sp, #0]
 800550c:	0004      	movs	r4, r0
 800550e:	3b01      	subs	r3, #1
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	e738      	b.n	8005386 <__kernel_rem_pio2+0x51e>
 8005514:	9b07      	ldr	r3, [sp, #28]
 8005516:	9a07      	ldr	r2, [sp, #28]
 8005518:	601f      	str	r7, [r3, #0]
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	061b      	lsls	r3, r3, #24
 800551e:	18f6      	adds	r6, r6, r3
 8005520:	18c0      	adds	r0, r0, r3
 8005522:	18c9      	adds	r1, r1, r3
 8005524:	6056      	str	r6, [r2, #4]
 8005526:	6095      	str	r5, [r2, #8]
 8005528:	60d0      	str	r0, [r2, #12]
 800552a:	6114      	str	r4, [r2, #16]
 800552c:	6151      	str	r1, [r2, #20]
 800552e:	e70c      	b.n	800534a <__kernel_rem_pio2+0x4e2>
 8005530:	41700000 	.word	0x41700000
 8005534:	3e700000 	.word	0x3e700000
 8005538:	08005af0 	.word	0x08005af0

0800553c <__kernel_sin>:
 800553c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553e:	b089      	sub	sp, #36	; 0x24
 8005540:	9202      	str	r2, [sp, #8]
 8005542:	9303      	str	r3, [sp, #12]
 8005544:	22f9      	movs	r2, #249	; 0xf9
 8005546:	004b      	lsls	r3, r1, #1
 8005548:	0007      	movs	r7, r0
 800554a:	000e      	movs	r6, r1
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	0592      	lsls	r2, r2, #22
 8005550:	4293      	cmp	r3, r2
 8005552:	da03      	bge.n	800555c <__kernel_sin+0x20>
 8005554:	f7fc fce6 	bl	8001f24 <__aeabi_d2iz>
 8005558:	2800      	cmp	r0, #0
 800555a:	d04c      	beq.n	80055f6 <__kernel_sin+0xba>
 800555c:	003a      	movs	r2, r7
 800555e:	0033      	movs	r3, r6
 8005560:	0038      	movs	r0, r7
 8005562:	0031      	movs	r1, r6
 8005564:	f7fb fee0 	bl	8001328 <__aeabi_dmul>
 8005568:	0004      	movs	r4, r0
 800556a:	000d      	movs	r5, r1
 800556c:	0002      	movs	r2, r0
 800556e:	000b      	movs	r3, r1
 8005570:	0038      	movs	r0, r7
 8005572:	0031      	movs	r1, r6
 8005574:	f7fb fed8 	bl	8001328 <__aeabi_dmul>
 8005578:	4a39      	ldr	r2, [pc, #228]	; (8005660 <__kernel_sin+0x124>)
 800557a:	9000      	str	r0, [sp, #0]
 800557c:	9101      	str	r1, [sp, #4]
 800557e:	4b39      	ldr	r3, [pc, #228]	; (8005664 <__kernel_sin+0x128>)
 8005580:	0020      	movs	r0, r4
 8005582:	0029      	movs	r1, r5
 8005584:	f7fb fed0 	bl	8001328 <__aeabi_dmul>
 8005588:	4a37      	ldr	r2, [pc, #220]	; (8005668 <__kernel_sin+0x12c>)
 800558a:	4b38      	ldr	r3, [pc, #224]	; (800566c <__kernel_sin+0x130>)
 800558c:	f7fc f938 	bl	8001800 <__aeabi_dsub>
 8005590:	0022      	movs	r2, r4
 8005592:	002b      	movs	r3, r5
 8005594:	f7fb fec8 	bl	8001328 <__aeabi_dmul>
 8005598:	4a35      	ldr	r2, [pc, #212]	; (8005670 <__kernel_sin+0x134>)
 800559a:	4b36      	ldr	r3, [pc, #216]	; (8005674 <__kernel_sin+0x138>)
 800559c:	f7fa ff86 	bl	80004ac <__aeabi_dadd>
 80055a0:	0022      	movs	r2, r4
 80055a2:	002b      	movs	r3, r5
 80055a4:	f7fb fec0 	bl	8001328 <__aeabi_dmul>
 80055a8:	4a33      	ldr	r2, [pc, #204]	; (8005678 <__kernel_sin+0x13c>)
 80055aa:	4b34      	ldr	r3, [pc, #208]	; (800567c <__kernel_sin+0x140>)
 80055ac:	f7fc f928 	bl	8001800 <__aeabi_dsub>
 80055b0:	0022      	movs	r2, r4
 80055b2:	002b      	movs	r3, r5
 80055b4:	f7fb feb8 	bl	8001328 <__aeabi_dmul>
 80055b8:	4b31      	ldr	r3, [pc, #196]	; (8005680 <__kernel_sin+0x144>)
 80055ba:	4a32      	ldr	r2, [pc, #200]	; (8005684 <__kernel_sin+0x148>)
 80055bc:	f7fa ff76 	bl	80004ac <__aeabi_dadd>
 80055c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c2:	9004      	str	r0, [sp, #16]
 80055c4:	9105      	str	r1, [sp, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d119      	bne.n	80055fe <__kernel_sin+0xc2>
 80055ca:	0002      	movs	r2, r0
 80055cc:	000b      	movs	r3, r1
 80055ce:	0020      	movs	r0, r4
 80055d0:	0029      	movs	r1, r5
 80055d2:	f7fb fea9 	bl	8001328 <__aeabi_dmul>
 80055d6:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <__kernel_sin+0x14c>)
 80055d8:	4b2c      	ldr	r3, [pc, #176]	; (800568c <__kernel_sin+0x150>)
 80055da:	f7fc f911 	bl	8001800 <__aeabi_dsub>
 80055de:	9a00      	ldr	r2, [sp, #0]
 80055e0:	9b01      	ldr	r3, [sp, #4]
 80055e2:	f7fb fea1 	bl	8001328 <__aeabi_dmul>
 80055e6:	0002      	movs	r2, r0
 80055e8:	000b      	movs	r3, r1
 80055ea:	0038      	movs	r0, r7
 80055ec:	0031      	movs	r1, r6
 80055ee:	f7fa ff5d 	bl	80004ac <__aeabi_dadd>
 80055f2:	0007      	movs	r7, r0
 80055f4:	000e      	movs	r6, r1
 80055f6:	0038      	movs	r0, r7
 80055f8:	0031      	movs	r1, r6
 80055fa:	b009      	add	sp, #36	; 0x24
 80055fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fe:	2200      	movs	r2, #0
 8005600:	9802      	ldr	r0, [sp, #8]
 8005602:	9903      	ldr	r1, [sp, #12]
 8005604:	4b22      	ldr	r3, [pc, #136]	; (8005690 <__kernel_sin+0x154>)
 8005606:	f7fb fe8f 	bl	8001328 <__aeabi_dmul>
 800560a:	9a04      	ldr	r2, [sp, #16]
 800560c:	9b05      	ldr	r3, [sp, #20]
 800560e:	9006      	str	r0, [sp, #24]
 8005610:	9107      	str	r1, [sp, #28]
 8005612:	9800      	ldr	r0, [sp, #0]
 8005614:	9901      	ldr	r1, [sp, #4]
 8005616:	f7fb fe87 	bl	8001328 <__aeabi_dmul>
 800561a:	0002      	movs	r2, r0
 800561c:	000b      	movs	r3, r1
 800561e:	9806      	ldr	r0, [sp, #24]
 8005620:	9907      	ldr	r1, [sp, #28]
 8005622:	f7fc f8ed 	bl	8001800 <__aeabi_dsub>
 8005626:	0022      	movs	r2, r4
 8005628:	002b      	movs	r3, r5
 800562a:	f7fb fe7d 	bl	8001328 <__aeabi_dmul>
 800562e:	9a02      	ldr	r2, [sp, #8]
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	f7fc f8e5 	bl	8001800 <__aeabi_dsub>
 8005636:	4a14      	ldr	r2, [pc, #80]	; (8005688 <__kernel_sin+0x14c>)
 8005638:	0004      	movs	r4, r0
 800563a:	000d      	movs	r5, r1
 800563c:	9800      	ldr	r0, [sp, #0]
 800563e:	9901      	ldr	r1, [sp, #4]
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <__kernel_sin+0x150>)
 8005642:	f7fb fe71 	bl	8001328 <__aeabi_dmul>
 8005646:	0002      	movs	r2, r0
 8005648:	000b      	movs	r3, r1
 800564a:	0020      	movs	r0, r4
 800564c:	0029      	movs	r1, r5
 800564e:	f7fa ff2d 	bl	80004ac <__aeabi_dadd>
 8005652:	0002      	movs	r2, r0
 8005654:	000b      	movs	r3, r1
 8005656:	0038      	movs	r0, r7
 8005658:	0031      	movs	r1, r6
 800565a:	f7fc f8d1 	bl	8001800 <__aeabi_dsub>
 800565e:	e7c8      	b.n	80055f2 <__kernel_sin+0xb6>
 8005660:	5acfd57c 	.word	0x5acfd57c
 8005664:	3de5d93a 	.word	0x3de5d93a
 8005668:	8a2b9ceb 	.word	0x8a2b9ceb
 800566c:	3e5ae5e6 	.word	0x3e5ae5e6
 8005670:	57b1fe7d 	.word	0x57b1fe7d
 8005674:	3ec71de3 	.word	0x3ec71de3
 8005678:	19c161d5 	.word	0x19c161d5
 800567c:	3f2a01a0 	.word	0x3f2a01a0
 8005680:	3f811111 	.word	0x3f811111
 8005684:	1110f8a6 	.word	0x1110f8a6
 8005688:	55555549 	.word	0x55555549
 800568c:	3fc55555 	.word	0x3fc55555
 8005690:	3fe00000 	.word	0x3fe00000

08005694 <fabs>:
 8005694:	004b      	lsls	r3, r1, #1
 8005696:	0859      	lsrs	r1, r3, #1
 8005698:	4770      	bx	lr
	...

0800569c <floor>:
 800569c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800569e:	004b      	lsls	r3, r1, #1
 80056a0:	4a3d      	ldr	r2, [pc, #244]	; (8005798 <floor+0xfc>)
 80056a2:	0d5b      	lsrs	r3, r3, #21
 80056a4:	189f      	adds	r7, r3, r2
 80056a6:	4684      	mov	ip, r0
 80056a8:	000e      	movs	r6, r1
 80056aa:	000d      	movs	r5, r1
 80056ac:	0004      	movs	r4, r0
 80056ae:	9001      	str	r0, [sp, #4]
 80056b0:	2f13      	cmp	r7, #19
 80056b2:	dc34      	bgt.n	800571e <floor+0x82>
 80056b4:	2f00      	cmp	r7, #0
 80056b6:	da16      	bge.n	80056e6 <floor+0x4a>
 80056b8:	4a38      	ldr	r2, [pc, #224]	; (800579c <floor+0x100>)
 80056ba:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <floor+0x104>)
 80056bc:	4660      	mov	r0, ip
 80056be:	0031      	movs	r1, r6
 80056c0:	f7fa fef4 	bl	80004ac <__aeabi_dadd>
 80056c4:	2200      	movs	r2, #0
 80056c6:	2300      	movs	r3, #0
 80056c8:	f7fa febe 	bl	8000448 <__aeabi_dcmpgt>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d007      	beq.n	80056e0 <floor+0x44>
 80056d0:	2e00      	cmp	r6, #0
 80056d2:	da5d      	bge.n	8005790 <floor+0xf4>
 80056d4:	0073      	lsls	r3, r6, #1
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	431c      	orrs	r4, r3
 80056da:	d001      	beq.n	80056e0 <floor+0x44>
 80056dc:	2400      	movs	r4, #0
 80056de:	4d31      	ldr	r5, [pc, #196]	; (80057a4 <floor+0x108>)
 80056e0:	46a4      	mov	ip, r4
 80056e2:	002e      	movs	r6, r5
 80056e4:	e029      	b.n	800573a <floor+0x9e>
 80056e6:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <floor+0x10c>)
 80056e8:	413b      	asrs	r3, r7
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	400b      	ands	r3, r1
 80056ee:	4303      	orrs	r3, r0
 80056f0:	d023      	beq.n	800573a <floor+0x9e>
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <floor+0x100>)
 80056f4:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <floor+0x104>)
 80056f6:	4660      	mov	r0, ip
 80056f8:	0031      	movs	r1, r6
 80056fa:	f7fa fed7 	bl	80004ac <__aeabi_dadd>
 80056fe:	2200      	movs	r2, #0
 8005700:	2300      	movs	r3, #0
 8005702:	f7fa fea1 	bl	8000448 <__aeabi_dcmpgt>
 8005706:	2800      	cmp	r0, #0
 8005708:	d0ea      	beq.n	80056e0 <floor+0x44>
 800570a:	2e00      	cmp	r6, #0
 800570c:	da03      	bge.n	8005716 <floor+0x7a>
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	035b      	lsls	r3, r3, #13
 8005712:	413b      	asrs	r3, r7
 8005714:	18f5      	adds	r5, r6, r3
 8005716:	9b00      	ldr	r3, [sp, #0]
 8005718:	2400      	movs	r4, #0
 800571a:	439d      	bics	r5, r3
 800571c:	e7e0      	b.n	80056e0 <floor+0x44>
 800571e:	2f33      	cmp	r7, #51	; 0x33
 8005720:	dd0f      	ble.n	8005742 <floor+0xa6>
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	429f      	cmp	r7, r3
 8005728:	d107      	bne.n	800573a <floor+0x9e>
 800572a:	0002      	movs	r2, r0
 800572c:	000b      	movs	r3, r1
 800572e:	4660      	mov	r0, ip
 8005730:	0031      	movs	r1, r6
 8005732:	f7fa febb 	bl	80004ac <__aeabi_dadd>
 8005736:	4684      	mov	ip, r0
 8005738:	000e      	movs	r6, r1
 800573a:	4660      	mov	r0, ip
 800573c:	0031      	movs	r1, r6
 800573e:	b003      	add	sp, #12
 8005740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <floor+0x110>)
 8005744:	189b      	adds	r3, r3, r2
 8005746:	2201      	movs	r2, #1
 8005748:	4252      	negs	r2, r2
 800574a:	40da      	lsrs	r2, r3
 800574c:	9200      	str	r2, [sp, #0]
 800574e:	4210      	tst	r0, r2
 8005750:	d0f3      	beq.n	800573a <floor+0x9e>
 8005752:	4a12      	ldr	r2, [pc, #72]	; (800579c <floor+0x100>)
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <floor+0x104>)
 8005756:	4660      	mov	r0, ip
 8005758:	0031      	movs	r1, r6
 800575a:	f7fa fea7 	bl	80004ac <__aeabi_dadd>
 800575e:	2200      	movs	r2, #0
 8005760:	2300      	movs	r3, #0
 8005762:	f7fa fe71 	bl	8000448 <__aeabi_dcmpgt>
 8005766:	2800      	cmp	r0, #0
 8005768:	d0ba      	beq.n	80056e0 <floor+0x44>
 800576a:	2e00      	cmp	r6, #0
 800576c:	da02      	bge.n	8005774 <floor+0xd8>
 800576e:	2f14      	cmp	r7, #20
 8005770:	d103      	bne.n	800577a <floor+0xde>
 8005772:	3501      	adds	r5, #1
 8005774:	9b00      	ldr	r3, [sp, #0]
 8005776:	439c      	bics	r4, r3
 8005778:	e7b2      	b.n	80056e0 <floor+0x44>
 800577a:	2334      	movs	r3, #52	; 0x34
 800577c:	1bdf      	subs	r7, r3, r7
 800577e:	3b33      	subs	r3, #51	; 0x33
 8005780:	40bb      	lsls	r3, r7
 8005782:	18e4      	adds	r4, r4, r3
 8005784:	9b01      	ldr	r3, [sp, #4]
 8005786:	429c      	cmp	r4, r3
 8005788:	419b      	sbcs	r3, r3
 800578a:	425b      	negs	r3, r3
 800578c:	18f5      	adds	r5, r6, r3
 800578e:	e7f1      	b.n	8005774 <floor+0xd8>
 8005790:	2400      	movs	r4, #0
 8005792:	0025      	movs	r5, r4
 8005794:	e7a4      	b.n	80056e0 <floor+0x44>
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	fffffc01 	.word	0xfffffc01
 800579c:	8800759c 	.word	0x8800759c
 80057a0:	7e37e43c 	.word	0x7e37e43c
 80057a4:	bff00000 	.word	0xbff00000
 80057a8:	000fffff 	.word	0x000fffff
 80057ac:	fffffbed 	.word	0xfffffbed

080057b0 <scalbn>:
 80057b0:	004b      	lsls	r3, r1, #1
 80057b2:	b570      	push	{r4, r5, r6, lr}
 80057b4:	0d5b      	lsrs	r3, r3, #21
 80057b6:	0014      	movs	r4, r2
 80057b8:	000a      	movs	r2, r1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10d      	bne.n	80057da <scalbn+0x2a>
 80057be:	004b      	lsls	r3, r1, #1
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	4303      	orrs	r3, r0
 80057c4:	d010      	beq.n	80057e8 <scalbn+0x38>
 80057c6:	4b27      	ldr	r3, [pc, #156]	; (8005864 <scalbn+0xb4>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	f7fb fdad 	bl	8001328 <__aeabi_dmul>
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <scalbn+0xb8>)
 80057d0:	429c      	cmp	r4, r3
 80057d2:	da0a      	bge.n	80057ea <scalbn+0x3a>
 80057d4:	4a25      	ldr	r2, [pc, #148]	; (800586c <scalbn+0xbc>)
 80057d6:	4b26      	ldr	r3, [pc, #152]	; (8005870 <scalbn+0xc0>)
 80057d8:	e019      	b.n	800580e <scalbn+0x5e>
 80057da:	4d26      	ldr	r5, [pc, #152]	; (8005874 <scalbn+0xc4>)
 80057dc:	42ab      	cmp	r3, r5
 80057de:	d108      	bne.n	80057f2 <scalbn+0x42>
 80057e0:	0002      	movs	r2, r0
 80057e2:	000b      	movs	r3, r1
 80057e4:	f7fa fe62 	bl	80004ac <__aeabi_dadd>
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
 80057ea:	000a      	movs	r2, r1
 80057ec:	004b      	lsls	r3, r1, #1
 80057ee:	0d5b      	lsrs	r3, r3, #21
 80057f0:	3b36      	subs	r3, #54	; 0x36
 80057f2:	4d21      	ldr	r5, [pc, #132]	; (8005878 <scalbn+0xc8>)
 80057f4:	18e3      	adds	r3, r4, r3
 80057f6:	42ab      	cmp	r3, r5
 80057f8:	dd0c      	ble.n	8005814 <scalbn+0x64>
 80057fa:	4c20      	ldr	r4, [pc, #128]	; (800587c <scalbn+0xcc>)
 80057fc:	4d20      	ldr	r5, [pc, #128]	; (8005880 <scalbn+0xd0>)
 80057fe:	2900      	cmp	r1, #0
 8005800:	da01      	bge.n	8005806 <scalbn+0x56>
 8005802:	4c1e      	ldr	r4, [pc, #120]	; (800587c <scalbn+0xcc>)
 8005804:	4d1f      	ldr	r5, [pc, #124]	; (8005884 <scalbn+0xd4>)
 8005806:	0020      	movs	r0, r4
 8005808:	0029      	movs	r1, r5
 800580a:	4a1c      	ldr	r2, [pc, #112]	; (800587c <scalbn+0xcc>)
 800580c:	4b1c      	ldr	r3, [pc, #112]	; (8005880 <scalbn+0xd0>)
 800580e:	f7fb fd8b 	bl	8001328 <__aeabi_dmul>
 8005812:	e7e9      	b.n	80057e8 <scalbn+0x38>
 8005814:	2b00      	cmp	r3, #0
 8005816:	dd05      	ble.n	8005824 <scalbn+0x74>
 8005818:	4c1b      	ldr	r4, [pc, #108]	; (8005888 <scalbn+0xd8>)
 800581a:	051b      	lsls	r3, r3, #20
 800581c:	4022      	ands	r2, r4
 800581e:	431a      	orrs	r2, r3
 8005820:	0011      	movs	r1, r2
 8005822:	e7e1      	b.n	80057e8 <scalbn+0x38>
 8005824:	001d      	movs	r5, r3
 8005826:	3535      	adds	r5, #53	; 0x35
 8005828:	da13      	bge.n	8005852 <scalbn+0xa2>
 800582a:	4a18      	ldr	r2, [pc, #96]	; (800588c <scalbn+0xdc>)
 800582c:	0fcb      	lsrs	r3, r1, #31
 800582e:	4294      	cmp	r4, r2
 8005830:	dd08      	ble.n	8005844 <scalbn+0x94>
 8005832:	4812      	ldr	r0, [pc, #72]	; (800587c <scalbn+0xcc>)
 8005834:	4912      	ldr	r1, [pc, #72]	; (8005880 <scalbn+0xd0>)
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <scalbn+0x8e>
 800583a:	4810      	ldr	r0, [pc, #64]	; (800587c <scalbn+0xcc>)
 800583c:	4911      	ldr	r1, [pc, #68]	; (8005884 <scalbn+0xd4>)
 800583e:	4a0f      	ldr	r2, [pc, #60]	; (800587c <scalbn+0xcc>)
 8005840:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <scalbn+0xd0>)
 8005842:	e7e4      	b.n	800580e <scalbn+0x5e>
 8005844:	4809      	ldr	r0, [pc, #36]	; (800586c <scalbn+0xbc>)
 8005846:	490a      	ldr	r1, [pc, #40]	; (8005870 <scalbn+0xc0>)
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0c3      	beq.n	80057d4 <scalbn+0x24>
 800584c:	4807      	ldr	r0, [pc, #28]	; (800586c <scalbn+0xbc>)
 800584e:	4910      	ldr	r1, [pc, #64]	; (8005890 <scalbn+0xe0>)
 8005850:	e7c0      	b.n	80057d4 <scalbn+0x24>
 8005852:	4c0d      	ldr	r4, [pc, #52]	; (8005888 <scalbn+0xd8>)
 8005854:	3336      	adds	r3, #54	; 0x36
 8005856:	4022      	ands	r2, r4
 8005858:	051b      	lsls	r3, r3, #20
 800585a:	4313      	orrs	r3, r2
 800585c:	0019      	movs	r1, r3
 800585e:	2200      	movs	r2, #0
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <scalbn+0xe4>)
 8005862:	e7d4      	b.n	800580e <scalbn+0x5e>
 8005864:	43500000 	.word	0x43500000
 8005868:	ffff3cb0 	.word	0xffff3cb0
 800586c:	c2f8f359 	.word	0xc2f8f359
 8005870:	01a56e1f 	.word	0x01a56e1f
 8005874:	000007ff 	.word	0x000007ff
 8005878:	000007fe 	.word	0x000007fe
 800587c:	8800759c 	.word	0x8800759c
 8005880:	7e37e43c 	.word	0x7e37e43c
 8005884:	fe37e43c 	.word	0xfe37e43c
 8005888:	800fffff 	.word	0x800fffff
 800588c:	0000c350 	.word	0x0000c350
 8005890:	81a56e1f 	.word	0x81a56e1f
 8005894:	3c900000 	.word	0x3c900000

08005898 <_init>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589e:	bc08      	pop	{r3}
 80058a0:	469e      	mov	lr, r3
 80058a2:	4770      	bx	lr

080058a4 <_fini>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058aa:	bc08      	pop	{r3}
 80058ac:	469e      	mov	lr, r3
 80058ae:	4770      	bx	lr
