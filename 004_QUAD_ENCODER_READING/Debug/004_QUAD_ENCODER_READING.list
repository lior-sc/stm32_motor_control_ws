
004_QUAD_ENCODER_READING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002784  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800287c  0800287c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800287c  0800287c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800287c  0800287c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08002890  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002890  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bde8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c2  00000000  00000000  0002be1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dd9  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4d5  00000000  00000000  00046831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d75e  00000000  00000000  00052d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  000e04b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800282c 	.word	0x0800282c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800282c 	.word	0x0800282c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb1c 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f809 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f93a 	bl	80004a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f908 	bl	8000444 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000234:	f000 f8a2 	bl	800037c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000238:	f000 f83e 	bl	80002b8 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x1c>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b590      	push	{r4, r7, lr}
 8000240:	b093      	sub	sp, #76	; 0x4c
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	2414      	movs	r4, #20
 8000246:	193b      	adds	r3, r7, r4
 8000248:	0018      	movs	r0, r3
 800024a:	2334      	movs	r3, #52	; 0x34
 800024c:	001a      	movs	r2, r3
 800024e:	2100      	movs	r1, #0
 8000250:	f002 fae4 	bl	800281c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	0018      	movs	r0, r3
 8000258:	2310      	movs	r3, #16
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 fadd 	bl	800281c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	2220      	movs	r2, #32
 8000266:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2201      	movs	r2, #1
 800026c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2200      	movs	r2, #0
 8000272:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fd90 	bl	8000d9c <HAL_RCC_OscConfig>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000280:	f000 f972 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2207      	movs	r2, #7
 8000288:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2203      	movs	r2, #3
 800028e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2101      	movs	r1, #1
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 f901 	bl	80014a8 <HAL_RCC_ClockConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002aa:	f000 f95d 	bl	8000568 <Error_Handler>
  }
}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b013      	add	sp, #76	; 0x4c
 80002b4:	bd90      	pop	{r4, r7, pc}
	...

080002b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08d      	sub	sp, #52	; 0x34
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80002be:	240c      	movs	r4, #12
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2324      	movs	r3, #36	; 0x24
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 faa7 	bl	800281c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2308      	movs	r3, #8
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 faa0 	bl	800281c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002dc:	4b26      	ldr	r3, [pc, #152]	; (8000378 <MX_TIM2_Init+0xc0>)
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	05d2      	lsls	r2, r2, #23
 80002e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <MX_TIM2_Init+0xc0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ea:	4b23      	ldr	r3, [pc, #140]	; (8000378 <MX_TIM2_Init+0xc0>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <MX_TIM2_Init+0xc0>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	4252      	negs	r2, r2
 80002f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f8:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <MX_TIM2_Init+0xc0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_TIM2_Init+0xc0>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2201      	movs	r2, #1
 800030a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2201      	movs	r2, #1
 8000316:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2201      	movs	r2, #1
 800032e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800033c:	187a      	adds	r2, r7, r1
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_TIM2_Init+0xc0>)
 8000340:	0011      	movs	r1, r2
 8000342:	0018      	movs	r0, r3
 8000344:	f001 fa6c 	bl	8001820 <HAL_TIM_Encoder_Init>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800034c:	f000 f90c 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035c:	1d3a      	adds	r2, r7, #4
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_TIM2_Init+0xc0>)
 8000360:	0011      	movs	r1, r2
 8000362:	0018      	movs	r0, r3
 8000364:	f001 fe20 	bl	8001fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800036c:	f000 f8fc 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b00d      	add	sp, #52	; 0x34
 8000376:	bd90      	pop	{r4, r7, pc}
 8000378:	20000028 	.word	0x20000028

0800037c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000382:	2320      	movs	r3, #32
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	0018      	movs	r0, r3
 8000388:	2308      	movs	r3, #8
 800038a:	001a      	movs	r2, r3
 800038c:	2100      	movs	r1, #0
 800038e:	f002 fa45 	bl	800281c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	0018      	movs	r0, r3
 8000396:	231c      	movs	r3, #28
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f002 fa3e 	bl	800281c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a0:	4b24      	ldr	r3, [pc, #144]	; (8000434 <MX_TIM3_Init+0xb8>)
 80003a2:	4a25      	ldr	r2, [pc, #148]	; (8000438 <MX_TIM3_Init+0xbc>)
 80003a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003a6:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_TIM3_Init+0xb8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <MX_TIM3_Init+0xb8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4800-1;
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_TIM3_Init+0xb8>)
 80003b4:	4a21      	ldr	r2, [pc, #132]	; (800043c <MX_TIM3_Init+0xc0>)
 80003b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <MX_TIM3_Init+0xb8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_TIM3_Init+0xb8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_TIM3_Init+0xb8>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 f9da 	bl	8001780 <HAL_TIM_PWM_Init>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80003d0:	f000 f8ca 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d4:	2120      	movs	r1, #32
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003e2:	187a      	adds	r2, r7, r1
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_TIM3_Init+0xb8>)
 80003e6:	0011      	movs	r1, r2
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fddd 	bl	8001fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80003f2:	f000 f8b9 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2260      	movs	r2, #96	; 0x60
 80003fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2400-1;
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4a10      	ldr	r2, [pc, #64]	; (8000440 <MX_TIM3_Init+0xc4>)
 8000400:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2204      	movs	r2, #4
 800040c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800040e:	1d39      	adds	r1, r7, #4
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_TIM3_Init+0xb8>)
 8000412:	2200      	movs	r2, #0
 8000414:	0018      	movs	r0, r3
 8000416:	f001 faab 	bl	8001970 <HAL_TIM_PWM_ConfigChannel>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800041e:	f000 f8a3 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <MX_TIM3_Init+0xb8>)
 8000424:	0018      	movs	r0, r3
 8000426:	f000 f931 	bl	800068c <HAL_TIM_MspPostInit>

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b00a      	add	sp, #40	; 0x28
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000070 	.word	0x20000070
 8000438:	40000400 	.word	0x40000400
 800043c:	000012bf 	.word	0x000012bf
 8000440:	0000095f 	.word	0x0000095f

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_USART2_UART_Init+0x58>)
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <MX_USART2_UART_Init+0x5c>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000450:	2296      	movs	r2, #150	; 0x96
 8000452:	0212      	lsls	r2, r2, #8
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART2_UART_Init+0x58>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fde5 	bl	8002058 <HAL_UART_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000492:	f000 f869 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000b8 	.word	0x200000b8
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	240c      	movs	r4, #12
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2314      	movs	r3, #20
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f002 f9b1 	bl	800281c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <MX_GPIO_Init+0xbc>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b28      	ldr	r3, [pc, #160]	; (8000560 <MX_GPIO_Init+0xbc>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0289      	lsls	r1, r1, #10
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b25      	ldr	r3, [pc, #148]	; (8000560 <MX_GPIO_Init+0xbc>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	029b      	lsls	r3, r3, #10
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <MX_GPIO_Init+0xbc>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_GPIO_Init+0xbc>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	02c9      	lsls	r1, r1, #11
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_GPIO_Init+0xbc>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	02db      	lsls	r3, r3, #11
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_dir_GPIO_Port, motor_dir_Pin, GPIO_PIN_RESET);
 80004f2:	2390      	movs	r3, #144	; 0x90
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2200      	movs	r2, #0
 80004f8:	2120      	movs	r1, #32
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fc30 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_GPIO_Init+0xc0>)
 8000502:	2200      	movs	r2, #0
 8000504:	2108      	movs	r1, #8
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fc2a 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : motor_dir_Pin */
  GPIO_InitStruct.Pin = motor_dir_Pin;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2220      	movs	r2, #32
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(motor_dir_GPIO_Port, &GPIO_InitStruct);
 8000524:	193a      	adds	r2, r7, r4
 8000526:	2390      	movs	r3, #144	; 0x90
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f000 faaf 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000532:	0021      	movs	r1, r4
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2208      	movs	r2, #8
 8000538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2201      	movs	r2, #1
 800053e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800054c:	187b      	adds	r3, r7, r1
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <MX_GPIO_Init+0xc0>)
 8000550:	0019      	movs	r1, r3
 8000552:	0010      	movs	r0, r2
 8000554:	f000 fa9c 	bl	8000a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b009      	add	sp, #36	; 0x24
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	699a      	ldr	r2, [r3, #24]
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	2101      	movs	r1, #1
 8000582:	430a      	orrs	r2, r1
 8000584:	619a      	str	r2, [r3, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	2201      	movs	r2, #1
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	69da      	ldr	r2, [r3, #28]
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	0549      	lsls	r1, r1, #21
 800059c:	430a      	orrs	r2, r1
 800059e:	61da      	str	r2, [r3, #28]
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_MspInit+0x44>)
 80005a2:	69da      	ldr	r2, [r3, #28]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	055b      	lsls	r3, r3, #21
 80005a8:	4013      	ands	r3, r2
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08b      	sub	sp, #44	; 0x2c
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	2414      	movs	r4, #20
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	0018      	movs	r0, r3
 80005ca:	2314      	movs	r3, #20
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 f924 	bl	800281c <memset>
  if(htim_encoder->Instance==TIM2)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	429a      	cmp	r2, r3
 80005de:	d130      	bne.n	8000642 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_TIM_Encoder_MspInit+0x90>)
 80005e2:	69da      	ldr	r2, [r3, #28]
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_TIM_Encoder_MspInit+0x90>)
 80005e6:	2101      	movs	r1, #1
 80005e8:	430a      	orrs	r2, r1
 80005ea:	61da      	str	r2, [r3, #28]
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_TIM_Encoder_MspInit+0x90>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4013      	ands	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_TIM_Encoder_MspInit+0x90>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <HAL_TIM_Encoder_MspInit+0x90>)
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	0289      	lsls	r1, r1, #10
 8000602:	430a      	orrs	r2, r1
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_TIM_Encoder_MspInit+0x90>)
 8000608:	695a      	ldr	r2, [r3, #20]
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	029b      	lsls	r3, r3, #10
 800060e:	4013      	ands	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000614:	0021      	movs	r1, r4
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2203      	movs	r2, #3
 800061a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2202      	movs	r2, #2
 8000620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2202      	movs	r2, #2
 8000632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	187a      	adds	r2, r7, r1
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fa27 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b00b      	add	sp, #44	; 0x2c
 8000648:	bd90      	pop	{r4, r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <HAL_TIM_PWM_MspInit+0x34>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d10b      	bne.n	800067a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_TIM_PWM_MspInit+0x38>)
 8000664:	69da      	ldr	r2, [r3, #28]
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_TIM_PWM_MspInit+0x38>)
 8000668:	2102      	movs	r1, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	61da      	str	r2, [r3, #28]
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_TIM_PWM_MspInit+0x38>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	2202      	movs	r2, #2
 8000674:	4013      	ands	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40000400 	.word	0x40000400
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	240c      	movs	r4, #12
 8000696:	193b      	adds	r3, r7, r4
 8000698:	0018      	movs	r0, r3
 800069a:	2314      	movs	r3, #20
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f002 f8bc 	bl	800281c <memset>
  if(htim->Instance==TIM3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <HAL_TIM_MspPostInit+0x74>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d124      	bne.n	80006f8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_TIM_MspPostInit+0x78>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <HAL_TIM_MspPostInit+0x78>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0289      	lsls	r1, r1, #10
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_TIM_MspPostInit+0x78>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	029b      	lsls	r3, r3, #10
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = motor_pwm_Pin;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2240      	movs	r2, #64	; 0x40
 80006d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2201      	movs	r2, #1
 80006e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(motor_pwm_GPIO_Port, &GPIO_InitStruct);
 80006ea:	187a      	adds	r2, r7, r1
 80006ec:	2390      	movs	r3, #144	; 0x90
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 f9cc 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b009      	add	sp, #36	; 0x24
 80006fe:	bd90      	pop	{r4, r7, pc}
 8000700:	40000400 	.word	0x40000400
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b08b      	sub	sp, #44	; 0x2c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	2414      	movs	r4, #20
 8000712:	193b      	adds	r3, r7, r4
 8000714:	0018      	movs	r0, r3
 8000716:	2314      	movs	r3, #20
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f002 f87e 	bl	800281c <memset>
  if(huart->Instance==USART2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <HAL_UART_MspInit+0x90>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d132      	bne.n	8000790 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <HAL_UART_MspInit+0x94>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_UART_MspInit+0x94>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0289      	lsls	r1, r1, #10
 8000734:	430a      	orrs	r2, r1
 8000736:	61da      	str	r2, [r3, #28]
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_UART_MspInit+0x94>)
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	029b      	lsls	r3, r3, #10
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_UART_MspInit+0x94>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_UART_MspInit+0x94>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0289      	lsls	r1, r1, #10
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_UART_MspInit+0x94>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_UART_MspInit+0x98>)
 8000768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	187a      	adds	r2, r7, r1
 8000784:	2390      	movs	r3, #144	; 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f980 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b00b      	add	sp, #44	; 0x2c
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40004400 	.word	0x40004400
 800079c:	40021000 	.word	0x40021000
 80007a0:	00008004 	.word	0x00008004

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f892 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e0:	f7ff fff7 	bl	80007d2 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80007e4:	4812      	ldr	r0, [pc, #72]	; (8000830 <LoopForever+0x6>)
    LDR R1, [R0]
 80007e6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80007e8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <LoopForever+0xa>)
    CMP R1, R2
 80007ec:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80007ee:	d105      	bne.n	80007fc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80007f0:	4811      	ldr	r0, [pc, #68]	; (8000838 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80007f2:	4912      	ldr	r1, [pc, #72]	; (800083c <LoopForever+0x12>)
    STR R1, [R0]
 80007f4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80007f8:	4912      	ldr	r1, [pc, #72]	; (8000844 <LoopForever+0x1a>)
    STR R1, [R0]
 80007fa:	6001      	str	r1, [r0, #0]

080007fc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <LoopForever+0x1e>)
  ldr r1, =_edata
 80007fe:	4913      	ldr	r1, [pc, #76]	; (800084c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <LoopForever+0x26>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000814:	4c10      	ldr	r4, [pc, #64]	; (8000858 <LoopForever+0x2e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000822:	f001 ffd7 	bl	80027d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fcfb 	bl	8000220 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000830:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000834:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000838:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800083c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000840:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000844:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000850:	08002884 	.word	0x08002884
  ldr r2, =_sbss
 8000854:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000858:	20000144 	.word	0x20000144

0800085c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_IRQHandler>
	...

08000860 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <HAL_Init+0x24>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_Init+0x24>)
 800086a:	2110      	movs	r1, #16
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000870:	2000      	movs	r0, #0
 8000872:	f000 f809 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000876:	f7ff fe7d 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087a:	2300      	movs	r3, #0
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40022000 	.word	0x40022000

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_InitTick+0x5c>)
 8000892:	681c      	ldr	r4, [r3, #0]
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_InitTick+0x60>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0019      	movs	r1, r3
 800089a:	23fa      	movs	r3, #250	; 0xfa
 800089c:	0098      	lsls	r0, r3, #2
 800089e:	f7ff fc33 	bl	8000108 <__udivsi3>
 80008a2:	0003      	movs	r3, r0
 80008a4:	0019      	movs	r1, r3
 80008a6:	0020      	movs	r0, r4
 80008a8:	f7ff fc2e 	bl	8000108 <__udivsi3>
 80008ac:	0003      	movs	r3, r0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 f8e1 	bl	8000a76 <HAL_SYSTICK_Config>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e00f      	b.n	80008dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d80b      	bhi.n	80008da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2301      	movs	r3, #1
 80008c6:	425b      	negs	r3, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 f8be 	bl	8000a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_InitTick+0x64>)
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b003      	add	sp, #12
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x1c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	001a      	movs	r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x20>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	18d2      	adds	r2, r2, r3
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_IncTick+0x20>)
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000008 	.word	0x20000008
 8000910:	20000140 	.word	0x20000140

08000914 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <HAL_GetTick+0x10>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000140 	.word	0x20000140

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	0002      	movs	r2, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b7f      	cmp	r3, #127	; 0x7f
 800093c:	d828      	bhi.n	8000990 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093e:	4a2f      	ldr	r2, [pc, #188]	; (80009fc <__NVIC_SetPriority+0xd4>)
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b25b      	sxtb	r3, r3
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	33c0      	adds	r3, #192	; 0xc0
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	589b      	ldr	r3, [r3, r2]
 800094e:	1dfa      	adds	r2, r7, #7
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	0011      	movs	r1, r2
 8000954:	2203      	movs	r2, #3
 8000956:	400a      	ands	r2, r1
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	21ff      	movs	r1, #255	; 0xff
 800095c:	4091      	lsls	r1, r2
 800095e:	000a      	movs	r2, r1
 8000960:	43d2      	mvns	r2, r2
 8000962:	401a      	ands	r2, r3
 8000964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	019b      	lsls	r3, r3, #6
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	401a      	ands	r2, r3
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	0018      	movs	r0, r3
 8000974:	2303      	movs	r3, #3
 8000976:	4003      	ands	r3, r0
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097c:	481f      	ldr	r0, [pc, #124]	; (80009fc <__NVIC_SetPriority+0xd4>)
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b25b      	sxtb	r3, r3
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	430a      	orrs	r2, r1
 8000988:	33c0      	adds	r3, #192	; 0xc0
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800098e:	e031      	b.n	80009f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <__NVIC_SetPriority+0xd8>)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0019      	movs	r1, r3
 8000998:	230f      	movs	r3, #15
 800099a:	400b      	ands	r3, r1
 800099c:	3b08      	subs	r3, #8
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3306      	adds	r3, #6
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	3304      	adds	r3, #4
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	1dfa      	adds	r2, r7, #7
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	0011      	movs	r1, r2
 80009b0:	2203      	movs	r2, #3
 80009b2:	400a      	ands	r2, r1
 80009b4:	00d2      	lsls	r2, r2, #3
 80009b6:	21ff      	movs	r1, #255	; 0xff
 80009b8:	4091      	lsls	r1, r2
 80009ba:	000a      	movs	r2, r1
 80009bc:	43d2      	mvns	r2, r2
 80009be:	401a      	ands	r2, r3
 80009c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	019b      	lsls	r3, r3, #6
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	401a      	ands	r2, r3
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	0018      	movs	r0, r3
 80009d0:	2303      	movs	r3, #3
 80009d2:	4003      	ands	r3, r0
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <__NVIC_SetPriority+0xd8>)
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	001c      	movs	r4, r3
 80009e0:	230f      	movs	r3, #15
 80009e2:	4023      	ands	r3, r4
 80009e4:	3b08      	subs	r3, #8
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	430a      	orrs	r2, r1
 80009ea:	3306      	adds	r3, #6
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	18c3      	adds	r3, r0, r3
 80009f0:	3304      	adds	r3, #4
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b003      	add	sp, #12
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	045b      	lsls	r3, r3, #17
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d301      	bcc.n	8000a1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e010      	b.n	8000a3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <SysTick_Config+0x44>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	3a01      	subs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a24:	2301      	movs	r3, #1
 8000a26:	425b      	negs	r3, r3
 8000a28:	2103      	movs	r1, #3
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff ff7c 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <SysTick_Config+0x44>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SysTick_Config+0x44>)
 8000a38:	2207      	movs	r2, #7
 8000a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	e000e010 	.word	0xe000e010

08000a4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	210f      	movs	r1, #15
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	1c02      	adds	r2, r0, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ffbf 	bl	8000a04 <SysTick_Config>
 8000a86:	0003      	movs	r3, r0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e149      	b.n	8000d34 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	000a      	movs	r2, r1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d100      	bne.n	8000ab8 <HAL_GPIO_Init+0x28>
 8000ab6:	e13a      	b.n	8000d2e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2203      	movs	r2, #3
 8000abe:	4013      	ands	r3, r2
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d005      	beq.n	8000ad0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2203      	movs	r2, #3
 8000aca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d130      	bne.n	8000b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	409a      	lsls	r2, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	43da      	mvns	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	409a      	lsls	r2, r3
 8000af2:	0013      	movs	r3, r2
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b06:	2201      	movs	r2, #1
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
 8000b24:	0013      	movs	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2203      	movs	r2, #3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d017      	beq.n	8000b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2203      	movs	r2, #3
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d123      	bne.n	8000bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	08da      	lsrs	r2, r3, #3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3208      	adds	r2, #8
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	58d3      	ldr	r3, [r2, r3]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	43da      	mvns	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2107      	movs	r1, #7
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	08da      	lsrs	r2, r3, #3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	6939      	ldr	r1, [r7, #16]
 8000bc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2203      	movs	r2, #3
 8000be0:	401a      	ands	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	23c0      	movs	r3, #192	; 0xc0
 8000bfc:	029b      	lsls	r3, r3, #10
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d100      	bne.n	8000c04 <HAL_GPIO_Init+0x174>
 8000c02:	e094      	b.n	8000d2e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c04:	4b51      	ldr	r3, [pc, #324]	; (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	619a      	str	r2, [r3, #24]
 8000c10:	4b4e      	ldr	r3, [pc, #312]	; (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	2201      	movs	r2, #1
 8000c16:	4013      	ands	r3, r2
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c1c:	4a4c      	ldr	r2, [pc, #304]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	589b      	ldr	r3, [r3, r2]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	4013      	ands	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	2390      	movs	r3, #144	; 0x90
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d00d      	beq.n	8000c66 <HAL_GPIO_Init+0x1d6>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a41      	ldr	r2, [pc, #260]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d007      	beq.n	8000c62 <HAL_GPIO_Init+0x1d2>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a40      	ldr	r2, [pc, #256]	; (8000d58 <HAL_GPIO_Init+0x2c8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d101      	bne.n	8000c5e <HAL_GPIO_Init+0x1ce>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e004      	b.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c5e:	2305      	movs	r3, #5
 8000c60:	e002      	b.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c66:	2300      	movs	r3, #0
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	400a      	ands	r2, r1
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	4093      	lsls	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c78:	4935      	ldr	r1, [pc, #212]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	035b      	lsls	r3, r3, #13
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	039b      	lsls	r3, r3, #14
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	029b      	lsls	r3, r3, #10
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43da      	mvns	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	025b      	lsls	r3, r3, #9
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	40da      	lsrs	r2, r3
 8000d3c:	1e13      	subs	r3, r2, #0
 8000d3e:	d000      	beq.n	8000d42 <HAL_GPIO_Init+0x2b2>
 8000d40:	e6ae      	b.n	8000aa0 <HAL_GPIO_Init+0x10>
  } 
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b006      	add	sp, #24
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	0008      	movs	r0, r1
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	1cbb      	adds	r3, r7, #2
 8000d6e:	1c02      	adds	r2, r0, #0
 8000d70:	801a      	strh	r2, [r3, #0]
 8000d72:	1c7b      	adds	r3, r7, #1
 8000d74:	1c0a      	adds	r2, r1, #0
 8000d76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d78:	1c7b      	adds	r3, r7, #1
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d80:	1cbb      	adds	r3, r7, #2
 8000d82:	881a      	ldrh	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e003      	b.n	8000d92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8a:	1cbb      	adds	r3, r7, #2
 8000d8c:	881a      	ldrh	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f000 fb76 	bl	800149c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2201      	movs	r2, #1
 8000db6:	4013      	ands	r3, r2
 8000db8:	d100      	bne.n	8000dbc <HAL_RCC_OscConfig+0x20>
 8000dba:	e08e      	b.n	8000eda <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dbc:	4bc5      	ldr	r3, [pc, #788]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d00e      	beq.n	8000de6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc8:	4bc2      	ldr	r3, [pc, #776]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	220c      	movs	r2, #12
 8000dce:	4013      	ands	r3, r2
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d117      	bne.n	8000e04 <HAL_RCC_OscConfig+0x68>
 8000dd4:	4bbf      	ldr	r3, [pc, #764]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	23c0      	movs	r3, #192	; 0xc0
 8000dda:	025b      	lsls	r3, r3, #9
 8000ddc:	401a      	ands	r2, r3
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d10e      	bne.n	8000e04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de6:	4bbb      	ldr	r3, [pc, #748]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	029b      	lsls	r3, r3, #10
 8000dee:	4013      	ands	r3, r2
 8000df0:	d100      	bne.n	8000df4 <HAL_RCC_OscConfig+0x58>
 8000df2:	e071      	b.n	8000ed8 <HAL_RCC_OscConfig+0x13c>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d000      	beq.n	8000dfe <HAL_RCC_OscConfig+0x62>
 8000dfc:	e06c      	b.n	8000ed8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f000 fb4c 	bl	800149c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d107      	bne.n	8000e1c <HAL_RCC_OscConfig+0x80>
 8000e0c:	4bb1      	ldr	r3, [pc, #708]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4bb0      	ldr	r3, [pc, #704]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	0249      	lsls	r1, r1, #9
 8000e16:	430a      	orrs	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e02f      	b.n	8000e7c <HAL_RCC_OscConfig+0xe0>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10c      	bne.n	8000e3e <HAL_RCC_OscConfig+0xa2>
 8000e24:	4bab      	ldr	r3, [pc, #684]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4baa      	ldr	r3, [pc, #680]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	49ab      	ldr	r1, [pc, #684]	; (80010d8 <HAL_RCC_OscConfig+0x33c>)
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	4ba8      	ldr	r3, [pc, #672]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4ba7      	ldr	r3, [pc, #668]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e36:	49a9      	ldr	r1, [pc, #676]	; (80010dc <HAL_RCC_OscConfig+0x340>)
 8000e38:	400a      	ands	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	e01e      	b.n	8000e7c <HAL_RCC_OscConfig+0xe0>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d10e      	bne.n	8000e64 <HAL_RCC_OscConfig+0xc8>
 8000e46:	4ba3      	ldr	r3, [pc, #652]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4ba2      	ldr	r3, [pc, #648]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	02c9      	lsls	r1, r1, #11
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	4b9f      	ldr	r3, [pc, #636]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b9e      	ldr	r3, [pc, #632]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e00b      	b.n	8000e7c <HAL_RCC_OscConfig+0xe0>
 8000e64:	4b9b      	ldr	r3, [pc, #620]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b9a      	ldr	r3, [pc, #616]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e6a:	499b      	ldr	r1, [pc, #620]	; (80010d8 <HAL_RCC_OscConfig+0x33c>)
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	4b98      	ldr	r3, [pc, #608]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b97      	ldr	r3, [pc, #604]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000e76:	4999      	ldr	r1, [pc, #612]	; (80010dc <HAL_RCC_OscConfig+0x340>)
 8000e78:	400a      	ands	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d014      	beq.n	8000eae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fd46 	bl	8000914 <HAL_GetTick>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fd41 	bl	8000914 <HAL_GetTick>
 8000e92:	0002      	movs	r2, r0
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b64      	cmp	r3, #100	; 0x64
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e2fd      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea0:	4b8c      	ldr	r3, [pc, #560]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	029b      	lsls	r3, r3, #10
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0xf2>
 8000eac:	e015      	b.n	8000eda <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fd31 	bl	8000914 <HAL_GetTick>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fd2c 	bl	8000914 <HAL_GetTick>
 8000ebc:	0002      	movs	r2, r0
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e2e8      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eca:	4b82      	ldr	r3, [pc, #520]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	029b      	lsls	r3, r3, #10
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x11c>
 8000ed6:	e000      	b.n	8000eda <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d100      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x14a>
 8000ee4:	e06c      	b.n	8000fc0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ee6:	4b7b      	ldr	r3, [pc, #492]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	220c      	movs	r2, #12
 8000eec:	4013      	ands	r3, r2
 8000eee:	d00e      	beq.n	8000f0e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ef0:	4b78      	ldr	r3, [pc, #480]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d11f      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1a0>
 8000efc:	4b75      	ldr	r3, [pc, #468]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	23c0      	movs	r3, #192	; 0xc0
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	401a      	ands	r2, r3
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d116      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0e:	4b71      	ldr	r3, [pc, #452]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2202      	movs	r2, #2
 8000f14:	4013      	ands	r3, r2
 8000f16:	d005      	beq.n	8000f24 <HAL_RCC_OscConfig+0x188>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d001      	beq.n	8000f24 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e2bb      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f24:	4b6b      	ldr	r3, [pc, #428]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	22f8      	movs	r2, #248	; 0xf8
 8000f2a:	4393      	bics	r3, r2
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	00da      	lsls	r2, r3, #3
 8000f34:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	e041      	b.n	8000fc0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d024      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f44:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b62      	ldr	r3, [pc, #392]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fce0 	bl	8000914 <HAL_GetTick>
 8000f54:	0003      	movs	r3, r0
 8000f56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fcdb 	bl	8000914 <HAL_GetTick>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e297      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2202      	movs	r2, #2
 8000f72:	4013      	ands	r3, r2
 8000f74:	d0f1      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	22f8      	movs	r2, #248	; 0xf8
 8000f7c:	4393      	bics	r3, r2
 8000f7e:	0019      	movs	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	00da      	lsls	r2, r3, #3
 8000f86:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e018      	b.n	8000fc0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b51      	ldr	r3, [pc, #324]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	438a      	bics	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fcbb 	bl	8000914 <HAL_GetTick>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fcb6 	bl	8000914 <HAL_GetTick>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e272      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d1f1      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d036      	beq.n	8001038 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d019      	beq.n	8001006 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fc99 	bl	8000914 <HAL_GetTick>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fc94 	bl	8000914 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e250      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	2202      	movs	r2, #2
 8001000:	4013      	ands	r3, r2
 8001002:	d0f1      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x24c>
 8001004:	e018      	b.n	8001038 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8001008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 800100c:	2101      	movs	r1, #1
 800100e:	438a      	bics	r2, r1
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff fc7f 	bl	8000914 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fc7a 	bl	8000914 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e236      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	d1f1      	bne.n	800101c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2204      	movs	r2, #4
 800103e:	4013      	ands	r3, r2
 8001040:	d100      	bne.n	8001044 <HAL_RCC_OscConfig+0x2a8>
 8001042:	e0b5      	b.n	80011b0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001044:	201f      	movs	r0, #31
 8001046:	183b      	adds	r3, r7, r0
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 800104e:	69da      	ldr	r2, [r3, #28]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	055b      	lsls	r3, r3, #21
 8001054:	4013      	ands	r3, r2
 8001056:	d110      	bne.n	800107a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	0549      	lsls	r1, r1, #21
 8001062:	430a      	orrs	r2, r1
 8001064:	61da      	str	r2, [r3, #28]
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 8001068:	69da      	ldr	r2, [r3, #28]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	055b      	lsls	r3, r3, #21
 800106e:	4013      	ands	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001074:	183b      	adds	r3, r7, r0
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_RCC_OscConfig+0x344>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4013      	ands	r3, r2
 8001084:	d11a      	bne.n	80010bc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_RCC_OscConfig+0x344>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_RCC_OscConfig+0x344>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0049      	lsls	r1, r1, #1
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001094:	f7ff fc3e 	bl	8000914 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109e:	f7ff fc39 	bl	8000914 <HAL_GetTick>
 80010a2:	0002      	movs	r2, r0
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b64      	cmp	r3, #100	; 0x64
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e1f5      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_RCC_OscConfig+0x344>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4013      	ands	r3, r2
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10f      	bne.n	80010e4 <HAL_RCC_OscConfig+0x348>
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 80010c6:	6a1a      	ldr	r2, [r3, #32]
 80010c8:	4b02      	ldr	r3, [pc, #8]	; (80010d4 <HAL_RCC_OscConfig+0x338>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	621a      	str	r2, [r3, #32]
 80010d0:	e036      	b.n	8001140 <HAL_RCC_OscConfig+0x3a4>
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40021000 	.word	0x40021000
 80010d8:	fffeffff 	.word	0xfffeffff
 80010dc:	fffbffff 	.word	0xfffbffff
 80010e0:	40007000 	.word	0x40007000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10c      	bne.n	8001106 <HAL_RCC_OscConfig+0x36a>
 80010ec:	4bca      	ldr	r3, [pc, #808]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80010ee:	6a1a      	ldr	r2, [r3, #32]
 80010f0:	4bc9      	ldr	r3, [pc, #804]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	438a      	bics	r2, r1
 80010f6:	621a      	str	r2, [r3, #32]
 80010f8:	4bc7      	ldr	r3, [pc, #796]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	4bc6      	ldr	r3, [pc, #792]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80010fe:	2104      	movs	r1, #4
 8001100:	438a      	bics	r2, r1
 8001102:	621a      	str	r2, [r3, #32]
 8001104:	e01c      	b.n	8001140 <HAL_RCC_OscConfig+0x3a4>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0x38c>
 800110e:	4bc2      	ldr	r3, [pc, #776]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001110:	6a1a      	ldr	r2, [r3, #32]
 8001112:	4bc1      	ldr	r3, [pc, #772]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001114:	2104      	movs	r1, #4
 8001116:	430a      	orrs	r2, r1
 8001118:	621a      	str	r2, [r3, #32]
 800111a:	4bbf      	ldr	r3, [pc, #764]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	4bbe      	ldr	r3, [pc, #760]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001120:	2101      	movs	r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	621a      	str	r2, [r3, #32]
 8001126:	e00b      	b.n	8001140 <HAL_RCC_OscConfig+0x3a4>
 8001128:	4bbb      	ldr	r3, [pc, #748]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	4bba      	ldr	r3, [pc, #744]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800112e:	2101      	movs	r1, #1
 8001130:	438a      	bics	r2, r1
 8001132:	621a      	str	r2, [r3, #32]
 8001134:	4bb8      	ldr	r3, [pc, #736]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001136:	6a1a      	ldr	r2, [r3, #32]
 8001138:	4bb7      	ldr	r3, [pc, #732]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800113a:	2104      	movs	r1, #4
 800113c:	438a      	bics	r2, r1
 800113e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d014      	beq.n	8001172 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff fbe4 	bl	8000914 <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	e009      	b.n	8001166 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001152:	f7ff fbdf 	bl	8000914 <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	4aaf      	ldr	r2, [pc, #700]	; (800141c <HAL_RCC_OscConfig+0x680>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e19a      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001166:	4bac      	ldr	r3, [pc, #688]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x3b6>
 8001170:	e013      	b.n	800119a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001172:	f7ff fbcf 	bl	8000914 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117a:	e009      	b.n	8001190 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117c:	f7ff fbca 	bl	8000914 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	4aa5      	ldr	r2, [pc, #660]	; (800141c <HAL_RCC_OscConfig+0x680>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e185      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001190:	4ba1      	ldr	r3, [pc, #644]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	2202      	movs	r2, #2
 8001196:	4013      	ands	r3, r2
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800119a:	231f      	movs	r3, #31
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a4:	4b9c      	ldr	r3, [pc, #624]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	69da      	ldr	r2, [r3, #28]
 80011a8:	4b9b      	ldr	r3, [pc, #620]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80011aa:	499d      	ldr	r1, [pc, #628]	; (8001420 <HAL_RCC_OscConfig+0x684>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2210      	movs	r2, #16
 80011b6:	4013      	ands	r3, r2
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d12a      	bne.n	8001218 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011c2:	4b95      	ldr	r3, [pc, #596]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80011c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c6:	4b94      	ldr	r3, [pc, #592]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80011c8:	2104      	movs	r1, #4
 80011ca:	430a      	orrs	r2, r1
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011ce:	4b92      	ldr	r3, [pc, #584]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80011d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d2:	4b91      	ldr	r3, [pc, #580]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	430a      	orrs	r2, r1
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fb9b 	bl	8000914 <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011e4:	f7ff fb96 	bl	8000914 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e152      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	2202      	movs	r2, #2
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0f1      	beq.n	80011e4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001200:	4b85      	ldr	r3, [pc, #532]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001204:	22f8      	movs	r2, #248	; 0xf8
 8001206:	4393      	bics	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	00da      	lsls	r2, r3, #3
 8001210:	4b81      	ldr	r3, [pc, #516]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001212:	430a      	orrs	r2, r1
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
 8001216:	e034      	b.n	8001282 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	3305      	adds	r3, #5
 800121e:	d111      	bne.n	8001244 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001220:	4b7d      	ldr	r3, [pc, #500]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001224:	4b7c      	ldr	r3, [pc, #496]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001226:	2104      	movs	r1, #4
 8001228:	438a      	bics	r2, r1
 800122a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800122c:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	22f8      	movs	r2, #248	; 0xf8
 8001232:	4393      	bics	r3, r2
 8001234:	0019      	movs	r1, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	00da      	lsls	r2, r3, #3
 800123c:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800123e:	430a      	orrs	r2, r1
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
 8001242:	e01e      	b.n	8001282 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001244:	4b74      	ldr	r3, [pc, #464]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001248:	4b73      	ldr	r3, [pc, #460]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800124a:	2104      	movs	r1, #4
 800124c:	430a      	orrs	r2, r1
 800124e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001250:	4b71      	ldr	r3, [pc, #452]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001254:	4b70      	ldr	r3, [pc, #448]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001256:	2101      	movs	r1, #1
 8001258:	438a      	bics	r2, r1
 800125a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125c:	f7ff fb5a 	bl	8000914 <HAL_GetTick>
 8001260:	0003      	movs	r3, r0
 8001262:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001266:	f7ff fb55 	bl	8000914 <HAL_GetTick>
 800126a:	0002      	movs	r2, r0
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e111      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001278:	4b67      	ldr	r3, [pc, #412]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800127a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127c:	2202      	movs	r2, #2
 800127e:	4013      	ands	r3, r2
 8001280:	d1f1      	bne.n	8001266 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2220      	movs	r2, #32
 8001288:	4013      	ands	r3, r2
 800128a:	d05c      	beq.n	8001346 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800128c:	4b62      	ldr	r3, [pc, #392]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	220c      	movs	r2, #12
 8001292:	4013      	ands	r3, r2
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d00e      	beq.n	80012b6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001298:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	220c      	movs	r2, #12
 800129e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d114      	bne.n	80012ce <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	23c0      	movs	r3, #192	; 0xc0
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	401a      	ands	r2, r3
 80012ae:	23c0      	movs	r3, #192	; 0xc0
 80012b0:	025b      	lsls	r3, r3, #9
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d10b      	bne.n	80012ce <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012b6:	4b58      	ldr	r3, [pc, #352]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80012b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	4013      	ands	r3, r2
 80012c0:	d040      	beq.n	8001344 <HAL_RCC_OscConfig+0x5a8>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d03c      	beq.n	8001344 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e0e6      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01b      	beq.n	800130e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012d6:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80012d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0249      	lsls	r1, r1, #9
 80012e0:	430a      	orrs	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb16 	bl	8000914 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ee:	f7ff fb11 	bl	8000914 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0cd      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	029b      	lsls	r3, r3, #10
 8001308:	4013      	ands	r3, r2
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x552>
 800130c:	e01b      	b.n	8001346 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001314:	4943      	ldr	r1, [pc, #268]	; (8001424 <HAL_RCC_OscConfig+0x688>)
 8001316:	400a      	ands	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fafb 	bl	8000914 <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001324:	f7ff faf6 	bl	8000914 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0b2      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	029b      	lsls	r3, r3, #10
 800133e:	4013      	ands	r3, r2
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x588>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001344:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	2b00      	cmp	r3, #0
 800134c:	d100      	bne.n	8001350 <HAL_RCC_OscConfig+0x5b4>
 800134e:	e0a4      	b.n	800149a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	220c      	movs	r2, #12
 8001356:	4013      	ands	r3, r2
 8001358:	2b08      	cmp	r3, #8
 800135a:	d100      	bne.n	800135e <HAL_RCC_OscConfig+0x5c2>
 800135c:	e078      	b.n	8001450 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	2b02      	cmp	r3, #2
 8001364:	d14c      	bne.n	8001400 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800136c:	492e      	ldr	r1, [pc, #184]	; (8001428 <HAL_RCC_OscConfig+0x68c>)
 800136e:	400a      	ands	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff facf 	bl	8000914 <HAL_GetTick>
 8001376:	0003      	movs	r3, r0
 8001378:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff faca 	bl	8000914 <HAL_GetTick>
 8001380:	0002      	movs	r2, r0
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e086      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	049b      	lsls	r3, r3, #18
 8001396:	4013      	ands	r3, r2
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	220f      	movs	r2, #15
 80013a0:	4393      	bics	r3, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <HAL_RCC_OscConfig+0x690>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	431a      	orrs	r2, r3
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80013c4:	430a      	orrs	r2, r1
 80013c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	0449      	lsls	r1, r1, #17
 80013d2:	430a      	orrs	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fa9d 	bl	8000914 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fa98 	bl	8000914 <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e054      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	049b      	lsls	r3, r3, #18
 80013fa:	4013      	ands	r3, r2
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x644>
 80013fe:	e04c      	b.n	800149a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_RCC_OscConfig+0x67c>)
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <HAL_RCC_OscConfig+0x68c>)
 8001408:	400a      	ands	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fa82 	bl	8000914 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x6a6>
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	40021000 	.word	0x40021000
 800141c:	00001388 	.word	0x00001388
 8001420:	efffffff 	.word	0xefffffff
 8001424:	fffeffff 	.word	0xfffeffff
 8001428:	feffffff 	.word	0xfeffffff
 800142c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fa70 	bl	8000914 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e02c      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_RCC_OscConfig+0x708>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	049b      	lsls	r3, r3, #18
 800144a:	4013      	ands	r3, r2
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x694>
 800144e:	e024      	b.n	800149a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e01f      	b.n	800149c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_RCC_OscConfig+0x708>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x708>)
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	401a      	ands	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	429a      	cmp	r2, r3
 8001476:	d10e      	bne.n	8001496 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	220f      	movs	r2, #15
 800147c:	401a      	ands	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d107      	bne.n	8001496 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	23f0      	movs	r3, #240	; 0xf0
 800148a:	039b      	lsls	r3, r3, #14
 800148c:	401a      	ands	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	b008      	add	sp, #32
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0bf      	b.n	800163c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014bc:	4b61      	ldr	r3, [pc, #388]	; (8001644 <HAL_RCC_ClockConfig+0x19c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d911      	bls.n	80014ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b5e      	ldr	r3, [pc, #376]	; (8001644 <HAL_RCC_ClockConfig+0x19c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4393      	bics	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_RCC_ClockConfig+0x19c>)
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014dc:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_RCC_ClockConfig+0x19c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0a6      	b.n	800163c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d015      	beq.n	8001524 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2204      	movs	r2, #4
 80014fe:	4013      	ands	r3, r2
 8001500:	d006      	beq.n	8001510 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001502:	4b51      	ldr	r3, [pc, #324]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001508:	21e0      	movs	r1, #224	; 0xe0
 800150a:	00c9      	lsls	r1, r1, #3
 800150c:	430a      	orrs	r2, r1
 800150e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	22f0      	movs	r2, #240	; 0xf0
 8001516:	4393      	bics	r3, r2
 8001518:	0019      	movs	r1, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001520:	430a      	orrs	r2, r1
 8001522:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	d04c      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	d120      	bne.n	8001584 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07a      	b.n	800163c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	049b      	lsls	r3, r3, #18
 8001556:	4013      	ands	r3, r2
 8001558:	d114      	bne.n	8001584 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06e      	b.n	800163c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d108      	bne.n	8001584 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e062      	b.n	800163c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e05b      	b.n	800163c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	4393      	bics	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001598:	f7ff f9bc 	bl	8000914 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a0:	e009      	b.n	80015b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a2:	f7ff f9b7 	bl	8000914 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	4a27      	ldr	r2, [pc, #156]	; (800164c <HAL_RCC_ClockConfig+0x1a4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e042      	b.n	800163c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	220c      	movs	r2, #12
 80015bc:	401a      	ands	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d1ec      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_ClockConfig+0x19c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2201      	movs	r2, #1
 80015ce:	4013      	ands	r3, r2
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d211      	bcs.n	80015fa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_ClockConfig+0x19c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	4393      	bics	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_RCC_ClockConfig+0x19c>)
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_RCC_ClockConfig+0x19c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2201      	movs	r2, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e020      	b.n	800163c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2204      	movs	r2, #4
 8001600:	4013      	ands	r3, r2
 8001602:	d009      	beq.n	8001618 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_RCC_ClockConfig+0x1a8>)
 800160a:	4013      	ands	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001618:	f000 f820 	bl	800165c <HAL_RCC_GetSysClockFreq>
 800161c:	0001      	movs	r1, r0
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_RCC_ClockConfig+0x1a0>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	220f      	movs	r2, #15
 8001626:	4013      	ands	r3, r2
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_RCC_ClockConfig+0x1ac>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	000a      	movs	r2, r1
 800162e:	40da      	lsrs	r2, r3
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1b0>)
 8001632:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff f927 	bl	8000888 <HAL_InitTick>
  
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40022000 	.word	0x40022000
 8001648:	40021000 	.word	0x40021000
 800164c:	00001388 	.word	0x00001388
 8001650:	fffff8ff 	.word	0xfffff8ff
 8001654:	08002844 	.word	0x08002844
 8001658:	20000000 	.word	0x20000000

0800165c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	220c      	movs	r2, #12
 8001680:	4013      	ands	r3, r2
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d046      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0xb8>
 8001686:	d848      	bhi.n	800171a <HAL_RCC_GetSysClockFreq+0xbe>
 8001688:	2b04      	cmp	r3, #4
 800168a:	d002      	beq.n	8001692 <HAL_RCC_GetSysClockFreq+0x36>
 800168c:	2b08      	cmp	r3, #8
 800168e:	d003      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x3c>
 8001690:	e043      	b.n	800171a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001694:	613b      	str	r3, [r7, #16]
      break;
 8001696:	e043      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	220f      	movs	r2, #15
 800169e:	4013      	ands	r3, r2
 80016a0:	4a24      	ldr	r2, [pc, #144]	; (8001734 <HAL_RCC_GetSysClockFreq+0xd8>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_GetSysClockFreq+0xd0>)
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	220f      	movs	r2, #15
 80016ac:	4013      	ands	r3, r2
 80016ae:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_RCC_GetSysClockFreq+0xdc>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	23c0      	movs	r3, #192	; 0xc0
 80016b8:	025b      	lsls	r3, r3, #9
 80016ba:	401a      	ands	r2, r3
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	025b      	lsls	r3, r3, #9
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d109      	bne.n	80016d8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	481a      	ldr	r0, [pc, #104]	; (8001730 <HAL_RCC_GetSysClockFreq+0xd4>)
 80016c8:	f7fe fd1e 	bl	8000108 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	001a      	movs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4353      	muls	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e01a      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	23c0      	movs	r3, #192	; 0xc0
 80016dc:	025b      	lsls	r3, r3, #9
 80016de:	401a      	ands	r2, r3
 80016e0:	23c0      	movs	r3, #192	; 0xc0
 80016e2:	025b      	lsls	r3, r3, #9
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d109      	bne.n	80016fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <HAL_RCC_GetSysClockFreq+0xe0>)
 80016ec:	f7fe fd0c 	bl	8000108 <__udivsi3>
 80016f0:	0003      	movs	r3, r0
 80016f2:	001a      	movs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4353      	muls	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e008      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	480c      	ldr	r0, [pc, #48]	; (8001730 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001700:	f7fe fd02 	bl	8000108 <__udivsi3>
 8001704:	0003      	movs	r3, r0
 8001706:	001a      	movs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4353      	muls	r3, r2
 800170c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	613b      	str	r3, [r7, #16]
      break;
 8001712:	e005      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001716:	613b      	str	r3, [r7, #16]
      break;
 8001718:	e002      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_RCC_GetSysClockFreq+0xd4>)
 800171c:	613b      	str	r3, [r7, #16]
      break;
 800171e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001720:	693b      	ldr	r3, [r7, #16]
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b006      	add	sp, #24
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40021000 	.word	0x40021000
 8001730:	007a1200 	.word	0x007a1200
 8001734:	0800285c 	.word	0x0800285c
 8001738:	0800286c 	.word	0x0800286c
 800173c:	02dc6c00 	.word	0x02dc6c00

08001740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <HAL_RCC_GetHCLKFreq+0x10>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	20000000 	.word	0x20000000

08001754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001758:	f7ff fff2 	bl	8001740 <HAL_RCC_GetHCLKFreq>
 800175c:	0001      	movs	r1, r0
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	2207      	movs	r2, #7
 8001766:	4013      	ands	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_RCC_GetPCLK1Freq+0x28>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	40d9      	lsrs	r1, r3
 800176e:	000b      	movs	r3, r1
}    
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40021000 	.word	0x40021000
 800177c:	08002854 	.word	0x08002854

08001780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e042      	b.n	8001818 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	223d      	movs	r2, #61	; 0x3d
 8001796:	5c9b      	ldrb	r3, [r3, r2]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d107      	bne.n	80017ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	223c      	movs	r2, #60	; 0x3c
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7fe ff51 	bl	8000650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	223d      	movs	r2, #61	; 0x3d
 80017b2:	2102      	movs	r1, #2
 80017b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	0019      	movs	r1, r3
 80017c0:	0010      	movs	r0, r2
 80017c2:	f000 f99b 	bl	8001afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2246      	movs	r2, #70	; 0x46
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	223e      	movs	r2, #62	; 0x3e
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	223f      	movs	r2, #63	; 0x3f
 80017da:	2101      	movs	r1, #1
 80017dc:	5499      	strb	r1, [r3, r2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2241      	movs	r2, #65	; 0x41
 80017ea:	2101      	movs	r1, #1
 80017ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2242      	movs	r2, #66	; 0x42
 80017f2:	2101      	movs	r1, #1
 80017f4:	5499      	strb	r1, [r3, r2]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2243      	movs	r2, #67	; 0x43
 80017fa:	2101      	movs	r1, #1
 80017fc:	5499      	strb	r1, [r3, r2]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2244      	movs	r2, #68	; 0x44
 8001802:	2101      	movs	r1, #1
 8001804:	5499      	strb	r1, [r3, r2]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2245      	movs	r2, #69	; 0x45
 800180a:	2101      	movs	r1, #1
 800180c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	223d      	movs	r2, #61	; 0x3d
 8001812:	2101      	movs	r1, #1
 8001814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e090      	b.n	8001956 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	223d      	movs	r2, #61	; 0x3d
 8001838:	5c9b      	ldrb	r3, [r3, r2]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	223c      	movs	r2, #60	; 0x3c
 8001844:	2100      	movs	r1, #0
 8001846:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0018      	movs	r0, r3
 800184c:	f7fe feb6 	bl	80005bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	223d      	movs	r2, #61	; 0x3d
 8001854:	2102      	movs	r1, #2
 8001856:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	493f      	ldr	r1, [pc, #252]	; (8001960 <HAL_TIM_Encoder_Init+0x140>)
 8001864:	400a      	ands	r2, r1
 8001866:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3304      	adds	r3, #4
 8001870:	0019      	movs	r1, r3
 8001872:	0010      	movs	r0, r2
 8001874:	f000 f942 	bl	8001afc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4a31      	ldr	r2, [pc, #196]	; (8001964 <HAL_TIM_Encoder_Init+0x144>)
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4313      	orrs	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <HAL_TIM_Encoder_Init+0x148>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4a2b      	ldr	r2, [pc, #172]	; (800196c <HAL_TIM_Encoder_Init+0x14c>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	4313      	orrs	r3, r2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	011a      	lsls	r2, r3, #4
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	031b      	lsls	r3, r3, #12
 80018e2:	4313      	orrs	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2222      	movs	r2, #34	; 0x22
 80018ee:	4393      	bics	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2288      	movs	r2, #136	; 0x88
 80018f6:	4393      	bics	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4313      	orrs	r3, r2
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2246      	movs	r2, #70	; 0x46
 8001928:	2101      	movs	r1, #1
 800192a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	223e      	movs	r2, #62	; 0x3e
 8001930:	2101      	movs	r1, #1
 8001932:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	223f      	movs	r2, #63	; 0x3f
 8001938:	2101      	movs	r1, #1
 800193a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2242      	movs	r2, #66	; 0x42
 8001940:	2101      	movs	r1, #1
 8001942:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2243      	movs	r2, #67	; 0x43
 8001948:	2101      	movs	r1, #1
 800194a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	223d      	movs	r2, #61	; 0x3d
 8001950:	2101      	movs	r1, #1
 8001952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b006      	add	sp, #24
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	ffffbff8 	.word	0xffffbff8
 8001964:	fffffcfc 	.word	0xfffffcfc
 8001968:	fffff3f3 	.word	0xfffff3f3
 800196c:	ffff0f0f 	.word	0xffff0f0f

08001970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800197c:	2317      	movs	r3, #23
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	223c      	movs	r2, #60	; 0x3c
 8001988:	5c9b      	ldrb	r3, [r3, r2]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_TIM_PWM_ConfigChannel+0x22>
 800198e:	2302      	movs	r3, #2
 8001990:	e0ad      	b.n	8001aee <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	223c      	movs	r2, #60	; 0x3c
 8001996:	2101      	movs	r1, #1
 8001998:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d100      	bne.n	80019a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80019a0:	e076      	b.n	8001a90 <HAL_TIM_PWM_ConfigChannel+0x120>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d900      	bls.n	80019aa <HAL_TIM_PWM_ConfigChannel+0x3a>
 80019a8:	e095      	b.n	8001ad6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d04e      	beq.n	8001a4e <HAL_TIM_PWM_ConfigChannel+0xde>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d900      	bls.n	80019b8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80019b6:	e08e      	b.n	8001ad6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d021      	beq.n	8001a08 <HAL_TIM_PWM_ConfigChannel+0x98>
 80019c4:	e087      	b.n	8001ad6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	0011      	movs	r1, r2
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 f90a 	bl	8001be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2108      	movs	r1, #8
 80019e0:	430a      	orrs	r2, r1
 80019e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2104      	movs	r1, #4
 80019f0:	438a      	bics	r2, r1
 80019f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6999      	ldr	r1, [r3, #24]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	619a      	str	r2, [r3, #24]
      break;
 8001a06:	e06b      	b.n	8001ae0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	0011      	movs	r1, r2
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 f967 	bl	8001ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	0109      	lsls	r1, r1, #4
 8001a24:	430a      	orrs	r2, r1
 8001a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4931      	ldr	r1, [pc, #196]	; (8001af8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6999      	ldr	r1, [r3, #24]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	021a      	lsls	r2, r3, #8
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	619a      	str	r2, [r3, #24]
      break;
 8001a4c:	e048      	b.n	8001ae0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	0011      	movs	r1, r2
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 f9c2 	bl	8001de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2108      	movs	r1, #8
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2104      	movs	r1, #4
 8001a78:	438a      	bics	r2, r1
 8001a7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69d9      	ldr	r1, [r3, #28]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	61da      	str	r2, [r3, #28]
      break;
 8001a8e:	e027      	b.n	8001ae0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 fa21 	bl	8001ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69da      	ldr	r2, [r3, #28]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0109      	lsls	r1, r1, #4
 8001aac:	430a      	orrs	r2, r1
 8001aae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	490f      	ldr	r1, [pc, #60]	; (8001af8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001abc:	400a      	ands	r2, r1
 8001abe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69d9      	ldr	r1, [r3, #28]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	021a      	lsls	r2, r3, #8
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	61da      	str	r2, [r3, #28]
      break;
 8001ad4:	e004      	b.n	8001ae0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001ad6:	2317      	movs	r3, #23
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	223c      	movs	r2, #60	; 0x3c
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]

  return status;
 8001ae8:	2317      	movs	r3, #23
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	781b      	ldrb	r3, [r3, #0]
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b006      	add	sp, #24
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	fffffbff 	.word	0xfffffbff

08001afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <TIM_Base_SetConfig+0xd4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d008      	beq.n	8001b26 <TIM_Base_SetConfig+0x2a>
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	05db      	lsls	r3, r3, #23
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d003      	beq.n	8001b26 <TIM_Base_SetConfig+0x2a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <TIM_Base_SetConfig+0xd8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d108      	bne.n	8001b38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2270      	movs	r2, #112	; 0x70
 8001b2a:	4393      	bics	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <TIM_Base_SetConfig+0xd4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d014      	beq.n	8001b6a <TIM_Base_SetConfig+0x6e>
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d00f      	beq.n	8001b6a <TIM_Base_SetConfig+0x6e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <TIM_Base_SetConfig+0xd8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00b      	beq.n	8001b6a <TIM_Base_SetConfig+0x6e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <TIM_Base_SetConfig+0xdc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <TIM_Base_SetConfig+0x6e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <TIM_Base_SetConfig+0xe0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d003      	beq.n	8001b6a <TIM_Base_SetConfig+0x6e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <TIM_Base_SetConfig+0xe4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d108      	bne.n	8001b7c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <TIM_Base_SetConfig+0xe8>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	4393      	bics	r3, r2
 8001b82:	001a      	movs	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <TIM_Base_SetConfig+0xd4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d007      	beq.n	8001bba <TIM_Base_SetConfig+0xbe>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <TIM_Base_SetConfig+0xe0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d003      	beq.n	8001bba <TIM_Base_SetConfig+0xbe>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <TIM_Base_SetConfig+0xe4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d103      	bne.n	8001bc2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	615a      	str	r2, [r3, #20]
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b004      	add	sp, #16
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40012c00 	.word	0x40012c00
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40002000 	.word	0x40002000
 8001bdc:	40014400 	.word	0x40014400
 8001be0:	40014800 	.word	0x40014800
 8001be4:	fffffcff 	.word	0xfffffcff

08001be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2270      	movs	r2, #112	; 0x70
 8001c16:	4393      	bics	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4393      	bics	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4393      	bics	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <TIM_OC1_SetConfig+0xe8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <TIM_OC1_SetConfig+0x6e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <TIM_OC1_SetConfig+0xec>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d003      	beq.n	8001c56 <TIM_OC1_SetConfig+0x6e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <TIM_OC1_SetConfig+0xf0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d10c      	bne.n	8001c70 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	4393      	bics	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <TIM_OC1_SetConfig+0xe8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <TIM_OC1_SetConfig+0xa0>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <TIM_OC1_SetConfig+0xec>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d003      	beq.n	8001c88 <TIM_OC1_SetConfig+0xa0>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <TIM_OC1_SetConfig+0xf0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d111      	bne.n	8001cac <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <TIM_OC1_SetConfig+0xf4>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <TIM_OC1_SetConfig+0xf8>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	621a      	str	r2, [r3, #32]
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b006      	add	sp, #24
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40012c00 	.word	0x40012c00
 8001cd4:	40014400 	.word	0x40014400
 8001cd8:	40014800 	.word	0x40014800
 8001cdc:	fffffeff 	.word	0xfffffeff
 8001ce0:	fffffdff 	.word	0xfffffdff

08001ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	2210      	movs	r2, #16
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a2c      	ldr	r2, [pc, #176]	; (8001dc4 <TIM_OC2_SetConfig+0xe0>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <TIM_OC2_SetConfig+0xe4>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	4393      	bics	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <TIM_OC2_SetConfig+0xe8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d10d      	bne.n	8001d62 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	4393      	bics	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2240      	movs	r2, #64	; 0x40
 8001d5e:	4393      	bics	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <TIM_OC2_SetConfig+0xe8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <TIM_OC2_SetConfig+0x96>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <TIM_OC2_SetConfig+0xec>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <TIM_OC2_SetConfig+0x96>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <TIM_OC2_SetConfig+0xf0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d113      	bne.n	8001da2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <TIM_OC2_SetConfig+0xf4>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <TIM_OC2_SetConfig+0xf8>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	621a      	str	r2, [r3, #32]
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b006      	add	sp, #24
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	ffff8fff 	.word	0xffff8fff
 8001dc8:	fffffcff 	.word	0xfffffcff
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	40014400 	.word	0x40014400
 8001dd4:	40014800 	.word	0x40014800
 8001dd8:	fffffbff 	.word	0xfffffbff
 8001ddc:	fffff7ff 	.word	0xfffff7ff

08001de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <TIM_OC3_SetConfig+0xdc>)
 8001df0:	401a      	ands	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2270      	movs	r2, #112	; 0x70
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2203      	movs	r2, #3
 8001e14:	4393      	bics	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <TIM_OC3_SetConfig+0xe0>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <TIM_OC3_SetConfig+0xe4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10d      	bne.n	8001e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <TIM_OC3_SetConfig+0xe8>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <TIM_OC3_SetConfig+0xec>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <TIM_OC3_SetConfig+0xe4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <TIM_OC3_SetConfig+0x92>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <TIM_OC3_SetConfig+0xf0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_OC3_SetConfig+0x92>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <TIM_OC3_SetConfig+0xf4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d113      	bne.n	8001e9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <TIM_OC3_SetConfig+0xf8>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4a17      	ldr	r2, [pc, #92]	; (8001edc <TIM_OC3_SetConfig+0xfc>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	621a      	str	r2, [r3, #32]
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b006      	add	sp, #24
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	fffffeff 	.word	0xfffffeff
 8001ec0:	fffffdff 	.word	0xfffffdff
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	fffff7ff 	.word	0xfffff7ff
 8001ecc:	fffffbff 	.word	0xfffffbff
 8001ed0:	40014400 	.word	0x40014400
 8001ed4:	40014800 	.word	0x40014800
 8001ed8:	ffffefff 	.word	0xffffefff
 8001edc:	ffffdfff 	.word	0xffffdfff

08001ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <TIM_OC4_SetConfig+0xa8>)
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <TIM_OC4_SetConfig+0xac>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <TIM_OC4_SetConfig+0xb0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <TIM_OC4_SetConfig+0xb4>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	031b      	lsls	r3, r3, #12
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <TIM_OC4_SetConfig+0xb8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_OC4_SetConfig+0x70>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <TIM_OC4_SetConfig+0xbc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_OC4_SetConfig+0x70>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <TIM_OC4_SetConfig+0xc0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d109      	bne.n	8001f64 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <TIM_OC4_SetConfig+0xc4>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	621a      	str	r2, [r3, #32]
}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	ffffefff 	.word	0xffffefff
 8001f8c:	ffff8fff 	.word	0xffff8fff
 8001f90:	fffffcff 	.word	0xfffffcff
 8001f94:	ffffdfff 	.word	0xffffdfff
 8001f98:	40012c00 	.word	0x40012c00
 8001f9c:	40014400 	.word	0x40014400
 8001fa0:	40014800 	.word	0x40014800
 8001fa4:	ffffbfff 	.word	0xffffbfff

08001fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	223c      	movs	r2, #60	; 0x3c
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e042      	b.n	8002046 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	223c      	movs	r2, #60	; 0x3c
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	223d      	movs	r2, #61	; 0x3d
 8001fcc:	2102      	movs	r1, #2
 8001fce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2270      	movs	r2, #112	; 0x70
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00a      	beq.n	800201a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	05db      	lsls	r3, r3, #23
 800200c:	429a      	cmp	r2, r3
 800200e:	d004      	beq.n	800201a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10c      	bne.n	8002034 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	4393      	bics	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	4313      	orrs	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	223d      	movs	r2, #61	; 0x3d
 8002038:	2101      	movs	r1, #1
 800203a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	223c      	movs	r2, #60	; 0x3c
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	40012c00 	.word	0x40012c00
 8002054:	40000400 	.word	0x40000400

08002058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e044      	b.n	80020f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2278      	movs	r2, #120	; 0x78
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f7fe fb43 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2224      	movs	r2, #36	; 0x24
 8002086:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	438a      	bics	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0018      	movs	r0, r3
 800209c:	f000 f830 	bl	8002100 <UART_SetConfig>
 80020a0:	0003      	movs	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e024      	b.n	80020f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 f963 	bl	8002380 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	490d      	ldr	r1, [pc, #52]	; (80020fc <HAL_UART_Init+0xa4>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	212a      	movs	r1, #42	; 0x2a
 80020d6:	438a      	bics	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f9fb 	bl	80024e8 <UART_CheckIdleState>
 80020f2:	0003      	movs	r3, r0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	ffffb7ff 	.word	0xffffb7ff

08002100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002108:	231e      	movs	r3, #30
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a8d      	ldr	r2, [pc, #564]	; (8002364 <UART_SetConfig+0x264>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a88      	ldr	r2, [pc, #544]	; (8002368 <UART_SetConfig+0x268>)
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a7f      	ldr	r2, [pc, #508]	; (800236c <UART_SetConfig+0x26c>)
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <UART_SetConfig+0x270>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d127      	bne.n	80021d6 <UART_SetConfig+0xd6>
 8002186:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <UART_SetConfig+0x274>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	2203      	movs	r2, #3
 800218c:	4013      	ands	r3, r2
 800218e:	2b03      	cmp	r3, #3
 8002190:	d00d      	beq.n	80021ae <UART_SetConfig+0xae>
 8002192:	d81b      	bhi.n	80021cc <UART_SetConfig+0xcc>
 8002194:	2b02      	cmp	r3, #2
 8002196:	d014      	beq.n	80021c2 <UART_SetConfig+0xc2>
 8002198:	d818      	bhi.n	80021cc <UART_SetConfig+0xcc>
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <UART_SetConfig+0xa4>
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d00a      	beq.n	80021b8 <UART_SetConfig+0xb8>
 80021a2:	e013      	b.n	80021cc <UART_SetConfig+0xcc>
 80021a4:	231f      	movs	r3, #31
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e021      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021ae:	231f      	movs	r3, #31
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e01c      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021b8:	231f      	movs	r3, #31
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	2204      	movs	r2, #4
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e017      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021c2:	231f      	movs	r3, #31
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2208      	movs	r2, #8
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e012      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021cc:	231f      	movs	r3, #31
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2210      	movs	r2, #16
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e00d      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a67      	ldr	r2, [pc, #412]	; (8002378 <UART_SetConfig+0x278>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d104      	bne.n	80021ea <UART_SetConfig+0xea>
 80021e0:	231f      	movs	r3, #31
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e003      	b.n	80021f2 <UART_SetConfig+0xf2>
 80021ea:	231f      	movs	r3, #31
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2210      	movs	r2, #16
 80021f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d15c      	bne.n	80022b8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80021fe:	231f      	movs	r3, #31
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d015      	beq.n	8002234 <UART_SetConfig+0x134>
 8002208:	dc18      	bgt.n	800223c <UART_SetConfig+0x13c>
 800220a:	2b04      	cmp	r3, #4
 800220c:	d00d      	beq.n	800222a <UART_SetConfig+0x12a>
 800220e:	dc15      	bgt.n	800223c <UART_SetConfig+0x13c>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <UART_SetConfig+0x11a>
 8002214:	2b02      	cmp	r3, #2
 8002216:	d005      	beq.n	8002224 <UART_SetConfig+0x124>
 8002218:	e010      	b.n	800223c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800221a:	f7ff fa9b 	bl	8001754 <HAL_RCC_GetPCLK1Freq>
 800221e:	0003      	movs	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
        break;
 8002222:	e012      	b.n	800224a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002224:	4b55      	ldr	r3, [pc, #340]	; (800237c <UART_SetConfig+0x27c>)
 8002226:	61bb      	str	r3, [r7, #24]
        break;
 8002228:	e00f      	b.n	800224a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800222a:	f7ff fa17 	bl	800165c <HAL_RCC_GetSysClockFreq>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]
        break;
 8002232:	e00a      	b.n	800224a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	61bb      	str	r3, [r7, #24]
        break;
 800223a:	e006      	b.n	800224a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002240:	231e      	movs	r3, #30
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
        break;
 8002248:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <UART_SetConfig+0x152>
 8002250:	e07a      	b.n	8002348 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	005a      	lsls	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	18d2      	adds	r2, r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0019      	movs	r1, r3
 8002264:	0010      	movs	r0, r2
 8002266:	f7fd ff4f 	bl	8000108 <__udivsi3>
 800226a:	0003      	movs	r3, r0
 800226c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d91c      	bls.n	80022ae <UART_SetConfig+0x1ae>
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	025b      	lsls	r3, r3, #9
 800227a:	429a      	cmp	r2, r3
 800227c:	d217      	bcs.n	80022ae <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	b29a      	uxth	r2, r3
 8002282:	200e      	movs	r0, #14
 8002284:	183b      	adds	r3, r7, r0
 8002286:	210f      	movs	r1, #15
 8002288:	438a      	bics	r2, r1
 800228a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	2207      	movs	r2, #7
 8002294:	4013      	ands	r3, r2
 8002296:	b299      	uxth	r1, r3
 8002298:	183b      	adds	r3, r7, r0
 800229a:	183a      	adds	r2, r7, r0
 800229c:	8812      	ldrh	r2, [r2, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	183a      	adds	r2, r7, r0
 80022a8:	8812      	ldrh	r2, [r2, #0]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	e04c      	b.n	8002348 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80022ae:	231e      	movs	r3, #30
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e047      	b.n	8002348 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022b8:	231f      	movs	r3, #31
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d015      	beq.n	80022ee <UART_SetConfig+0x1ee>
 80022c2:	dc18      	bgt.n	80022f6 <UART_SetConfig+0x1f6>
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00d      	beq.n	80022e4 <UART_SetConfig+0x1e4>
 80022c8:	dc15      	bgt.n	80022f6 <UART_SetConfig+0x1f6>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <UART_SetConfig+0x1d4>
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d005      	beq.n	80022de <UART_SetConfig+0x1de>
 80022d2:	e010      	b.n	80022f6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022d4:	f7ff fa3e 	bl	8001754 <HAL_RCC_GetPCLK1Freq>
 80022d8:	0003      	movs	r3, r0
 80022da:	61bb      	str	r3, [r7, #24]
        break;
 80022dc:	e012      	b.n	8002304 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022de:	4b27      	ldr	r3, [pc, #156]	; (800237c <UART_SetConfig+0x27c>)
 80022e0:	61bb      	str	r3, [r7, #24]
        break;
 80022e2:	e00f      	b.n	8002304 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022e4:	f7ff f9ba 	bl	800165c <HAL_RCC_GetSysClockFreq>
 80022e8:	0003      	movs	r3, r0
 80022ea:	61bb      	str	r3, [r7, #24]
        break;
 80022ec:	e00a      	b.n	8002304 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	61bb      	str	r3, [r7, #24]
        break;
 80022f4:	e006      	b.n	8002304 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022fa:	231e      	movs	r3, #30
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
        break;
 8002302:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01e      	beq.n	8002348 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	085a      	lsrs	r2, r3, #1
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	18d2      	adds	r2, r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0019      	movs	r1, r3
 800231a:	0010      	movs	r0, r2
 800231c:	f7fd fef4 	bl	8000108 <__udivsi3>
 8002320:	0003      	movs	r3, r0
 8002322:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	d90a      	bls.n	8002340 <UART_SetConfig+0x240>
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	025b      	lsls	r3, r3, #9
 8002330:	429a      	cmp	r2, r3
 8002332:	d205      	bcs.n	8002340 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	b29a      	uxth	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	e003      	b.n	8002348 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002340:	231e      	movs	r3, #30
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002354:	231e      	movs	r3, #30
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	781b      	ldrb	r3, [r3, #0]
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b008      	add	sp, #32
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	efff69f3 	.word	0xefff69f3
 8002368:	ffffcfff 	.word	0xffffcfff
 800236c:	fffff4ff 	.word	0xfffff4ff
 8002370:	40013800 	.word	0x40013800
 8002374:	40021000 	.word	0x40021000
 8002378:	40004400 	.word	0x40004400
 800237c:	007a1200 	.word	0x007a1200

08002380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2201      	movs	r2, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d00b      	beq.n	80023aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a4a      	ldr	r2, [pc, #296]	; (80024c4 <UART_AdvFeatureConfig+0x144>)
 800239a:	4013      	ands	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d00b      	beq.n	80023cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a43      	ldr	r2, [pc, #268]	; (80024c8 <UART_AdvFeatureConfig+0x148>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2204      	movs	r2, #4
 80023d2:	4013      	ands	r3, r2
 80023d4:	d00b      	beq.n	80023ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <UART_AdvFeatureConfig+0x14c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2208      	movs	r2, #8
 80023f4:	4013      	ands	r3, r2
 80023f6:	d00b      	beq.n	8002410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <UART_AdvFeatureConfig+0x150>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2210      	movs	r2, #16
 8002416:	4013      	ands	r3, r2
 8002418:	d00b      	beq.n	8002432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <UART_AdvFeatureConfig+0x154>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2220      	movs	r2, #32
 8002438:	4013      	ands	r3, r2
 800243a:	d00b      	beq.n	8002454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <UART_AdvFeatureConfig+0x158>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	4013      	ands	r3, r2
 800245c:	d01d      	beq.n	800249a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <UART_AdvFeatureConfig+0x15c>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	035b      	lsls	r3, r3, #13
 800247e:	429a      	cmp	r2, r3
 8002480:	d10b      	bne.n	800249a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <UART_AdvFeatureConfig+0x160>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	4013      	ands	r3, r2
 80024a2:	d00b      	beq.n	80024bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <UART_AdvFeatureConfig+0x164>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fffdffff 	.word	0xfffdffff
 80024c8:	fffeffff 	.word	0xfffeffff
 80024cc:	fffbffff 	.word	0xfffbffff
 80024d0:	ffff7fff 	.word	0xffff7fff
 80024d4:	ffffefff 	.word	0xffffefff
 80024d8:	ffffdfff 	.word	0xffffdfff
 80024dc:	ffefffff 	.word	0xffefffff
 80024e0:	ff9fffff 	.word	0xff9fffff
 80024e4:	fff7ffff 	.word	0xfff7ffff

080024e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b092      	sub	sp, #72	; 0x48
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2284      	movs	r2, #132	; 0x84
 80024f4:	2100      	movs	r1, #0
 80024f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024f8:	f7fe fa0c 	bl	8000914 <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2208      	movs	r2, #8
 8002508:	4013      	ands	r3, r2
 800250a:	2b08      	cmp	r3, #8
 800250c:	d12c      	bne.n	8002568 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	0391      	lsls	r1, r2, #14
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4a46      	ldr	r2, [pc, #280]	; (8002630 <UART_CheckIdleState+0x148>)
 8002518:	9200      	str	r2, [sp, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	f000 f88c 	bl	8002638 <UART_WaitOnFlagUntilTimeout>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d021      	beq.n	8002568 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002524:	f3ef 8310 	mrs	r3, PRIMASK
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
 800252e:	2301      	movs	r3, #1
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	f383 8810 	msr	PRIMASK, r3
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	438a      	bics	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	f383 8810 	msr	PRIMASK, r3
}
 8002554:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2278      	movs	r2, #120	; 0x78
 8002560:	2100      	movs	r1, #0
 8002562:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e05f      	b.n	8002628 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2204      	movs	r2, #4
 8002570:	4013      	ands	r3, r2
 8002572:	2b04      	cmp	r3, #4
 8002574:	d146      	bne.n	8002604 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	03d1      	lsls	r1, r2, #15
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <UART_CheckIdleState+0x148>)
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	f000 f858 	bl	8002638 <UART_WaitOnFlagUntilTimeout>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d03b      	beq.n	8002604 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800258c:	f3ef 8310 	mrs	r3, PRIMASK
 8002590:	60fb      	str	r3, [r7, #12]
  return(result);
 8002592:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
 8002596:	2301      	movs	r3, #1
 8002598:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f383 8810 	msr	PRIMASK, r3
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4921      	ldr	r1, [pc, #132]	; (8002634 <UART_CheckIdleState+0x14c>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f383 8810 	msr	PRIMASK, r3
}
 80025bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025be:	f3ef 8310 	mrs	r3, PRIMASK
 80025c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80025c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
 80025c8:	2301      	movs	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f383 8810 	msr	PRIMASK, r3
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2101      	movs	r1, #1
 80025e0:	438a      	bics	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f383 8810 	msr	PRIMASK, r3
}
 80025ee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	2120      	movs	r1, #32
 80025f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2278      	movs	r2, #120	; 0x78
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e011      	b.n	8002628 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	2120      	movs	r1, #32
 8002610:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2278      	movs	r2, #120	; 0x78
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b010      	add	sp, #64	; 0x40
 800262e:	bd80      	pop	{r7, pc}
 8002630:	01ffffff 	.word	0x01ffffff
 8002634:	fffffedf 	.word	0xfffffedf

08002638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002648:	e04b      	b.n	80026e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	3301      	adds	r3, #1
 800264e:	d048      	beq.n	80026e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002650:	f7fe f960 	bl	8000914 <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	429a      	cmp	r2, r3
 800265e:	d302      	bcc.n	8002666 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e04b      	b.n	8002702 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2204      	movs	r2, #4
 8002672:	4013      	ands	r3, r2
 8002674:	d035      	beq.n	80026e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	2208      	movs	r2, #8
 800267e:	4013      	ands	r3, r2
 8002680:	2b08      	cmp	r3, #8
 8002682:	d111      	bne.n	80026a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2208      	movs	r2, #8
 800268a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f83c 	bl	800270c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2284      	movs	r2, #132	; 0x84
 8002698:	2108      	movs	r1, #8
 800269a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2278      	movs	r2, #120	; 0x78
 80026a0:	2100      	movs	r1, #0
 80026a2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e02c      	b.n	8002702 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	401a      	ands	r2, r3
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d112      	bne.n	80026e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f81f 	bl	800270c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2284      	movs	r2, #132	; 0x84
 80026d2:	2120      	movs	r1, #32
 80026d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2278      	movs	r2, #120	; 0x78
 80026da:	2100      	movs	r1, #0
 80026dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e00f      	b.n	8002702 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	4013      	ands	r3, r2
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	425a      	negs	r2, r3
 80026f2:	4153      	adcs	r3, r2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	001a      	movs	r2, r3
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d0a4      	beq.n	800264a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08e      	sub	sp, #56	; 0x38
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002714:	f3ef 8310 	mrs	r3, PRIMASK
 8002718:	617b      	str	r3, [r7, #20]
  return(result);
 800271a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
 800271e:	2301      	movs	r3, #1
 8002720:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f383 8810 	msr	PRIMASK, r3
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4926      	ldr	r1, [pc, #152]	; (80027d0 <UART_EndRxTransfer+0xc4>)
 8002736:	400a      	ands	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f383 8810 	msr	PRIMASK, r3
}
 8002744:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002746:	f3ef 8310 	mrs	r3, PRIMASK
 800274a:	623b      	str	r3, [r7, #32]
  return(result);
 800274c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
 8002750:	2301      	movs	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f383 8810 	msr	PRIMASK, r3
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2101      	movs	r1, #1
 8002768:	438a      	bics	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	f383 8810 	msr	PRIMASK, r3
}
 8002776:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277c:	2b01      	cmp	r3, #1
 800277e:	d118      	bne.n	80027b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002780:	f3ef 8310 	mrs	r3, PRIMASK
 8002784:	60bb      	str	r3, [r7, #8]
  return(result);
 8002786:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278a:	2301      	movs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f383 8810 	msr	PRIMASK, r3
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2110      	movs	r1, #16
 80027a2:	438a      	bics	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f383 8810 	msr	PRIMASK, r3
}
 80027b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	2120      	movs	r1, #32
 80027b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b00e      	add	sp, #56	; 0x38
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	fffffedf 	.word	0xfffffedf

080027d4 <__libc_init_array>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	2600      	movs	r6, #0
 80027d8:	4d0c      	ldr	r5, [pc, #48]	; (800280c <__libc_init_array+0x38>)
 80027da:	4c0d      	ldr	r4, [pc, #52]	; (8002810 <__libc_init_array+0x3c>)
 80027dc:	1b64      	subs	r4, r4, r5
 80027de:	10a4      	asrs	r4, r4, #2
 80027e0:	42a6      	cmp	r6, r4
 80027e2:	d109      	bne.n	80027f8 <__libc_init_array+0x24>
 80027e4:	2600      	movs	r6, #0
 80027e6:	f000 f821 	bl	800282c <_init>
 80027ea:	4d0a      	ldr	r5, [pc, #40]	; (8002814 <__libc_init_array+0x40>)
 80027ec:	4c0a      	ldr	r4, [pc, #40]	; (8002818 <__libc_init_array+0x44>)
 80027ee:	1b64      	subs	r4, r4, r5
 80027f0:	10a4      	asrs	r4, r4, #2
 80027f2:	42a6      	cmp	r6, r4
 80027f4:	d105      	bne.n	8002802 <__libc_init_array+0x2e>
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	00b3      	lsls	r3, r6, #2
 80027fa:	58eb      	ldr	r3, [r5, r3]
 80027fc:	4798      	blx	r3
 80027fe:	3601      	adds	r6, #1
 8002800:	e7ee      	b.n	80027e0 <__libc_init_array+0xc>
 8002802:	00b3      	lsls	r3, r6, #2
 8002804:	58eb      	ldr	r3, [r5, r3]
 8002806:	4798      	blx	r3
 8002808:	3601      	adds	r6, #1
 800280a:	e7f2      	b.n	80027f2 <__libc_init_array+0x1e>
 800280c:	0800287c 	.word	0x0800287c
 8002810:	0800287c 	.word	0x0800287c
 8002814:	0800287c 	.word	0x0800287c
 8002818:	08002880 	.word	0x08002880

0800281c <memset>:
 800281c:	0003      	movs	r3, r0
 800281e:	1882      	adds	r2, r0, r2
 8002820:	4293      	cmp	r3, r2
 8002822:	d100      	bne.n	8002826 <memset+0xa>
 8002824:	4770      	bx	lr
 8002826:	7019      	strb	r1, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	e7f9      	b.n	8002820 <memset+0x4>

0800282c <_init>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr

08002838 <_fini>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr
